namespace Fossa.API.Web.Api
{
    [Microsoft.AspNetCore.Mvc.ApiController]
    [Microsoft.AspNetCore.Mvc.Route("api/{version:apiVersion}/[controller]")]
    public abstract class BaseApiController : Microsoft.AspNetCore.Mvc.ControllerBase
    {
        protected readonly MediatR.IPublisher _publisher;
        protected readonly MediatR.ISender _sender;
        protected BaseApiController(MediatR.ISender sender, MediatR.IPublisher publisher) { }
    }
    [Microsoft.AspNetCore.Mvc.ApiController]
    [Microsoft.AspNetCore.Mvc.Route("api/[controller]")]
    public abstract class BaseApiController<TEntityIdentity> : Fossa.API.Web.Api.BaseApiController
    {
        protected readonly TIKSN.Mapping.IMapper<long, TEntityIdentity> _dataIdentityToDomainIdentityMapper;
        protected readonly TIKSN.Mapping.IMapper<TEntityIdentity, long> _domainIdentityToDataIdentityMapper;
        protected BaseApiController(MediatR.ISender sender, MediatR.IPublisher publisher, TIKSN.Mapping.IMapper<TEntityIdentity, long> domainIdentityToDataIdentityMapper, TIKSN.Mapping.IMapper<long, TEntityIdentity> dataIdentityToDomainIdentityMapper) { }
    }
    [Asp.Versioning.ApiVersion(1D, null)]
    [Microsoft.AspNetCore.Authorization.Authorize]
    [Microsoft.AspNetCore.Mvc.ApiController]
    [Microsoft.AspNetCore.Mvc.Route("api/{version:apiVersion}/[controller]")]
    public class BranchesController : Fossa.API.Web.Api.BaseApiController<Fossa.API.Core.Entities.BranchId>
    {
        public BranchesController(Fossa.API.Core.Tenant.ITenantIdProvider<System.Guid> tenantIdProvider, Fossa.API.Core.User.IUserIdProvider<System.Guid> userIdProvider, MediatR.ISender sender, MediatR.IPublisher publisher, TIKSN.Mapping.IMapper<Fossa.API.Core.Entities.BranchId, long> domainIdentityToDataIdentityMapper, TIKSN.Mapping.IMapper<long, Fossa.API.Core.Entities.BranchId> dataIdentityToDomainIdentityMapper) { }
        [Microsoft.AspNetCore.Authorization.Authorize(Roles="administrator")]
        [Microsoft.AspNetCore.Mvc.HttpDelete("{id}")]
        public System.Threading.Tasks.Task DeleteAsync(long id, System.Threading.CancellationToken cancellationToken) { }
        [Microsoft.AspNetCore.Mvc.HttpGet("{id}")]
        public System.Threading.Tasks.Task<Fossa.API.Web.ApiModels.BranchRetrievalModel> GetAsync([Microsoft.AspNetCore.Mvc.FromRoute] long id, [Microsoft.AspNetCore.Mvc.FromServices] TIKSN.Mapping.IMapper<Fossa.API.Core.Entities.BranchEntity, Fossa.API.Web.ApiModels.BranchRetrievalModel> mapper, System.Threading.CancellationToken cancellationToken) { }
        [Microsoft.AspNetCore.Authorization.Authorize(Roles="administrator")]
        [Microsoft.AspNetCore.Mvc.HttpPost]
        public System.Threading.Tasks.Task PostAsync([Microsoft.AspNetCore.Mvc.FromBody] Fossa.API.Web.ApiModels.BranchModificationModel model, [Microsoft.AspNetCore.Mvc.FromServices] Fossa.API.Core.TimeZone.IDateTimeZoneProvider dateTimeZoneProvider, [Microsoft.AspNetCore.Mvc.FromServices] TIKSN.Mapping.IMapper<Fossa.API.Web.ApiModels.AddressModel, Fossa.API.Core.Entities.Address> addressModelToDomainMapper, System.Threading.CancellationToken cancellationToken) { }
        [Microsoft.AspNetCore.Authorization.Authorize(Roles="administrator")]
        [Microsoft.AspNetCore.Mvc.HttpPut("{id}")]
        public System.Threading.Tasks.Task PutAsync(long id, [Microsoft.AspNetCore.Mvc.FromBody] Fossa.API.Web.ApiModels.BranchModificationModel model, [Microsoft.AspNetCore.Mvc.FromServices] Fossa.API.Core.TimeZone.IDateTimeZoneProvider dateTimeZoneProvider, [Microsoft.AspNetCore.Mvc.FromServices] TIKSN.Mapping.IMapper<Fossa.API.Web.ApiModels.AddressModel, Fossa.API.Core.Entities.Address> addressModelToDomainMapper, System.Threading.CancellationToken cancellationToken) { }
        [Microsoft.AspNetCore.Mvc.HttpGet]
        public System.Threading.Tasks.Task<Fossa.API.Web.ApiModels.QueryResponseModel<Fossa.API.Web.ApiModels.BranchRetrievalModel>> QueryAsync([Microsoft.AspNetCore.Mvc.FromQuery] Fossa.API.Web.ApiModels.BranchQueryRequestModel requestModel, [Microsoft.AspNetCore.Mvc.FromServices] TIKSN.Mapping.IMapper<TIKSN.Data.PageResult<Fossa.API.Core.Entities.BranchEntity>, Fossa.API.Web.ApiModels.PagingResponseModel<Fossa.API.Web.ApiModels.BranchRetrievalModel>> pagingMapper, [Microsoft.AspNetCore.Mvc.FromServices] TIKSN.Mapping.IMapper<Fossa.API.Core.Entities.BranchEntity, Fossa.API.Web.ApiModels.BranchRetrievalModel> itemMapper, System.Threading.CancellationToken cancellationToken) { }
    }
    [Asp.Versioning.ApiVersion(1D, null)]
    [Microsoft.AspNetCore.Authorization.Authorize]
    [Microsoft.AspNetCore.Mvc.ApiController]
    [Microsoft.AspNetCore.Mvc.Route("api/{version:apiVersion}/[controller]")]
    public class CompanyController : Fossa.API.Web.Api.BaseApiController<Fossa.API.Core.Entities.CompanyId>
    {
        public CompanyController(Fossa.API.Core.Tenant.ITenantIdProvider<System.Guid> tenantIdProvider, MediatR.ISender sender, MediatR.IPublisher publisher, TIKSN.Mapping.IMapper<Fossa.API.Core.Entities.CompanyId, long> domainIdentityToDataIdentityMapper, TIKSN.Mapping.IMapper<long, Fossa.API.Core.Entities.CompanyId> dataIdentityToDomainIdentityMapper) { }
        [Microsoft.AspNetCore.Authorization.Authorize(Roles="administrator")]
        [Microsoft.AspNetCore.Mvc.HttpDelete]
        public System.Threading.Tasks.Task DeleteAsync(System.Threading.CancellationToken cancellationToken) { }
        [Microsoft.AspNetCore.Mvc.HttpGet]
        public System.Threading.Tasks.Task<Fossa.API.Web.ApiModels.CompanyRetrievalModel> GetAsync([Microsoft.AspNetCore.Mvc.FromServices] TIKSN.Mapping.IMapper<Fossa.API.Core.Entities.CompanyEntity, Fossa.API.Web.ApiModels.CompanyRetrievalModel> mapper, System.Threading.CancellationToken cancellationToken) { }
        [Microsoft.AspNetCore.Authorization.Authorize(Roles="administrator")]
        [Microsoft.AspNetCore.Mvc.HttpPost]
        public System.Threading.Tasks.Task PostAsync([Microsoft.AspNetCore.Mvc.FromBody] Fossa.API.Web.ApiModels.CompanyModificationModel model, [Microsoft.AspNetCore.Mvc.FromServices] TIKSN.Globalization.IRegionFactory regionFactory, System.Threading.CancellationToken cancellationToken) { }
        [Microsoft.AspNetCore.Authorization.Authorize(Roles="administrator")]
        [Microsoft.AspNetCore.Mvc.HttpPut]
        public System.Threading.Tasks.Task PutAsync([Microsoft.AspNetCore.Mvc.FromBody] Fossa.API.Web.ApiModels.CompanyModificationModel model, [Microsoft.AspNetCore.Mvc.FromServices] TIKSN.Globalization.IRegionFactory regionFactory, System.Threading.CancellationToken cancellationToken) { }
    }
    [Asp.Versioning.ApiVersion(1D, null)]
    [Microsoft.AspNetCore.Authorization.Authorize]
    [Microsoft.AspNetCore.Mvc.ApiController]
    [Microsoft.AspNetCore.Mvc.Route("api/{version:apiVersion}/[controller]")]
    public class EmployeeController : Fossa.API.Web.Api.BaseApiController<Fossa.API.Core.Entities.EmployeeId>
    {
        public EmployeeController(Fossa.API.Core.Tenant.ITenantIdProvider<System.Guid> tenantIdProvider, Fossa.API.Core.User.IUserIdProvider<System.Guid> userIdProvider, MediatR.ISender sender, MediatR.IPublisher publisher, TIKSN.Mapping.IMapper<Fossa.API.Core.Entities.EmployeeId, long> domainIdentityToDataIdentityMapper, TIKSN.Mapping.IMapper<long, Fossa.API.Core.Entities.EmployeeId> dataIdentityToDomainIdentityMapper) { }
        [Microsoft.AspNetCore.Mvc.HttpDelete]
        public System.Threading.Tasks.Task DeleteAsync(System.Threading.CancellationToken cancellationToken) { }
        [Microsoft.AspNetCore.Mvc.HttpGet]
        public System.Threading.Tasks.Task<Fossa.API.Web.ApiModels.EmployeeRetrievalModel> GetAsync([Microsoft.AspNetCore.Mvc.FromServices] TIKSN.Mapping.IMapper<Fossa.API.Core.Entities.EmployeeEntity, Fossa.API.Web.ApiModels.EmployeeRetrievalModel> mapper, System.Threading.CancellationToken cancellationToken) { }
        [Microsoft.AspNetCore.Mvc.HttpPost]
        public System.Threading.Tasks.Task PostAsync([Microsoft.AspNetCore.Mvc.FromBody] Fossa.API.Web.ApiModels.EmployeeModificationModel model, System.Threading.CancellationToken cancellationToken) { }
        [Microsoft.AspNetCore.Mvc.HttpPut]
        public System.Threading.Tasks.Task PutAsync([Microsoft.AspNetCore.Mvc.FromBody] Fossa.API.Web.ApiModels.EmployeeModificationModel model, System.Threading.CancellationToken cancellationToken) { }
    }
    [Asp.Versioning.ApiVersion(1D, null)]
    [Microsoft.AspNetCore.Authorization.Authorize]
    [Microsoft.AspNetCore.Mvc.ApiController]
    [Microsoft.AspNetCore.Mvc.Route("api/{version:apiVersion}/[controller]")]
    public class EmployeesController : Fossa.API.Web.Api.BaseApiController<Fossa.API.Core.Entities.EmployeeId>
    {
        public EmployeesController(Fossa.API.Core.Tenant.ITenantIdProvider<System.Guid> tenantIdProvider, Fossa.API.Core.User.IUserIdProvider<System.Guid> userIdProvider, MediatR.ISender sender, MediatR.IPublisher publisher, TIKSN.Mapping.IMapper<Fossa.API.Core.Entities.EmployeeId, long> domainIdentityToDataIdentityMapper, TIKSN.Mapping.IMapper<long, Fossa.API.Core.Entities.EmployeeId> dataIdentityToDomainIdentityMapper) { }
        [Microsoft.AspNetCore.Mvc.HttpGet("{id}")]
        public System.Threading.Tasks.Task<Fossa.API.Web.ApiModels.EmployeeRetrievalModel> GetAsync([Microsoft.AspNetCore.Mvc.FromRoute] long id, [Microsoft.AspNetCore.Mvc.FromServices] TIKSN.Mapping.IMapper<Fossa.API.Core.Entities.EmployeeEntity, Fossa.API.Web.ApiModels.EmployeeRetrievalModel> mapper, System.Threading.CancellationToken cancellationToken) { }
        [Microsoft.AspNetCore.Authorization.Authorize(Roles="administrator")]
        [Microsoft.AspNetCore.Mvc.HttpPut("{id}")]
        public System.Threading.Tasks.Task PutAsync([Microsoft.AspNetCore.Mvc.FromRoute] long id, [Microsoft.AspNetCore.Mvc.FromBody] Fossa.API.Web.ApiModels.EmployeeManagementModel model, [Microsoft.AspNetCore.Mvc.FromServices] TIKSN.Mapping.IMapper<long, Fossa.API.Core.Entities.BranchId> branchDataIdentityToDomainIdentityMapper, System.Threading.CancellationToken cancellationToken) { }
        [Microsoft.AspNetCore.Mvc.HttpGet]
        public System.Threading.Tasks.Task<Fossa.API.Web.ApiModels.QueryResponseModel<Fossa.API.Web.ApiModels.EmployeeRetrievalModel>> QueryAsync([Microsoft.AspNetCore.Mvc.FromQuery] Fossa.API.Web.ApiModels.EmployeeQueryRequestModel requestModel, [Microsoft.AspNetCore.Mvc.FromServices] TIKSN.Mapping.IMapper<TIKSN.Data.PageResult<Fossa.API.Core.Entities.EmployeeEntity>, Fossa.API.Web.ApiModels.PagingResponseModel<Fossa.API.Web.ApiModels.EmployeeRetrievalModel>> pagingMapper, [Microsoft.AspNetCore.Mvc.FromServices] TIKSN.Mapping.IMapper<Fossa.API.Core.Entities.EmployeeEntity, Fossa.API.Web.ApiModels.EmployeeRetrievalModel> itemMapper, System.Threading.CancellationToken cancellationToken) { }
    }
}
namespace Fossa.API.Web.Api.Identity
{
    [Asp.Versioning.ApiVersion(1D, null)]
    [Microsoft.AspNetCore.Http.Tags(new string[] {
            "Identity Client"})]
    [Microsoft.AspNetCore.Mvc.ApiController]
    [Microsoft.AspNetCore.Mvc.Route("api/{version:apiVersion}/Identity/[controller]")]
    public class ClientController : Fossa.API.Web.Api.BaseApiController
    {
        public ClientController(MediatR.ISender sender, MediatR.IPublisher publisher) { }
        [Microsoft.AspNetCore.Mvc.HttpGet]
        public System.Threading.Tasks.Task<Fossa.API.Infrastructure.Models.IdentityClient> GetAsync([Microsoft.AspNetCore.Mvc.FromQuery] string? origin, System.Threading.CancellationToken cancellationToken) { }
    }
}
namespace Fossa.API.Web.Api.License
{
    [Asp.Versioning.ApiVersion(1D, null)]
    [Microsoft.AspNetCore.Authorization.Authorize]
    [Microsoft.AspNetCore.Http.Tags(new string[] {
            "Company License"})]
    [Microsoft.AspNetCore.Mvc.ApiController]
    [Microsoft.AspNetCore.Mvc.Route("api/{version:apiVersion}/License/[controller]")]
    public class CompanyController : Fossa.API.Web.Api.BaseApiController
    {
        public CompanyController(MediatR.ISender sender, MediatR.IPublisher publisher, TIKSN.Mapping.IMapper<TIKSN.Licensing.License<Fossa.Licensing.CompanyEntitlements>, Fossa.API.Web.ApiModels.LicenseResponseModel<Fossa.API.Web.ApiModels.CompanyEntitlementsModel>> licenseMapper, Fossa.API.Core.Tenant.ITenantIdProvider<System.Guid> tenantIdProvider) { }
        [Microsoft.AspNetCore.Authorization.Authorize(Roles="administrator")]
        [Microsoft.AspNetCore.Mvc.HttpPost]
        public System.Threading.Tasks.Task CreateAsync(Microsoft.AspNetCore.Http.IFormFile licenseFile, System.Threading.CancellationToken cancellationToken) { }
        [Microsoft.AspNetCore.Mvc.HttpGet]
        public System.Threading.Tasks.Task<Fossa.API.Web.ApiModels.LicenseResponseModel<Fossa.API.Web.ApiModels.CompanyEntitlementsModel>> GetAsync(System.Threading.CancellationToken cancellationToken) { }
    }
    [Asp.Versioning.ApiVersion(1D, null)]
    [Microsoft.AspNetCore.Http.Tags(new string[] {
            "System License"})]
    [Microsoft.AspNetCore.Mvc.ApiController]
    [Microsoft.AspNetCore.Mvc.Route("api/{version:apiVersion}/License/[controller]")]
    public class SystemController : Fossa.API.Web.Api.BaseApiController
    {
        public SystemController(MediatR.ISender sender, MediatR.IPublisher publisher, TIKSN.Mapping.IMapper<TIKSN.Licensing.License<Fossa.Licensing.SystemEntitlements>, Fossa.API.Web.ApiModels.LicenseResponseModel<Fossa.API.Web.ApiModels.SystemEntitlementsModel>> licenseMapper) { }
        [Microsoft.AspNetCore.Mvc.HttpGet]
        public System.Threading.Tasks.Task<Fossa.API.Web.ApiModels.LicenseResponseModel<Fossa.API.Web.ApiModels.SystemEntitlementsModel>> GetAsync(System.Threading.CancellationToken cancellationToken) { }
    }
}
namespace Fossa.API.Web.ApiModels
{
    public class AddressModel : System.IEquatable<Fossa.API.Web.ApiModels.AddressModel>
    {
        public AddressModel(string? Line1, string? Line2, string? City, string? Subdivision, string? PostalCode, string? CountryCode) { }
        public string? City { get; init; }
        public string? CountryCode { get; init; }
        public string? Line1 { get; init; }
        public string? Line2 { get; init; }
        public string? PostalCode { get; init; }
        public string? Subdivision { get; init; }
    }
    public class BranchModificationModel : System.IEquatable<Fossa.API.Web.ApiModels.BranchModificationModel>
    {
        public BranchModificationModel(string? Name, string? TimeZoneId, Fossa.API.Web.ApiModels.AddressModel? Address) { }
        public Fossa.API.Web.ApiModels.AddressModel? Address { get; init; }
        public string? Name { get; init; }
        public string? TimeZoneId { get; init; }
    }
    public class BranchQueryRequestModel : System.IEquatable<Fossa.API.Web.ApiModels.BranchQueryRequestModel>
    {
        public BranchQueryRequestModel(System.Collections.Generic.IReadOnlyList<long>? Id, string? Search, int? PageNumber, int? PageSize) { }
        public System.Collections.Generic.IReadOnlyList<long>? Id { get; init; }
        public int? PageNumber { get; init; }
        public int? PageSize { get; init; }
        public string? Search { get; init; }
    }
    public class BranchRetrievalModel : System.IEquatable<Fossa.API.Web.ApiModels.BranchRetrievalModel>
    {
        public BranchRetrievalModel(long Id, long CompanyId, string Name, string TimeZoneId, Fossa.API.Web.ApiModels.AddressModel? Address) { }
        public Fossa.API.Web.ApiModels.AddressModel? Address { get; init; }
        public long CompanyId { get; init; }
        public long Id { get; init; }
        public string Name { get; init; }
        public string TimeZoneId { get; init; }
    }
    public class CompanyEntitlementsModel : System.IEquatable<Fossa.API.Web.ApiModels.CompanyEntitlementsModel>
    {
        public CompanyEntitlementsModel(long CompanyId, int MaximumBranchCount, int MaximumEmployeeCount) { }
        public long CompanyId { get; init; }
        public int MaximumBranchCount { get; init; }
        public int MaximumEmployeeCount { get; init; }
    }
    public class CompanyModificationModel : System.IEquatable<Fossa.API.Web.ApiModels.CompanyModificationModel>
    {
        public CompanyModificationModel(string? Name, string? CountryCode) { }
        public string? CountryCode { get; init; }
        public string? Name { get; init; }
    }
    public class CompanyRetrievalModel : System.IEquatable<Fossa.API.Web.ApiModels.CompanyRetrievalModel>
    {
        public CompanyRetrievalModel(long Id, string Name, string CountryCode) { }
        public string CountryCode { get; init; }
        public long Id { get; init; }
        public string Name { get; init; }
    }
    public class CountryModel : System.IEquatable<Fossa.API.Web.ApiModels.CountryModel>
    {
        public CountryModel(string Name, string Code) { }
        public string Code { get; init; }
        public string Name { get; init; }
    }
    public class EmployeeManagementModel : System.IEquatable<Fossa.API.Web.ApiModels.EmployeeManagementModel>
    {
        public EmployeeManagementModel(long? AssignedBranchId) { }
        public long? AssignedBranchId { get; init; }
    }
    public class EmployeeModificationModel : System.IEquatable<Fossa.API.Web.ApiModels.EmployeeModificationModel>
    {
        public EmployeeModificationModel(string? FirstName, string? LastName, string? FullName) { }
        public string? FirstName { get; init; }
        public string? FullName { get; init; }
        public string? LastName { get; init; }
    }
    public class EmployeePagingRequestModel : System.IEquatable<Fossa.API.Web.ApiModels.EmployeePagingRequestModel>
    {
        public EmployeePagingRequestModel(string? Search, int? PageNumber, int? PageSize) { }
        public int? PageNumber { get; init; }
        public int? PageSize { get; init; }
        public string? Search { get; init; }
    }
    public class EmployeeQueryRequestModel : System.IEquatable<Fossa.API.Web.ApiModels.EmployeeQueryRequestModel>
    {
        public EmployeeQueryRequestModel(System.Collections.Generic.IReadOnlyList<long>? Id, string? Search, int? PageNumber, int? PageSize) { }
        public System.Collections.Generic.IReadOnlyList<long>? Id { get; init; }
        public int? PageNumber { get; init; }
        public int? PageSize { get; init; }
        public string? Search { get; init; }
    }
    public class EmployeeRetrievalModel : System.IEquatable<Fossa.API.Web.ApiModels.EmployeeRetrievalModel>
    {
        public EmployeeRetrievalModel(long Id, long CompanyId, long? AssignedBranchId, string FirstName, string LastName, string FullName) { }
        public long? AssignedBranchId { get; init; }
        public long CompanyId { get; init; }
        public string FirstName { get; init; }
        public string FullName { get; init; }
        public long Id { get; init; }
        public string LastName { get; init; }
    }
    public class LicenseResponseModel<TEntitlementsModel> : System.IEquatable<Fossa.API.Web.ApiModels.LicenseResponseModel<TEntitlementsModel>>
    {
        public LicenseResponseModel(Fossa.API.Web.Mappers.LicenseTermsModel Terms, TEntitlementsModel Entitlements) { }
        public TEntitlementsModel Entitlements { get; init; }
        public Fossa.API.Web.Mappers.LicenseTermsModel Terms { get; init; }
    }
    public class PagingResponseModel<T> : System.IEquatable<Fossa.API.Web.ApiModels.PagingResponseModel<T>>
    {
        public PagingResponseModel(int PageNumber, int PageSize, System.Collections.Generic.IReadOnlyCollection<T> Items, long? TotalItems, long? TotalPages) { }
        public System.Collections.Generic.IReadOnlyCollection<T> Items { get; init; }
        public int PageNumber { get; init; }
        public int PageSize { get; init; }
        public long? TotalItems { get; init; }
        public long? TotalPages { get; init; }
    }
    public class QueryResponseModel<T> : System.IEquatable<Fossa.API.Web.ApiModels.QueryResponseModel<T>>
    {
        public QueryResponseModel(System.Collections.Generic.IEnumerable<T>? List, Fossa.API.Web.ApiModels.PagingResponseModel<T>? Page) { }
        public System.Collections.Generic.IEnumerable<T>? List { get; init; }
        public Fossa.API.Web.ApiModels.PagingResponseModel<T>? Page { get; init; }
    }
    public class SystemEntitlementsModel : System.IEquatable<Fossa.API.Web.ApiModels.SystemEntitlementsModel>
    {
        public SystemEntitlementsModel(string EnvironmentName, string EnvironmentKind, System.Collections.Generic.IReadOnlyList<Fossa.API.Web.ApiModels.CountryModel> Countries, System.Collections.Generic.IReadOnlyList<Fossa.API.Web.ApiModels.TimeZoneModel> TimeZones, int MaximumCompanyCount) { }
        public System.Collections.Generic.IReadOnlyList<Fossa.API.Web.ApiModels.CountryModel> Countries { get; init; }
        public string EnvironmentKind { get; init; }
        public string EnvironmentName { get; init; }
        public int MaximumCompanyCount { get; init; }
        public System.Collections.Generic.IReadOnlyList<Fossa.API.Web.ApiModels.TimeZoneModel> TimeZones { get; init; }
    }
    public class TimeZoneModel : System.IEquatable<Fossa.API.Web.ApiModels.TimeZoneModel>
    {
        public TimeZoneModel(string Id, string Name, string CountryCode, System.TimeSpan CurrentOffset) { }
        public string CountryCode { get; init; }
        public System.TimeSpan CurrentOffset { get; init; }
        public string Id { get; init; }
        public string Name { get; init; }
    }
}
namespace Fossa.API.Web.Claims
{
    public class ClaimNotFoundException : System.Exception
    {
        public ClaimNotFoundException() { }
        public ClaimNotFoundException(string message) { }
        public ClaimNotFoundException(string message, System.Exception inner) { }
    }
    public class ClaimsProvider : Fossa.API.Core.Tenant.ITenantIdProvider<System.Guid>, Fossa.API.Core.Tenant.ITenantIdProvider<int>, Fossa.API.Core.User.IUserIdProvider<System.Guid>, Fossa.API.Core.User.IUserIdProvider<int>
    {
        public ClaimsProvider(Microsoft.AspNetCore.Http.IHttpContextAccessor httpContextAccessor) { }
    }
}
namespace Fossa.API.Web
{
    public class DefaultWebModule : Autofac.Module
    {
        public DefaultWebModule() { }
        protected override void Load(Autofac.ContainerBuilder builder) { }
    }
    public class IdGenSetupLogger
    {
        public IdGenSetupLogger(IdGen.IdGenerator idGenerator, Microsoft.Extensions.Logging.ILogger<Fossa.API.Web.IdGenSetupLogger> logger) { }
        public void LogIdGenSetup() { }
    }
    public static class Roles
    {
        public const string Administrator = "administrator";
    }
}
namespace Fossa.API.Web.DependencyInjection
{
    public static class ServiceCollectionExtensions
    {
        public static Microsoft.Extensions.DependencyInjection.IServiceCollection AddIdGen(this Microsoft.Extensions.DependencyInjection.IServiceCollection services, Microsoft.Extensions.Configuration.IConfiguration configuration, System.DateOnly initialReleaseDate) { }
    }
}
namespace Fossa.API.Web.HealthChecks.DependencyInjection
{
    public static class MongoDbHealthCheckBuilderExtensions
    {
        public static Microsoft.Extensions.DependencyInjection.IHealthChecksBuilder AddMongoDb(this Microsoft.Extensions.DependencyInjection.IHealthChecksBuilder builder, MongoDB.Driver.MongoClientSettings mongoClientSettings, string? name = null, Microsoft.Extensions.Diagnostics.HealthChecks.HealthStatus? failureStatus = default, System.Collections.Generic.IEnumerable<string>? tags = null, System.TimeSpan? timeout = default) { }
        public static Microsoft.Extensions.DependencyInjection.IHealthChecksBuilder AddMongoDb(this Microsoft.Extensions.DependencyInjection.IHealthChecksBuilder builder, System.Func<System.IServiceProvider, MongoDB.Driver.IMongoClient> mongoClientFactory, string? name = null, Microsoft.Extensions.Diagnostics.HealthChecks.HealthStatus? failureStatus = default, System.Collections.Generic.IEnumerable<string>? tags = null, System.TimeSpan? timeout = default) { }
        public static Microsoft.Extensions.DependencyInjection.IHealthChecksBuilder AddMongoDb(this Microsoft.Extensions.DependencyInjection.IHealthChecksBuilder builder, System.Func<System.IServiceProvider, string> mongodbConnectionStringFactory, string? name = null, Microsoft.Extensions.Diagnostics.HealthChecks.HealthStatus? failureStatus = default, System.Collections.Generic.IEnumerable<string>? tags = null, System.TimeSpan? timeout = default) { }
        public static Microsoft.Extensions.DependencyInjection.IHealthChecksBuilder AddMongoDb(this Microsoft.Extensions.DependencyInjection.IHealthChecksBuilder builder, string mongodbConnectionString, string? name = null, Microsoft.Extensions.Diagnostics.HealthChecks.HealthStatus? failureStatus = default, System.Collections.Generic.IEnumerable<string>? tags = null, System.TimeSpan? timeout = default) { }
        public static Microsoft.Extensions.DependencyInjection.IHealthChecksBuilder AddMongoDb(this Microsoft.Extensions.DependencyInjection.IHealthChecksBuilder builder, MongoDB.Driver.MongoClientSettings mongoClientSettings, string mongoDatabaseName, string? name = null, Microsoft.Extensions.Diagnostics.HealthChecks.HealthStatus? failureStatus = default, System.Collections.Generic.IEnumerable<string>? tags = null, System.TimeSpan? timeout = default) { }
        public static Microsoft.Extensions.DependencyInjection.IHealthChecksBuilder AddMongoDb(this Microsoft.Extensions.DependencyInjection.IHealthChecksBuilder builder, System.Func<System.IServiceProvider, MongoDB.Driver.IMongoClient> mongoClientFactory, string mongoDatabaseName, string? name = null, Microsoft.Extensions.Diagnostics.HealthChecks.HealthStatus? failureStatus = default, System.Collections.Generic.IEnumerable<string>? tags = null, System.TimeSpan? timeout = default) { }
        public static Microsoft.Extensions.DependencyInjection.IHealthChecksBuilder AddMongoDb(this Microsoft.Extensions.DependencyInjection.IHealthChecksBuilder builder, System.Func<System.IServiceProvider, string> mongodbConnectionStringFactory, string mongoDatabaseName, string? name = null, Microsoft.Extensions.Diagnostics.HealthChecks.HealthStatus? failureStatus = default, System.Collections.Generic.IEnumerable<string>? tags = null, System.TimeSpan? timeout = default) { }
        public static Microsoft.Extensions.DependencyInjection.IHealthChecksBuilder AddMongoDb(this Microsoft.Extensions.DependencyInjection.IHealthChecksBuilder builder, string mongodbConnectionString, string mongoDatabaseName, string? name = null, Microsoft.Extensions.Diagnostics.HealthChecks.HealthStatus? failureStatus = default, System.Collections.Generic.IEnumerable<string>? tags = null, System.TimeSpan? timeout = default) { }
    }
    public static class SystemLicenseHealthCheckBuilderExtensions
    {
        public static Microsoft.Extensions.DependencyInjection.IHealthChecksBuilder AddSystemLicense(this Microsoft.Extensions.DependencyInjection.IHealthChecksBuilder builder, string? name = null, Microsoft.Extensions.Diagnostics.HealthChecks.HealthStatus? failureStatus = default, System.Collections.Generic.IEnumerable<string>? tags = null, System.TimeSpan? timeout = default) { }
    }
}
namespace Fossa.API.Web.HealthChecks
{
    public class MongoDbHealthCheck : Microsoft.Extensions.Diagnostics.HealthChecks.IHealthCheck
    {
        public MongoDbHealthCheck(MongoDB.Driver.IMongoClient client, string? databaseName = null) { }
        public MongoDbHealthCheck(MongoDB.Driver.MongoClientSettings clientSettings, string? databaseName = null) { }
        public MongoDbHealthCheck(string connectionString, string? databaseName = null) { }
        public System.Threading.Tasks.Task<Microsoft.Extensions.Diagnostics.HealthChecks.HealthCheckResult> CheckHealthAsync(Microsoft.Extensions.Diagnostics.HealthChecks.HealthCheckContext context, System.Threading.CancellationToken cancellationToken = default) { }
    }
    public class SystemLicenseHealthCheck : Microsoft.Extensions.Diagnostics.HealthChecks.IHealthCheck
    {
        public SystemLicenseHealthCheck(Fossa.API.Core.Services.ISystemLicenseRetriever systemLicenseRetriever) { }
        public System.Threading.Tasks.Task<Microsoft.Extensions.Diagnostics.HealthChecks.HealthCheckResult> CheckHealthAsync(Microsoft.Extensions.Diagnostics.HealthChecks.HealthCheckContext context, System.Threading.CancellationToken cancellationToken = default) { }
    }
}
namespace Fossa.API.Web.Mappers
{
    public class AddressModelMapper : TIKSN.Mapping.IMapper<Fossa.API.Core.Entities.Address, Fossa.API.Web.ApiModels.AddressModel>, TIKSN.Mapping.IMapper<Fossa.API.Web.ApiModels.AddressModel, Fossa.API.Core.Entities.Address>
    {
        public AddressModelMapper(Fossa.API.Core.Services.ICountryProvider countryProvider) { }
        public Fossa.API.Web.ApiModels.AddressModel Map(Fossa.API.Core.Entities.Address source) { }
        public Fossa.API.Core.Entities.Address Map(Fossa.API.Web.ApiModels.AddressModel source) { }
    }
    public class BranchRetrievalModelMapper : TIKSN.Mapping.IMapper<Fossa.API.Core.Entities.BranchEntity, Fossa.API.Web.ApiModels.BranchRetrievalModel>
    {
        public BranchRetrievalModelMapper(TIKSN.Mapping.IMapper<Fossa.API.Core.Entities.BranchId, long> domainIdentityToDataIdentityMapper, TIKSN.Mapping.IMapper<Fossa.API.Core.Entities.CompanyId, long> companyDomainIdentityToDataIdentityMapper, TIKSN.Mapping.IMapper<Fossa.API.Core.Entities.Address, Fossa.API.Web.ApiModels.AddressModel> domainToModelMapper) { }
        public Fossa.API.Web.ApiModels.BranchRetrievalModel Map(Fossa.API.Core.Entities.BranchEntity source) { }
    }
    public class CompanyEntitlementsModelMapper : TIKSN.Mapping.IMapper<Fossa.Licensing.CompanyEntitlements, Fossa.API.Web.ApiModels.CompanyEntitlementsModel>
    {
        public CompanyEntitlementsModelMapper() { }
        public Fossa.API.Web.ApiModels.CompanyEntitlementsModel Map(Fossa.Licensing.CompanyEntitlements source) { }
    }
    public class CompanyRetrievalModelMapper : TIKSN.Mapping.IMapper<Fossa.API.Core.Entities.CompanyEntity, Fossa.API.Web.ApiModels.CompanyRetrievalModel>
    {
        public CompanyRetrievalModelMapper(TIKSN.Mapping.IMapper<Fossa.API.Core.Entities.CompanyId, long> domainIdentityToDataIdentityMapper) { }
        public Fossa.API.Web.ApiModels.CompanyRetrievalModel Map(Fossa.API.Core.Entities.CompanyEntity source) { }
    }
    public class CountryModelMapper : TIKSN.Mapping.IMapper<System.Globalization.RegionInfo, Fossa.API.Web.ApiModels.CountryModel>
    {
        public CountryModelMapper() { }
        public Fossa.API.Web.ApiModels.CountryModel Map(System.Globalization.RegionInfo source) { }
    }
    public class EmployeeRetrievalModelMapper : TIKSN.Mapping.IMapper<Fossa.API.Core.Entities.EmployeeEntity, Fossa.API.Web.ApiModels.EmployeeRetrievalModel>
    {
        public EmployeeRetrievalModelMapper(TIKSN.Mapping.IMapper<Fossa.API.Core.Entities.EmployeeId, long> domainIdentityToDataIdentityMapper, TIKSN.Mapping.IMapper<Fossa.API.Core.Entities.CompanyId, long> companyDomainIdentityToDataIdentityMapper, TIKSN.Mapping.IMapper<Fossa.API.Core.Entities.BranchId, long> branchDomainIdentityToDataIdentityMapper) { }
        public Fossa.API.Web.ApiModels.EmployeeRetrievalModel Map(Fossa.API.Core.Entities.EmployeeEntity source) { }
    }
    public class LicenseResponseModelMapper<TEntitlements, TEntitlementsModel> : TIKSN.Mapping.IMapper<TIKSN.Licensing.License<TEntitlements>, Fossa.API.Web.ApiModels.LicenseResponseModel<TEntitlementsModel>>
    {
        public LicenseResponseModelMapper(TIKSN.Mapping.IMapper<TEntitlements, TEntitlementsModel> entitlementsMapper, TIKSN.Mapping.IMapper<TIKSN.Licensing.LicenseTerms, Fossa.API.Web.Mappers.LicenseTermsModel> licenseTermMapper) { }
        public Fossa.API.Web.ApiModels.LicenseResponseModel<TEntitlementsModel> Map(TIKSN.Licensing.License<TEntitlements> source) { }
    }
    public class LicenseTermsModel : System.IEquatable<Fossa.API.Web.Mappers.LicenseTermsModel>
    {
        public LicenseTermsModel(Fossa.API.Web.Mappers.PartyModel Licensor, Fossa.API.Web.Mappers.PartyModel Licensee, System.DateTimeOffset NotBefore, System.DateTimeOffset NotAfter) { }
        public Fossa.API.Web.Mappers.PartyModel Licensee { get; init; }
        public Fossa.API.Web.Mappers.PartyModel Licensor { get; init; }
        public System.DateTimeOffset NotAfter { get; init; }
        public System.DateTimeOffset NotBefore { get; init; }
    }
    public class LicenseTermsModelMapper : TIKSN.Mapping.IMapper<TIKSN.Licensing.LicenseTerms, Fossa.API.Web.Mappers.LicenseTermsModel>
    {
        public LicenseTermsModelMapper(TIKSN.Mapping.IMapper<TIKSN.Licensing.Party, Fossa.API.Web.Mappers.PartyModel> partyModelMapper) { }
        public Fossa.API.Web.Mappers.LicenseTermsModel Map(TIKSN.Licensing.LicenseTerms source) { }
    }
    public class PagingResponseModelMapper<TEntity, TModel> : TIKSN.Mapping.IMapper<TIKSN.Data.PageResult<TEntity>, Fossa.API.Web.ApiModels.PagingResponseModel<TModel>>
    {
        public PagingResponseModelMapper(TIKSN.Mapping.IMapper<TEntity, TModel> itemMapper) { }
        public Fossa.API.Web.ApiModels.PagingResponseModel<TModel> Map(TIKSN.Data.PageResult<TEntity> source) { }
    }
    public class PartyModel : System.IEquatable<Fossa.API.Web.Mappers.PartyModel>
    {
        public PartyModel(string LongName, string ShortName) { }
        public string LongName { get; init; }
        public string ShortName { get; init; }
    }
    public class PartyModelMapper : TIKSN.Mapping.IMapper<TIKSN.Licensing.Party, Fossa.API.Web.Mappers.PartyModel>
    {
        public PartyModelMapper() { }
        public Fossa.API.Web.Mappers.PartyModel Map(TIKSN.Licensing.Party source) { }
    }
    public class SystemEntitlementsModelMapper : TIKSN.Mapping.IMapper<Fossa.Licensing.SystemEntitlements, Fossa.API.Web.ApiModels.SystemEntitlementsModel>
    {
        public SystemEntitlementsModelMapper(Microsoft.Extensions.Hosting.IHostEnvironment hostEnvironment, Fossa.API.Core.Services.IDateTimeZoneLookup dateTimeZoneLookup, TIKSN.Mapping.IMapper<System.Globalization.RegionInfo, Fossa.API.Web.ApiModels.CountryModel> countryModelMapper, TIKSN.Mapping.IMapper<NodaTime.DateTimeZone, Fossa.API.Web.ApiModels.TimeZoneModel> timeZoneModelMapper) { }
        public Fossa.API.Web.ApiModels.SystemEntitlementsModel Map(Fossa.Licensing.SystemEntitlements source) { }
    }
    public class TimeZoneModelMapper : TIKSN.Mapping.IMapper<NodaTime.DateTimeZone, Fossa.API.Web.ApiModels.TimeZoneModel>
    {
        public TimeZoneModelMapper(Fossa.API.Core.Services.IDateTimeZoneLookup dateTimeZoneLookup, NodaTime.IClock clock) { }
        public Fossa.API.Web.ApiModels.TimeZoneModel Map(NodaTime.DateTimeZone source) { }
    }
}