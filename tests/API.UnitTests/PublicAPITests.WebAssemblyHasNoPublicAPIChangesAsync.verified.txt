namespace Fossa.API.Web.Api
{
    [Microsoft.AspNetCore.Mvc.ApiController]
    [Microsoft.AspNetCore.Mvc.Route("api/{version:apiVersion}/[controller]")]
    public abstract class BaseApiController : Microsoft.AspNetCore.Mvc.ControllerBase
    {
        protected readonly MediatR.IPublisher _publisher;
        protected readonly MediatR.ISender _sender;
        protected BaseApiController(MediatR.ISender sender, MediatR.IPublisher publisher) { }
    }
    [Asp.Versioning.ApiVersion(1D, null)]
    [Microsoft.AspNetCore.Authorization.Authorize]
    [Microsoft.AspNetCore.Mvc.ApiController]
    [Microsoft.AspNetCore.Mvc.Route("api/{version:apiVersion}/[controller]")]
    public class BranchesController : Fossa.API.Web.Api.BaseApiController
    {
        public BranchesController(MediatR.ISender sender, MediatR.IPublisher publisher) { }
        [Microsoft.AspNetCore.Authorization.Authorize(Roles="administrator")]
        [Microsoft.AspNetCore.Mvc.HttpDelete("{id}")]
        public System.Threading.Tasks.Task DeleteAsync(long id, System.Threading.CancellationToken cancellationToken) { }
        [Microsoft.AspNetCore.Mvc.HttpGet("{id}")]
        public System.Threading.Tasks.Task<Fossa.API.Web.ApiModels.BranchRetrievalModel> GetAsync([Microsoft.AspNetCore.Mvc.FromRoute] long id, System.Threading.CancellationToken cancellationToken) { }
        [Microsoft.AspNetCore.Authorization.Authorize(Roles="administrator")]
        [Microsoft.AspNetCore.Mvc.HttpPost]
        public System.Threading.Tasks.Task PostAsync([Microsoft.AspNetCore.Mvc.FromBody] Fossa.API.Web.ApiModels.BranchModificationModel model, System.Threading.CancellationToken cancellationToken) { }
        [Microsoft.AspNetCore.Authorization.Authorize(Roles="administrator")]
        [Microsoft.AspNetCore.Mvc.HttpPut("{id}")]
        public System.Threading.Tasks.Task PutAsync(long id, [Microsoft.AspNetCore.Mvc.FromBody] Fossa.API.Web.ApiModels.BranchModificationModel model, System.Threading.CancellationToken cancellationToken) { }
        [Microsoft.AspNetCore.Mvc.HttpGet]
        public System.Threading.Tasks.Task<Fossa.API.Web.ApiModels.PagingResponseModel<Fossa.API.Web.ApiModels.BranchRetrievalModel>> QueryAsync([Microsoft.AspNetCore.Mvc.FromQuery] Fossa.API.Web.ApiModels.BranchQueryRequestModel requestModel, System.Threading.CancellationToken cancellationToken) { }
    }
    [Asp.Versioning.ApiVersion(1D, null)]
    [Microsoft.AspNetCore.Authorization.Authorize]
    [Microsoft.AspNetCore.Mvc.ApiController]
    [Microsoft.AspNetCore.Mvc.Route("api/{version:apiVersion}/[controller]")]
    public class CompanyController : Fossa.API.Web.Api.BaseApiController
    {
        public CompanyController(MediatR.ISender sender, MediatR.IPublisher publisher) { }
        [Microsoft.AspNetCore.Authorization.Authorize(Roles="administrator")]
        [Microsoft.AspNetCore.Mvc.HttpDelete]
        public System.Threading.Tasks.Task DeleteAsync(System.Threading.CancellationToken cancellationToken) { }
        [Microsoft.AspNetCore.Mvc.HttpGet]
        public System.Threading.Tasks.Task<Fossa.API.Web.ApiModels.CompanyRetrievalModel> GetAsync(System.Threading.CancellationToken cancellationToken) { }
        [Microsoft.AspNetCore.Authorization.Authorize(Roles="administrator")]
        [Microsoft.AspNetCore.Mvc.HttpPost]
        public System.Threading.Tasks.Task PostAsync([Microsoft.AspNetCore.Mvc.FromBody] Fossa.API.Web.ApiModels.CompanyModificationModel model, System.Threading.CancellationToken cancellationToken) { }
        [Microsoft.AspNetCore.Authorization.Authorize(Roles="administrator")]
        [Microsoft.AspNetCore.Mvc.HttpPut]
        public System.Threading.Tasks.Task PutAsync([Microsoft.AspNetCore.Mvc.FromBody] Fossa.API.Web.ApiModels.CompanyModificationModel model, System.Threading.CancellationToken cancellationToken) { }
    }
    [Asp.Versioning.ApiVersion(1D, null)]
    [Microsoft.AspNetCore.Authorization.Authorize]
    [Microsoft.AspNetCore.Mvc.ApiController]
    [Microsoft.AspNetCore.Mvc.Route("api/{version:apiVersion}/[controller]")]
    public class CompanySettingsController : Fossa.API.Web.Api.BaseApiController
    {
        public CompanySettingsController(MediatR.ISender sender, MediatR.IPublisher publisher) { }
        [Microsoft.AspNetCore.Authorization.Authorize(Roles="administrator")]
        [Microsoft.AspNetCore.Mvc.HttpDelete]
        public System.Threading.Tasks.Task DeleteAsync(System.Threading.CancellationToken cancellationToken) { }
        [Microsoft.AspNetCore.Mvc.HttpGet]
        public System.Threading.Tasks.Task<Fossa.API.Web.ApiModels.CompanySettingsRetrievalModel> GetAsync(System.Threading.CancellationToken cancellationToken) { }
        [Microsoft.AspNetCore.Authorization.Authorize(Roles="administrator")]
        [Microsoft.AspNetCore.Mvc.HttpPost]
        public System.Threading.Tasks.Task PostAsync([Microsoft.AspNetCore.Mvc.FromBody] Fossa.API.Web.ApiModels.CompanySettingsModificationModel model, System.Threading.CancellationToken cancellationToken) { }
        [Microsoft.AspNetCore.Authorization.Authorize(Roles="administrator")]
        [Microsoft.AspNetCore.Mvc.HttpPut]
        public System.Threading.Tasks.Task PutAsync([Microsoft.AspNetCore.Mvc.FromBody] Fossa.API.Web.ApiModels.CompanySettingsModificationModel model, System.Threading.CancellationToken cancellationToken) { }
    }
    [Asp.Versioning.ApiVersion(1D, null)]
    [Microsoft.AspNetCore.Authorization.Authorize]
    [Microsoft.AspNetCore.Mvc.ApiController]
    [Microsoft.AspNetCore.Mvc.Route("api/{version:apiVersion}/[controller]")]
    public class DepartmentsController : Fossa.API.Web.Api.BaseApiController
    {
        public DepartmentsController(MediatR.ISender sender, MediatR.IPublisher publisher) { }
        [Microsoft.AspNetCore.Authorization.Authorize(Roles="administrator")]
        [Microsoft.AspNetCore.Mvc.HttpDelete("{id}")]
        public System.Threading.Tasks.Task DeleteAsync(long id, System.Threading.CancellationToken cancellationToken) { }
        [Microsoft.AspNetCore.Mvc.HttpGet("{id}")]
        public System.Threading.Tasks.Task<Fossa.API.Web.ApiModels.DepartmentRetrievalModel> GetAsync([Microsoft.AspNetCore.Mvc.FromRoute] long id, System.Threading.CancellationToken cancellationToken) { }
        [Microsoft.AspNetCore.Authorization.Authorize(Roles="administrator")]
        [Microsoft.AspNetCore.Mvc.HttpPost]
        public System.Threading.Tasks.Task PostAsync([Microsoft.AspNetCore.Mvc.FromBody] Fossa.API.Web.ApiModels.DepartmentModificationModel model, System.Threading.CancellationToken cancellationToken) { }
        [Microsoft.AspNetCore.Authorization.Authorize(Roles="administrator")]
        [Microsoft.AspNetCore.Mvc.HttpPut("{id}")]
        public System.Threading.Tasks.Task PutAsync(long id, [Microsoft.AspNetCore.Mvc.FromBody] Fossa.API.Web.ApiModels.DepartmentModificationModel model, System.Threading.CancellationToken cancellationToken) { }
        [Microsoft.AspNetCore.Mvc.HttpGet]
        public System.Threading.Tasks.Task<Fossa.API.Web.ApiModels.PagingResponseModel<Fossa.API.Web.ApiModels.DepartmentRetrievalModel>> QueryAsync([Microsoft.AspNetCore.Mvc.FromQuery] Fossa.API.Web.ApiModels.DepartmentQueryRequestModel requestModel, System.Threading.CancellationToken cancellationToken) { }
    }
    [Asp.Versioning.ApiVersion(1D, null)]
    [Microsoft.AspNetCore.Authorization.Authorize]
    [Microsoft.AspNetCore.Mvc.ApiController]
    [Microsoft.AspNetCore.Mvc.Route("api/{version:apiVersion}/[controller]")]
    public class EmployeeController : Fossa.API.Web.Api.BaseApiController
    {
        public EmployeeController(MediatR.ISender sender, MediatR.IPublisher publisher) { }
        [Microsoft.AspNetCore.Mvc.HttpDelete]
        public System.Threading.Tasks.Task DeleteAsync(System.Threading.CancellationToken cancellationToken) { }
        [Microsoft.AspNetCore.Mvc.HttpGet]
        public System.Threading.Tasks.Task<Fossa.API.Web.ApiModels.EmployeeRetrievalModel> GetAsync(System.Threading.CancellationToken cancellationToken) { }
        [Microsoft.AspNetCore.Mvc.HttpPost]
        public System.Threading.Tasks.Task PostAsync([Microsoft.AspNetCore.Mvc.FromBody] Fossa.API.Web.ApiModels.EmployeeModificationModel model, System.Threading.CancellationToken cancellationToken) { }
        [Microsoft.AspNetCore.Mvc.HttpPut]
        public System.Threading.Tasks.Task PutAsync([Microsoft.AspNetCore.Mvc.FromBody] Fossa.API.Web.ApiModels.EmployeeModificationModel model, System.Threading.CancellationToken cancellationToken) { }
    }
    [Asp.Versioning.ApiVersion(1D, null)]
    [Microsoft.AspNetCore.Authorization.Authorize]
    [Microsoft.AspNetCore.Mvc.ApiController]
    [Microsoft.AspNetCore.Mvc.Route("api/{version:apiVersion}/[controller]")]
    public class EmployeesController : Fossa.API.Web.Api.BaseApiController
    {
        public EmployeesController(MediatR.ISender sender, MediatR.IPublisher publisher) { }
        [Microsoft.AspNetCore.Mvc.HttpGet("{id}")]
        public System.Threading.Tasks.Task<Fossa.API.Web.ApiModels.EmployeeRetrievalModel> GetAsync([Microsoft.AspNetCore.Mvc.FromRoute] long id, System.Threading.CancellationToken cancellationToken) { }
        [Microsoft.AspNetCore.Authorization.Authorize(Roles="administrator")]
        [Microsoft.AspNetCore.Mvc.HttpPut("{id}")]
        public System.Threading.Tasks.Task PutAsync([Microsoft.AspNetCore.Mvc.FromRoute] long id, [Microsoft.AspNetCore.Mvc.FromBody] Fossa.API.Web.ApiModels.EmployeeManagementModel model, System.Threading.CancellationToken cancellationToken) { }
        [Microsoft.AspNetCore.Mvc.HttpGet]
        public System.Threading.Tasks.Task<Fossa.API.Web.ApiModels.PagingResponseModel<Fossa.API.Web.ApiModels.EmployeeRetrievalModel>> QueryAsync([Microsoft.AspNetCore.Mvc.FromQuery] Fossa.API.Web.ApiModels.EmployeeQueryRequestModel requestModel, System.Threading.CancellationToken cancellationToken) { }
    }
}
namespace Fossa.API.Web.Api.Identity
{
    [Asp.Versioning.ApiVersion(1D, null)]
    [Microsoft.AspNetCore.Http.Tags(new string[] {
            "Identity Client"})]
    [Microsoft.AspNetCore.Mvc.ApiController]
    [Microsoft.AspNetCore.Mvc.Route("api/{version:apiVersion}/Identity/[controller]")]
    public class ClientController : Fossa.API.Web.Api.BaseApiController
    {
        public ClientController(MediatR.ISender sender, MediatR.IPublisher publisher) { }
        [Microsoft.AspNetCore.Mvc.HttpGet]
        public System.Threading.Tasks.Task<Fossa.API.Infrastructure.Models.IdentityClient> GetAsync([Microsoft.AspNetCore.Mvc.FromQuery] string? origin, System.Threading.CancellationToken cancellationToken) { }
    }
}
namespace Fossa.API.Web.Api.License
{
    [Asp.Versioning.ApiVersion(1D, null)]
    [Microsoft.AspNetCore.Authorization.Authorize]
    [Microsoft.AspNetCore.Http.Tags(new string[] {
            "Company License"})]
    [Microsoft.AspNetCore.Mvc.ApiController]
    [Microsoft.AspNetCore.Mvc.Route("api/{version:apiVersion}/License/[controller]")]
    public class CompanyController : Fossa.API.Web.Api.BaseApiController
    {
        public CompanyController(MediatR.ISender sender, MediatR.IPublisher publisher, TIKSN.Mapping.IMapper<TIKSN.Licensing.License<Fossa.Licensing.CompanyEntitlements>, Fossa.API.Web.ApiModels.LicenseResponseModel<Fossa.API.Web.ApiModels.CompanyEntitlementsModel>> licenseMapper, Fossa.API.Core.Tenant.ITenantIdProvider<System.Guid> tenantIdProvider) { }
        [Microsoft.AspNetCore.Authorization.Authorize(Roles="administrator")]
        [Microsoft.AspNetCore.Mvc.HttpPost]
        public System.Threading.Tasks.Task CreateAsync(Microsoft.AspNetCore.Http.IFormFile licenseFile, System.Threading.CancellationToken cancellationToken) { }
        [Microsoft.AspNetCore.Mvc.HttpGet]
        public System.Threading.Tasks.Task<Fossa.API.Web.ApiModels.LicenseResponseModel<Fossa.API.Web.ApiModels.CompanyEntitlementsModel>> GetAsync(System.Threading.CancellationToken cancellationToken) { }
    }
    [Asp.Versioning.ApiVersion(1D, null)]
    [Microsoft.AspNetCore.Http.Tags(new string[] {
            "System License"})]
    [Microsoft.AspNetCore.Mvc.ApiController]
    [Microsoft.AspNetCore.Mvc.Route("api/{version:apiVersion}/License/[controller]")]
    public class SystemController : Fossa.API.Web.Api.BaseApiController
    {
        public SystemController(MediatR.ISender sender, MediatR.IPublisher publisher, TIKSN.Mapping.IMapper<TIKSN.Licensing.License<Fossa.Licensing.SystemEntitlements>, Fossa.API.Web.ApiModels.LicenseResponseModel<Fossa.API.Web.ApiModels.SystemEntitlementsModel>> licenseMapper) { }
        [Microsoft.AspNetCore.Mvc.HttpGet]
        public System.Threading.Tasks.Task<Fossa.API.Web.ApiModels.LicenseResponseModel<Fossa.API.Web.ApiModels.SystemEntitlementsModel>> GetAsync(System.Threading.CancellationToken cancellationToken) { }
    }
}
namespace Fossa.API.Web.ApiModels
{
    public class AddressModel : System.IEquatable<Fossa.API.Web.ApiModels.AddressModel>
    {
        public AddressModel(string? Line1, string? Line2, string? City, string? Subdivision, string? PostalCode, string? CountryCode) { }
        public string? City { get; init; }
        public string? CountryCode { get; init; }
        public string? Line1 { get; init; }
        public string? Line2 { get; init; }
        public string? PostalCode { get; init; }
        public string? Subdivision { get; init; }
    }
    public class BranchModificationModel : System.IEquatable<Fossa.API.Web.ApiModels.BranchModificationModel>
    {
        public BranchModificationModel(string? Name, string? TimeZoneId, Fossa.API.Web.ApiModels.AddressModel? Address) { }
        public Fossa.API.Web.ApiModels.AddressModel? Address { get; init; }
        public string? Name { get; init; }
        public string? TimeZoneId { get; init; }
    }
    public class BranchQueryRequestModel : System.IEquatable<Fossa.API.Web.ApiModels.BranchQueryRequestModel>
    {
        public BranchQueryRequestModel(System.Collections.Generic.IReadOnlyList<long>? Id, string? Search, int? PageNumber, int? PageSize) { }
        public System.Collections.Generic.IReadOnlyList<long>? Id { get; init; }
        public int? PageNumber { get; init; }
        public int? PageSize { get; init; }
        public string? Search { get; init; }
    }
    public class BranchRetrievalModel : System.IEquatable<Fossa.API.Web.ApiModels.BranchRetrievalModel>
    {
        public BranchRetrievalModel(long Id, long CompanyId, string Name, string TimeZoneId, Fossa.API.Web.ApiModels.AddressModel? Address) { }
        public Fossa.API.Web.ApiModels.AddressModel? Address { get; init; }
        public long CompanyId { get; init; }
        public long Id { get; init; }
        public string Name { get; init; }
        public string TimeZoneId { get; init; }
    }
    public class CompanyEntitlementsModel : System.IEquatable<Fossa.API.Web.ApiModels.CompanyEntitlementsModel>
    {
        public CompanyEntitlementsModel(long CompanyId, int MaximumBranchCount, int MaximumEmployeeCount, int MaximumDepartmentCount) { }
        public long CompanyId { get; init; }
        public int MaximumBranchCount { get; init; }
        public int MaximumDepartmentCount { get; init; }
        public int MaximumEmployeeCount { get; init; }
    }
    public class CompanyModificationModel : System.IEquatable<Fossa.API.Web.ApiModels.CompanyModificationModel>
    {
        public CompanyModificationModel(string? Name, string? CountryCode) { }
        public string? CountryCode { get; init; }
        public string? Name { get; init; }
    }
    public class CompanyRetrievalModel : System.IEquatable<Fossa.API.Web.ApiModels.CompanyRetrievalModel>
    {
        public CompanyRetrievalModel(long Id, string Name, string CountryCode) { }
        public string CountryCode { get; init; }
        public long Id { get; init; }
        public string Name { get; init; }
    }
    public class CompanySettingsModificationModel : System.IEquatable<Fossa.API.Web.ApiModels.CompanySettingsModificationModel>
    {
        public CompanySettingsModificationModel(string? ColorSchemeId) { }
        public string? ColorSchemeId { get; init; }
    }
    public class CompanySettingsRetrievalModel : System.IEquatable<Fossa.API.Web.ApiModels.CompanySettingsRetrievalModel>
    {
        public CompanySettingsRetrievalModel(long Id, long CompanyId, string ColorSchemeId) { }
        public string ColorSchemeId { get; init; }
        public long CompanyId { get; init; }
        public long Id { get; init; }
    }
    public class CountryModel : System.IEquatable<Fossa.API.Web.ApiModels.CountryModel>
    {
        public CountryModel(string Name, string Code) { }
        public string Code { get; init; }
        public string Name { get; init; }
    }
    public class DepartmentModificationModel : System.IEquatable<Fossa.API.Web.ApiModels.DepartmentModificationModel>
    {
        public DepartmentModificationModel(string? Name, long? ParentDepartmentId, long? ManagerId) { }
        public long? ManagerId { get; init; }
        public string? Name { get; init; }
        public long? ParentDepartmentId { get; init; }
    }
    public class DepartmentQueryRequestModel : System.IEquatable<Fossa.API.Web.ApiModels.DepartmentQueryRequestModel>
    {
        public DepartmentQueryRequestModel(System.Collections.Generic.IReadOnlyList<long>? Id, string? Search, int? PageNumber, int? PageSize) { }
        public System.Collections.Generic.IReadOnlyList<long>? Id { get; init; }
        public int? PageNumber { get; init; }
        public int? PageSize { get; init; }
        public string? Search { get; init; }
    }
    public class DepartmentRetrievalModel : System.IEquatable<Fossa.API.Web.ApiModels.DepartmentRetrievalModel>
    {
        public DepartmentRetrievalModel(long Id, string Name, long? ParentDepartmentId, long ManagerId) { }
        public long Id { get; init; }
        public long ManagerId { get; init; }
        public string Name { get; init; }
        public long? ParentDepartmentId { get; init; }
    }
    public class EmployeeManagementModel : System.IEquatable<Fossa.API.Web.ApiModels.EmployeeManagementModel>
    {
        public EmployeeManagementModel(long? AssignedBranchId, long? AssignedDepartmentId, long? ReportsToId, string? JobTitle) { }
        public long? AssignedBranchId { get; init; }
        public long? AssignedDepartmentId { get; init; }
        public string? JobTitle { get; init; }
        public long? ReportsToId { get; init; }
    }
    public class EmployeeModificationModel : System.IEquatable<Fossa.API.Web.ApiModels.EmployeeModificationModel>
    {
        public EmployeeModificationModel(string? FirstName, string? LastName, string? FullName) { }
        public string? FirstName { get; init; }
        public string? FullName { get; init; }
        public string? LastName { get; init; }
    }
    public class EmployeePagingRequestModel : System.IEquatable<Fossa.API.Web.ApiModels.EmployeePagingRequestModel>
    {
        public EmployeePagingRequestModel(string? Search, int? PageNumber, int? PageSize) { }
        public int? PageNumber { get; init; }
        public int? PageSize { get; init; }
        public string? Search { get; init; }
    }
    public class EmployeeQueryRequestModel : System.IEquatable<Fossa.API.Web.ApiModels.EmployeeQueryRequestModel>
    {
        public EmployeeQueryRequestModel(System.Collections.Generic.IReadOnlyList<long>? Id, string? Search, int? PageNumber, int? PageSize, long? ReportsToId, bool? TopLevelOnly) { }
        public System.Collections.Generic.IReadOnlyList<long>? Id { get; init; }
        public int? PageNumber { get; init; }
        public int? PageSize { get; init; }
        public long? ReportsToId { get; init; }
        public string? Search { get; init; }
        public bool? TopLevelOnly { get; init; }
    }
    public class EmployeeRetrievalModel : System.IEquatable<Fossa.API.Web.ApiModels.EmployeeRetrievalModel>
    {
        public EmployeeRetrievalModel(long Id, long CompanyId, long? AssignedBranchId, long? AssignedDepartmentId, long? ReportsToId, string JobTitle, string FirstName, string LastName, string FullName) { }
        public long? AssignedBranchId { get; init; }
        public long? AssignedDepartmentId { get; init; }
        public long CompanyId { get; init; }
        public string FirstName { get; init; }
        public string FullName { get; init; }
        public long Id { get; init; }
        public string JobTitle { get; init; }
        public string LastName { get; init; }
        public long? ReportsToId { get; init; }
    }
    public class LicenseResponseModel<TEntitlementsModel> : System.IEquatable<Fossa.API.Web.ApiModels.LicenseResponseModel<TEntitlementsModel>>
    {
        public LicenseResponseModel(Fossa.API.Web.Mappers.LicenseTermsModel Terms, TEntitlementsModel Entitlements) { }
        public TEntitlementsModel Entitlements { get; init; }
        public Fossa.API.Web.Mappers.LicenseTermsModel Terms { get; init; }
    }
    public class PagingResponseModel<T> : System.IEquatable<Fossa.API.Web.ApiModels.PagingResponseModel<T>>
    {
        public PagingResponseModel(int? PageNumber, int? PageSize, System.Collections.Generic.IReadOnlyCollection<T> Items, long? TotalItems, long? TotalPages) { }
        public System.Collections.Generic.IReadOnlyCollection<T> Items { get; init; }
        public int? PageNumber { get; init; }
        public int? PageSize { get; init; }
        public long? TotalItems { get; init; }
        public long? TotalPages { get; init; }
    }
    public class SystemEntitlementsModel : System.IEquatable<Fossa.API.Web.ApiModels.SystemEntitlementsModel>
    {
        public SystemEntitlementsModel(string EnvironmentName, string EnvironmentKind, System.Collections.Generic.IReadOnlyList<Fossa.API.Web.ApiModels.CountryModel> Countries, System.Collections.Generic.IReadOnlyList<Fossa.API.Web.ApiModels.TimeZoneModel> TimeZones, int MaximumCompanyCount) { }
        public System.Collections.Generic.IReadOnlyList<Fossa.API.Web.ApiModels.CountryModel> Countries { get; init; }
        public string EnvironmentKind { get; init; }
        public string EnvironmentName { get; init; }
        public int MaximumCompanyCount { get; init; }
        public System.Collections.Generic.IReadOnlyList<Fossa.API.Web.ApiModels.TimeZoneModel> TimeZones { get; init; }
    }
    public class TimeZoneModel : System.IEquatable<Fossa.API.Web.ApiModels.TimeZoneModel>
    {
        public TimeZoneModel(string Id, string Name, string CountryCode, System.TimeSpan CurrentOffset) { }
        public string CountryCode { get; init; }
        public System.TimeSpan CurrentOffset { get; init; }
        public string Id { get; init; }
        public string Name { get; init; }
    }
}
namespace Fossa.API.Web.Claims
{
    public class ClaimNotFoundException : System.Exception
    {
        public ClaimNotFoundException() { }
        public ClaimNotFoundException(string message) { }
        public ClaimNotFoundException(string message, System.Exception inner) { }
    }
    public class ClaimsProvider : Fossa.API.Core.Tenant.ITenantIdProvider<System.Guid>, Fossa.API.Core.Tenant.ITenantIdProvider<int>, Fossa.API.Core.User.IUserIdProvider<System.Guid>, Fossa.API.Core.User.IUserIdProvider<int>
    {
        public ClaimsProvider(Microsoft.AspNetCore.Http.IHttpContextAccessor httpContextAccessor) { }
    }
}
namespace Fossa.API.Web
{
    public class DefaultWebModule : Autofac.Module
    {
        public DefaultWebModule() { }
        protected override void Load(Autofac.ContainerBuilder builder) { }
    }
    public class IdGenSetupLogger
    {
        public IdGenSetupLogger(IdGen.IdGenerator idGenerator, Microsoft.Extensions.Logging.ILogger<Fossa.API.Web.IdGenSetupLogger> logger) { }
        public void LogIdGenSetup() { }
    }
    public static class Roles
    {
        public const string Administrator = "administrator";
    }
}
namespace Fossa.API.Web.DependencyInjection
{
    public static class ServiceCollectionExtensions
    {
        public static Microsoft.Extensions.DependencyInjection.IServiceCollection AddIdGen(this Microsoft.Extensions.DependencyInjection.IServiceCollection services, Microsoft.Extensions.Configuration.IConfiguration configuration, System.DateOnly initialReleaseDate) { }
    }
}
namespace Fossa.API.Web.Filters
{
    public class EnrichLogRecordWithEventIdProcessor : OpenTelemetry.BaseProcessor<OpenTelemetry.Logs.LogRecord>
    {
        public EnrichLogRecordWithEventIdProcessor() { }
        public override void OnEnd(OpenTelemetry.Logs.LogRecord data) { }
    }
}
namespace Fossa.API.Web.HealthChecks.DependencyInjection
{
    public static class MongoDbHealthCheckBuilderExtensions
    {
        public static Microsoft.Extensions.DependencyInjection.IHealthChecksBuilder AddMongoDb(this Microsoft.Extensions.DependencyInjection.IHealthChecksBuilder builder, MongoDB.Driver.MongoClientSettings mongoClientSettings, string? name = null, Microsoft.Extensions.Diagnostics.HealthChecks.HealthStatus? failureStatus = default, System.Collections.Generic.IEnumerable<string>? tags = null, System.TimeSpan? timeout = default) { }
        public static Microsoft.Extensions.DependencyInjection.IHealthChecksBuilder AddMongoDb(this Microsoft.Extensions.DependencyInjection.IHealthChecksBuilder builder, System.Func<System.IServiceProvider, MongoDB.Driver.IMongoClient> mongoClientFactory, string? name = null, Microsoft.Extensions.Diagnostics.HealthChecks.HealthStatus? failureStatus = default, System.Collections.Generic.IEnumerable<string>? tags = null, System.TimeSpan? timeout = default) { }
        public static Microsoft.Extensions.DependencyInjection.IHealthChecksBuilder AddMongoDb(this Microsoft.Extensions.DependencyInjection.IHealthChecksBuilder builder, System.Func<System.IServiceProvider, string> mongodbConnectionStringFactory, string? name = null, Microsoft.Extensions.Diagnostics.HealthChecks.HealthStatus? failureStatus = default, System.Collections.Generic.IEnumerable<string>? tags = null, System.TimeSpan? timeout = default) { }
        public static Microsoft.Extensions.DependencyInjection.IHealthChecksBuilder AddMongoDb(this Microsoft.Extensions.DependencyInjection.IHealthChecksBuilder builder, string mongodbConnectionString, string? name = null, Microsoft.Extensions.Diagnostics.HealthChecks.HealthStatus? failureStatus = default, System.Collections.Generic.IEnumerable<string>? tags = null, System.TimeSpan? timeout = default) { }
        public static Microsoft.Extensions.DependencyInjection.IHealthChecksBuilder AddMongoDb(this Microsoft.Extensions.DependencyInjection.IHealthChecksBuilder builder, MongoDB.Driver.MongoClientSettings mongoClientSettings, string mongoDatabaseName, string? name = null, Microsoft.Extensions.Diagnostics.HealthChecks.HealthStatus? failureStatus = default, System.Collections.Generic.IEnumerable<string>? tags = null, System.TimeSpan? timeout = default) { }
        public static Microsoft.Extensions.DependencyInjection.IHealthChecksBuilder AddMongoDb(this Microsoft.Extensions.DependencyInjection.IHealthChecksBuilder builder, System.Func<System.IServiceProvider, MongoDB.Driver.IMongoClient> mongoClientFactory, string mongoDatabaseName, string? name = null, Microsoft.Extensions.Diagnostics.HealthChecks.HealthStatus? failureStatus = default, System.Collections.Generic.IEnumerable<string>? tags = null, System.TimeSpan? timeout = default) { }
        public static Microsoft.Extensions.DependencyInjection.IHealthChecksBuilder AddMongoDb(this Microsoft.Extensions.DependencyInjection.IHealthChecksBuilder builder, System.Func<System.IServiceProvider, string> mongodbConnectionStringFactory, string mongoDatabaseName, string? name = null, Microsoft.Extensions.Diagnostics.HealthChecks.HealthStatus? failureStatus = default, System.Collections.Generic.IEnumerable<string>? tags = null, System.TimeSpan? timeout = default) { }
        public static Microsoft.Extensions.DependencyInjection.IHealthChecksBuilder AddMongoDb(this Microsoft.Extensions.DependencyInjection.IHealthChecksBuilder builder, string mongodbConnectionString, string mongoDatabaseName, string? name = null, Microsoft.Extensions.Diagnostics.HealthChecks.HealthStatus? failureStatus = default, System.Collections.Generic.IEnumerable<string>? tags = null, System.TimeSpan? timeout = default) { }
    }
    public static class SystemLicenseHealthCheckBuilderExtensions
    {
        public static Microsoft.Extensions.DependencyInjection.IHealthChecksBuilder AddSystemLicense(this Microsoft.Extensions.DependencyInjection.IHealthChecksBuilder builder, string? name = null, Microsoft.Extensions.Diagnostics.HealthChecks.HealthStatus? failureStatus = default, System.Collections.Generic.IEnumerable<string>? tags = null, System.TimeSpan? timeout = default) { }
    }
}
namespace Fossa.API.Web.HealthChecks
{
    public class MongoDbHealthCheck : Microsoft.Extensions.Diagnostics.HealthChecks.IHealthCheck
    {
        public MongoDbHealthCheck(MongoDB.Driver.IMongoClient client, string? databaseName = null) { }
        public MongoDbHealthCheck(MongoDB.Driver.MongoClientSettings clientSettings, string? databaseName = null) { }
        public MongoDbHealthCheck(string connectionString, string? databaseName = null) { }
        public System.Threading.Tasks.Task<Microsoft.Extensions.Diagnostics.HealthChecks.HealthCheckResult> CheckHealthAsync(Microsoft.Extensions.Diagnostics.HealthChecks.HealthCheckContext context, System.Threading.CancellationToken cancellationToken = default) { }
    }
    public class SystemLicenseHealthCheck : Microsoft.Extensions.Diagnostics.HealthChecks.IHealthCheck
    {
        public SystemLicenseHealthCheck(Fossa.API.Core.Services.ISystemLicenseRetriever systemLicenseRetriever) { }
        public System.Threading.Tasks.Task<Microsoft.Extensions.Diagnostics.HealthChecks.HealthCheckResult> CheckHealthAsync(Microsoft.Extensions.Diagnostics.HealthChecks.HealthCheckContext context, System.Threading.CancellationToken cancellationToken = default) { }
    }
}
namespace Fossa.API.Web.Mappers
{
    public class AddressModelMapper : TIKSN.Mapping.IMapper<Fossa.API.Core.Entities.Address, Fossa.API.Web.ApiModels.AddressModel>, TIKSN.Mapping.IMapper<Fossa.API.Web.ApiModels.AddressModel, Fossa.API.Core.Entities.Address>
    {
        public AddressModelMapper(Fossa.API.Core.Services.ICountryProvider countryProvider) { }
        public Fossa.API.Web.ApiModels.AddressModel Map(Fossa.API.Core.Entities.Address source) { }
        public Fossa.API.Core.Entities.Address Map(Fossa.API.Web.ApiModels.AddressModel source) { }
    }
    public class BranchRetrievalModelMapper : TIKSN.Mapping.IMapper<Fossa.API.Core.Entities.BranchEntity, Fossa.API.Web.ApiModels.BranchRetrievalModel>
    {
        public BranchRetrievalModelMapper(TIKSN.Mapping.IMapper<Fossa.API.Core.Entities.BranchId, long> domainIdentityToDataIdentityMapper, TIKSN.Mapping.IMapper<Fossa.API.Core.Entities.CompanyId, long> companyDomainIdentityToDataIdentityMapper, TIKSN.Mapping.IMapper<Fossa.API.Core.Entities.Address, Fossa.API.Web.ApiModels.AddressModel> domainToModelMapper) { }
        public Fossa.API.Web.ApiModels.BranchRetrievalModel Map(Fossa.API.Core.Entities.BranchEntity source) { }
    }
    public class CompanyEntitlementsModelMapper : TIKSN.Mapping.IMapper<Fossa.Licensing.CompanyEntitlements, Fossa.API.Web.ApiModels.CompanyEntitlementsModel>
    {
        public CompanyEntitlementsModelMapper() { }
        public Fossa.API.Web.ApiModels.CompanyEntitlementsModel Map(Fossa.Licensing.CompanyEntitlements source) { }
    }
    public class CompanyRetrievalModelMapper : TIKSN.Mapping.IMapper<Fossa.API.Core.Entities.CompanyEntity, Fossa.API.Web.ApiModels.CompanyRetrievalModel>
    {
        public CompanyRetrievalModelMapper(TIKSN.Mapping.IMapper<Fossa.API.Core.Entities.CompanyId, long> domainIdentityToDataIdentityMapper) { }
        public Fossa.API.Web.ApiModels.CompanyRetrievalModel Map(Fossa.API.Core.Entities.CompanyEntity source) { }
    }
    public class CompanySettingsRetrievalModelMapper : TIKSN.Mapping.IMapper<Fossa.API.Core.Entities.CompanySettingsEntity, Fossa.API.Web.ApiModels.CompanySettingsRetrievalModel>
    {
        public CompanySettingsRetrievalModelMapper(TIKSN.Mapping.IMapper<Fossa.API.Core.Entities.CompanySettingsId, long> domainIdentityToDataIdentityMapper, TIKSN.Mapping.IMapper<Fossa.API.Core.Entities.CompanyId, long> companyDomainIdentityToDataIdentityMapper, TIKSN.Mapping.IMapper<Fossa.API.Core.Entities.ColorSchemeId, string> colorSchemeDomainToDataMapper) { }
        public Fossa.API.Web.ApiModels.CompanySettingsRetrievalModel Map(Fossa.API.Core.Entities.CompanySettingsEntity source) { }
    }
    public class CountryModelMapper : TIKSN.Mapping.IMapper<System.Globalization.RegionInfo, Fossa.API.Web.ApiModels.CountryModel>
    {
        public CountryModelMapper() { }
        public Fossa.API.Web.ApiModels.CountryModel Map(System.Globalization.RegionInfo source) { }
    }
    public class DepartmentRetrievalModelMapper : TIKSN.Mapping.IMapper<Fossa.API.Core.Entities.DepartmentEntity, Fossa.API.Web.ApiModels.DepartmentRetrievalModel>
    {
        public DepartmentRetrievalModelMapper(TIKSN.Mapping.IMapper<Fossa.API.Core.Entities.DepartmentId, long> domainIdentityToDataIdentityMapper, TIKSN.Mapping.IMapper<Fossa.API.Core.Entities.EmployeeId, long> employeeDomainIdentityToDataIdentityMapper) { }
        public Fossa.API.Web.ApiModels.DepartmentRetrievalModel Map(Fossa.API.Core.Entities.DepartmentEntity source) { }
    }
    public class EmployeeRetrievalModelMapper : TIKSN.Mapping.IMapper<Fossa.API.Core.Entities.EmployeeEntity, Fossa.API.Web.ApiModels.EmployeeRetrievalModel>
    {
        public EmployeeRetrievalModelMapper(TIKSN.Mapping.IMapper<Fossa.API.Core.Entities.EmployeeId, long> employeeDomainToDataIdentityMapper, TIKSN.Mapping.IMapper<Fossa.API.Core.Entities.CompanyId, long> companyDomainToDataIdentityMapper, TIKSN.Mapping.IMapper<Fossa.API.Core.Entities.BranchId, long> branchDomainToDataIdentityMapper, TIKSN.Mapping.IMapper<Fossa.API.Core.Entities.DepartmentId, long> departmentDomainToDataIdentityMapper) { }
        public Fossa.API.Web.ApiModels.EmployeeRetrievalModel Map(Fossa.API.Core.Entities.EmployeeEntity source) { }
    }
    public class LicenseResponseModelMapper<TEntitlements, TEntitlementsModel> : TIKSN.Mapping.IMapper<TIKSN.Licensing.License<TEntitlements>, Fossa.API.Web.ApiModels.LicenseResponseModel<TEntitlementsModel>>
    {
        public LicenseResponseModelMapper(TIKSN.Mapping.IMapper<TEntitlements, TEntitlementsModel> entitlementsMapper, TIKSN.Mapping.IMapper<TIKSN.Licensing.LicenseTerms, Fossa.API.Web.Mappers.LicenseTermsModel> licenseTermMapper) { }
        public Fossa.API.Web.ApiModels.LicenseResponseModel<TEntitlementsModel> Map(TIKSN.Licensing.License<TEntitlements> source) { }
    }
    public class LicenseTermsModel : System.IEquatable<Fossa.API.Web.Mappers.LicenseTermsModel>
    {
        public LicenseTermsModel(Fossa.API.Web.Mappers.PartyModel Licensor, Fossa.API.Web.Mappers.PartyModel Licensee, System.DateTimeOffset NotBefore, System.DateTimeOffset NotAfter) { }
        public Fossa.API.Web.Mappers.PartyModel Licensee { get; init; }
        public Fossa.API.Web.Mappers.PartyModel Licensor { get; init; }
        public System.DateTimeOffset NotAfter { get; init; }
        public System.DateTimeOffset NotBefore { get; init; }
    }
    public class LicenseTermsModelMapper : TIKSN.Mapping.IMapper<TIKSN.Licensing.LicenseTerms, Fossa.API.Web.Mappers.LicenseTermsModel>
    {
        public LicenseTermsModelMapper(TIKSN.Mapping.IMapper<TIKSN.Licensing.Party, Fossa.API.Web.Mappers.PartyModel> partyModelMapper) { }
        public Fossa.API.Web.Mappers.LicenseTermsModel Map(TIKSN.Licensing.LicenseTerms source) { }
    }
    public class PagingResponseModelMapper<TEntity, TModel> : TIKSN.Mapping.IMapper<LanguageExt.Seq<TEntity>, Fossa.API.Web.ApiModels.PagingResponseModel<TModel>>, TIKSN.Mapping.IMapper<TIKSN.Data.PageResult<TEntity>, Fossa.API.Web.ApiModels.PagingResponseModel<TModel>>
    {
        public PagingResponseModelMapper(TIKSN.Mapping.IMapper<TEntity, TModel> itemMapper) { }
        public Fossa.API.Web.ApiModels.PagingResponseModel<TModel> Map(LanguageExt.Seq<TEntity> source) { }
        public Fossa.API.Web.ApiModels.PagingResponseModel<TModel> Map(TIKSN.Data.PageResult<TEntity> source) { }
    }
    public class PartyModel : System.IEquatable<Fossa.API.Web.Mappers.PartyModel>
    {
        public PartyModel(string LongName, string ShortName) { }
        public string LongName { get; init; }
        public string ShortName { get; init; }
    }
    public class PartyModelMapper : TIKSN.Mapping.IMapper<TIKSN.Licensing.Party, Fossa.API.Web.Mappers.PartyModel>
    {
        public PartyModelMapper() { }
        public Fossa.API.Web.Mappers.PartyModel Map(TIKSN.Licensing.Party source) { }
    }
    public class SystemEntitlementsModelMapper : TIKSN.Mapping.IMapper<Fossa.Licensing.SystemEntitlements, Fossa.API.Web.ApiModels.SystemEntitlementsModel>
    {
        public SystemEntitlementsModelMapper(Microsoft.Extensions.Hosting.IHostEnvironment hostEnvironment, Fossa.API.Core.Services.IDateTimeZoneLookup dateTimeZoneLookup, TIKSN.Mapping.IMapper<System.Globalization.RegionInfo, Fossa.API.Web.ApiModels.CountryModel> countryModelMapper, TIKSN.Mapping.IMapper<NodaTime.DateTimeZone, Fossa.API.Web.ApiModels.TimeZoneModel> timeZoneModelMapper) { }
        public Fossa.API.Web.ApiModels.SystemEntitlementsModel Map(Fossa.Licensing.SystemEntitlements source) { }
    }
    public class TimeZoneModelMapper : TIKSN.Mapping.IMapper<NodaTime.DateTimeZone, Fossa.API.Web.ApiModels.TimeZoneModel>
    {
        public TimeZoneModelMapper(Fossa.API.Core.Services.IDateTimeZoneLookup dateTimeZoneLookup, NodaTime.IClock clock) { }
        public Fossa.API.Web.ApiModels.TimeZoneModel Map(NodaTime.DateTimeZone source) { }
    }
}
namespace Fossa.API.Web.Messages
{
    public abstract class ApiMessageHandler<TEntityIdentity, TApiRequest, TApiResponse> : MediatR.IRequestHandler<TApiRequest, TApiResponse>
        where TApiRequest : MediatR.IRequest<TApiResponse>
    {
        protected readonly TIKSN.Mapping.IMapper<long, TEntityIdentity> _dataIdentityToDomainIdentityMapper;
        protected readonly TIKSN.Mapping.IMapper<TEntityIdentity, long> _domainIdentityToDataIdentityMapper;
        protected readonly MediatR.ISender _sender;
        protected readonly Fossa.API.Core.Tenant.ITenantIdProvider<System.Guid> _tenantIdProvider;
        protected readonly Fossa.API.Core.User.IUserIdProvider<System.Guid> _userIdProvider;
        protected ApiMessageHandler(MediatR.ISender sender, Fossa.API.Core.Tenant.ITenantIdProvider<System.Guid> tenantIdProvider, Fossa.API.Core.User.IUserIdProvider<System.Guid> userIdProvider, TIKSN.Mapping.IMapper<TEntityIdentity, long> domainIdentityToDataIdentityMapper, TIKSN.Mapping.IMapper<long, TEntityIdentity> dataIdentityToDomainIdentityMapper) { }
        public abstract System.Threading.Tasks.Task<TApiResponse> Handle(TApiRequest request, System.Threading.CancellationToken cancellationToken);
        protected System.Threading.Tasks.Task<TApiResponse> SendAsync<TDomainRequest, TDomainResponse>(TDomainRequest domainRequest, System.Func<TDomainResponse, TApiResponse> mapToApiResponse, System.Threading.CancellationToken cancellationToken)
            where TDomainRequest : MediatR.IRequest<TDomainResponse> { }
        public class ApiTypeMap : System.Collections.Concurrent.ConcurrentDictionary<System.Type, Fossa.API.Web.Messages.ApiMessageHandler<TEntityIdentity, TApiRequest, TApiResponse>.DomainTypeMap>
        {
            public ApiTypeMap() { }
        }
        public class DomainTypeMap : System.Collections.Concurrent.ConcurrentDictionary<System.Type, Fossa.API.Web.Messages.ApiMessageHandler<TEntityIdentity, TApiRequest, TApiResponse>.PropertyNameMap>
        {
            public DomainTypeMap() { }
        }
        public class PropertyNameMap : System.Collections.Concurrent.ConcurrentDictionary<string, string>
        {
            public PropertyNameMap() { }
        }
    }
    public abstract class ApiMessageHandler<TEntityIdentity, TApiRequest, TApiResponse, TDomainRequest, TDomainResponse> : Fossa.API.Web.Messages.ApiMessageHandler<TEntityIdentity, TApiRequest, TApiResponse>
        where TApiRequest : MediatR.IRequest<TApiResponse>
        where TDomainRequest : MediatR.IRequest<TDomainResponse>
    {
        protected ApiMessageHandler(MediatR.ISender sender, Fossa.API.Core.Tenant.ITenantIdProvider<System.Guid> tenantIdProvider, Fossa.API.Core.User.IUserIdProvider<System.Guid> userIdProvider, TIKSN.Mapping.IMapper<TEntityIdentity, long> domainIdentityToDataIdentityMapper, TIKSN.Mapping.IMapper<long, TEntityIdentity> dataIdentityToDomainIdentityMapper) { }
        public override System.Threading.Tasks.Task<TApiResponse> Handle(TApiRequest request, System.Threading.CancellationToken cancellationToken) { }
        protected abstract TApiResponse MapToApiResponse(TDomainResponse domainResponse);
        protected abstract TDomainRequest MapToDomainRequest(TApiRequest apiRequest);
    }
    public abstract class ApiMessageHandler<TEntityIdentity, TApiRequest, TApiResponse, TDomainRequest1, TDomainResponse1, TDomainRequest2, TDomainResponse2> : Fossa.API.Web.Messages.ApiMessageHandler<TEntityIdentity, TApiRequest, TApiResponse>
        where TApiRequest : MediatR.IRequest<TApiResponse>
        where TDomainRequest1 : MediatR.IRequest<TDomainResponse1>
        where TDomainRequest2 : MediatR.IRequest<TDomainResponse2>
    {
        protected ApiMessageHandler(MediatR.ISender sender, Fossa.API.Core.Tenant.ITenantIdProvider<System.Guid> tenantIdProvider, Fossa.API.Core.User.IUserIdProvider<System.Guid> userIdProvider, TIKSN.Mapping.IMapper<TEntityIdentity, long> domainIdentityToDataIdentityMapper, TIKSN.Mapping.IMapper<long, TEntityIdentity> dataIdentityToDomainIdentityMapper) { }
        public override System.Threading.Tasks.Task<TApiResponse> Handle(TApiRequest request, System.Threading.CancellationToken cancellationToken) { }
        protected abstract TApiResponse MapToApiResponse(TDomainResponse1 domainResponse);
        protected abstract TApiResponse MapToApiResponse(TDomainResponse2 domainResponse);
        protected abstract LanguageExt.Either<TDomainRequest1, TDomainRequest2> MapToDomainRequest(TApiRequest apiRequest);
    }
}
namespace Fossa.API.Web.Messages.Commands
{
    public class BranchCreationApiCommand : Fossa.API.Core.Messages.Commands.ICommand, MediatR.IBaseRequest, MediatR.IRequest<MediatR.Unit>, System.IEquatable<Fossa.API.Web.Messages.Commands.BranchCreationApiCommand>
    {
        public BranchCreationApiCommand(string? Name, string? TimeZoneId, Fossa.API.Web.ApiModels.AddressModel? Address) { }
        public Fossa.API.Web.ApiModels.AddressModel? Address { get; init; }
        public string? Name { get; init; }
        public string? TimeZoneId { get; init; }
    }
    public class BranchCreationApiCommandHandler : Fossa.API.Web.Messages.ApiMessageHandler<Fossa.API.Core.Entities.BranchId, Fossa.API.Web.Messages.Commands.BranchCreationApiCommand, MediatR.Unit, Fossa.API.Core.Messages.Commands.BranchCreationCommand, MediatR.Unit>
    {
        public BranchCreationApiCommandHandler(Fossa.API.Core.TimeZone.IDateTimeZoneProvider dateTimeZoneProvider, TIKSN.Mapping.IMapper<Fossa.API.Web.ApiModels.AddressModel, Fossa.API.Core.Entities.Address> addressModelToDomainMapper, MediatR.ISender sender, Fossa.API.Core.Tenant.ITenantIdProvider<System.Guid> tenantIdProvider, Fossa.API.Core.User.IUserIdProvider<System.Guid> userIdProvider, TIKSN.Mapping.IMapper<Fossa.API.Core.Entities.BranchId, long> domainIdentityToDataIdentityMapper, TIKSN.Mapping.IMapper<long, Fossa.API.Core.Entities.BranchId> dataIdentityToDomainIdentityMapper) { }
        protected override MediatR.Unit MapToApiResponse(MediatR.Unit domainResponse) { }
        protected override Fossa.API.Core.Messages.Commands.BranchCreationCommand MapToDomainRequest(Fossa.API.Web.Messages.Commands.BranchCreationApiCommand apiRequest) { }
    }
    public class BranchDeletionApiCommand : Fossa.API.Core.Messages.Commands.ICommand, MediatR.IBaseRequest, MediatR.IRequest<MediatR.Unit>, System.IEquatable<Fossa.API.Web.Messages.Commands.BranchDeletionApiCommand>
    {
        public BranchDeletionApiCommand(long Id) { }
        public long Id { get; init; }
    }
    public class BranchDeletionApiCommandHandler : Fossa.API.Web.Messages.ApiMessageHandler<Fossa.API.Core.Entities.BranchId, Fossa.API.Web.Messages.Commands.BranchDeletionApiCommand, MediatR.Unit, Fossa.API.Core.Messages.Commands.BranchDeletionCommand, MediatR.Unit>
    {
        public BranchDeletionApiCommandHandler(MediatR.ISender sender, Fossa.API.Core.Tenant.ITenantIdProvider<System.Guid> tenantIdProvider, Fossa.API.Core.User.IUserIdProvider<System.Guid> userIdProvider, TIKSN.Mapping.IMapper<Fossa.API.Core.Entities.BranchId, long> domainIdentityToDataIdentityMapper, TIKSN.Mapping.IMapper<long, Fossa.API.Core.Entities.BranchId> dataIdentityToDomainIdentityMapper) { }
        protected override MediatR.Unit MapToApiResponse(MediatR.Unit domainResponse) { }
        protected override Fossa.API.Core.Messages.Commands.BranchDeletionCommand MapToDomainRequest(Fossa.API.Web.Messages.Commands.BranchDeletionApiCommand apiRequest) { }
    }
    public class BranchModificationApiCommand : Fossa.API.Core.Messages.Commands.ICommand, MediatR.IBaseRequest, MediatR.IRequest<MediatR.Unit>, System.IEquatable<Fossa.API.Web.Messages.Commands.BranchModificationApiCommand>
    {
        public BranchModificationApiCommand(long Id, string? Name, string? TimeZoneId, Fossa.API.Web.ApiModels.AddressModel? Address) { }
        public Fossa.API.Web.ApiModels.AddressModel? Address { get; init; }
        public long Id { get; init; }
        public string? Name { get; init; }
        public string? TimeZoneId { get; init; }
    }
    public class BranchModificationApiCommandHandler : Fossa.API.Web.Messages.ApiMessageHandler<Fossa.API.Core.Entities.BranchId, Fossa.API.Web.Messages.Commands.BranchModificationApiCommand, MediatR.Unit, Fossa.API.Core.Messages.Commands.BranchModificationCommand, MediatR.Unit>
    {
        public BranchModificationApiCommandHandler(Fossa.API.Core.TimeZone.IDateTimeZoneProvider dateTimeZoneProvider, TIKSN.Mapping.IMapper<Fossa.API.Web.ApiModels.AddressModel, Fossa.API.Core.Entities.Address> addressModelToDomainMapper, MediatR.ISender sender, Fossa.API.Core.Tenant.ITenantIdProvider<System.Guid> tenantIdProvider, Fossa.API.Core.User.IUserIdProvider<System.Guid> userIdProvider, TIKSN.Mapping.IMapper<Fossa.API.Core.Entities.BranchId, long> domainIdentityToDataIdentityMapper, TIKSN.Mapping.IMapper<long, Fossa.API.Core.Entities.BranchId> dataIdentityToDomainIdentityMapper) { }
        protected override MediatR.Unit MapToApiResponse(MediatR.Unit domainResponse) { }
        protected override Fossa.API.Core.Messages.Commands.BranchModificationCommand MapToDomainRequest(Fossa.API.Web.Messages.Commands.BranchModificationApiCommand apiRequest) { }
    }
    public class CompanyCreationApiCommand : Fossa.API.Core.Messages.Commands.ICommand, MediatR.IBaseRequest, MediatR.IRequest<MediatR.Unit>, System.IEquatable<Fossa.API.Web.Messages.Commands.CompanyCreationApiCommand>
    {
        public CompanyCreationApiCommand(string? Name, string? CountryCode) { }
        public string? CountryCode { get; init; }
        public string? Name { get; init; }
    }
    public class CompanyCreationApiCommandHandler : Fossa.API.Web.Messages.ApiMessageHandler<Fossa.API.Core.Entities.CompanyId, Fossa.API.Web.Messages.Commands.CompanyCreationApiCommand, MediatR.Unit, Fossa.API.Core.Messages.Commands.CompanyCreationCommand, MediatR.Unit>
    {
        public CompanyCreationApiCommandHandler(TIKSN.Globalization.IRegionFactory regionFactory, MediatR.ISender sender, Fossa.API.Core.Tenant.ITenantIdProvider<System.Guid> tenantIdProvider, Fossa.API.Core.User.IUserIdProvider<System.Guid> userIdProvider, TIKSN.Mapping.IMapper<Fossa.API.Core.Entities.CompanyId, long> domainIdentityToDataIdentityMapper, TIKSN.Mapping.IMapper<long, Fossa.API.Core.Entities.CompanyId> dataIdentityToDomainIdentityMapper) { }
        protected override MediatR.Unit MapToApiResponse(MediatR.Unit domainResponse) { }
        protected override Fossa.API.Core.Messages.Commands.CompanyCreationCommand MapToDomainRequest(Fossa.API.Web.Messages.Commands.CompanyCreationApiCommand apiRequest) { }
    }
    public class CompanyDeletionApiCommand : Fossa.API.Core.Messages.Commands.ICommand, MediatR.IBaseRequest, MediatR.IRequest<MediatR.Unit>, System.IEquatable<Fossa.API.Web.Messages.Commands.CompanyDeletionApiCommand>
    {
        public CompanyDeletionApiCommand() { }
    }
    public class CompanyDeletionApiCommandHandler : Fossa.API.Web.Messages.ApiMessageHandler<Fossa.API.Core.Entities.CompanyId, Fossa.API.Web.Messages.Commands.CompanyDeletionApiCommand, MediatR.Unit, Fossa.API.Core.Messages.Commands.CompanyDeletionCommand, MediatR.Unit>
    {
        public CompanyDeletionApiCommandHandler(MediatR.ISender sender, Fossa.API.Core.Tenant.ITenantIdProvider<System.Guid> tenantIdProvider, Fossa.API.Core.User.IUserIdProvider<System.Guid> userIdProvider, TIKSN.Mapping.IMapper<Fossa.API.Core.Entities.CompanyId, long> domainIdentityToDataIdentityMapper, TIKSN.Mapping.IMapper<long, Fossa.API.Core.Entities.CompanyId> dataIdentityToDomainIdentityMapper) { }
        protected override MediatR.Unit MapToApiResponse(MediatR.Unit domainResponse) { }
        protected override Fossa.API.Core.Messages.Commands.CompanyDeletionCommand MapToDomainRequest(Fossa.API.Web.Messages.Commands.CompanyDeletionApiCommand apiRequest) { }
    }
    public class CompanyModificationApiCommand : Fossa.API.Core.Messages.Commands.ICommand, MediatR.IBaseRequest, MediatR.IRequest<MediatR.Unit>, System.IEquatable<Fossa.API.Web.Messages.Commands.CompanyModificationApiCommand>
    {
        public CompanyModificationApiCommand(string? Name, string? CountryCode) { }
        public string? CountryCode { get; init; }
        public string? Name { get; init; }
    }
    public class CompanyModificationApiCommandHandler : Fossa.API.Web.Messages.ApiMessageHandler<Fossa.API.Core.Entities.CompanyId, Fossa.API.Web.Messages.Commands.CompanyModificationApiCommand, MediatR.Unit, Fossa.API.Core.Messages.Commands.CompanyModificationCommand, MediatR.Unit>
    {
        public CompanyModificationApiCommandHandler(TIKSN.Globalization.IRegionFactory regionFactory, MediatR.ISender sender, Fossa.API.Core.Tenant.ITenantIdProvider<System.Guid> tenantIdProvider, Fossa.API.Core.User.IUserIdProvider<System.Guid> userIdProvider, TIKSN.Mapping.IMapper<Fossa.API.Core.Entities.CompanyId, long> domainIdentityToDataIdentityMapper, TIKSN.Mapping.IMapper<long, Fossa.API.Core.Entities.CompanyId> dataIdentityToDomainIdentityMapper) { }
        protected override MediatR.Unit MapToApiResponse(MediatR.Unit domainResponse) { }
        protected override Fossa.API.Core.Messages.Commands.CompanyModificationCommand MapToDomainRequest(Fossa.API.Web.Messages.Commands.CompanyModificationApiCommand apiRequest) { }
    }
    public class CompanySettingsCreationApiCommand : Fossa.API.Core.Messages.Commands.ICommand, MediatR.IBaseRequest, MediatR.IRequest<MediatR.Unit>, System.IEquatable<Fossa.API.Web.Messages.Commands.CompanySettingsCreationApiCommand>
    {
        public CompanySettingsCreationApiCommand(string? ColorSchemeId) { }
        public string? ColorSchemeId { get; init; }
    }
    public class CompanySettingsCreationApiCommandHandler : Fossa.API.Web.Messages.ApiMessageHandler<Fossa.API.Core.Entities.CompanySettingsId, Fossa.API.Web.Messages.Commands.CompanySettingsCreationApiCommand, MediatR.Unit, Fossa.API.Core.Messages.Commands.CompanySettingsCreationCommand, MediatR.Unit>
    {
        public CompanySettingsCreationApiCommandHandler(MediatR.ISender sender, Fossa.API.Core.Tenant.ITenantIdProvider<System.Guid> tenantIdProvider, Fossa.API.Core.User.IUserIdProvider<System.Guid> userIdProvider, TIKSN.Mapping.IMapper<Fossa.API.Core.Entities.CompanySettingsId, long> domainIdentityToDataIdentityMapper, TIKSN.Mapping.IMapper<long, Fossa.API.Core.Entities.CompanySettingsId> dataIdentityToDomainIdentityMapper, TIKSN.Mapping.IMapper<string, Fossa.API.Core.Entities.ColorSchemeId> colorSchemeDataToDomainMapper) { }
        protected override MediatR.Unit MapToApiResponse(MediatR.Unit domainResponse) { }
        protected override Fossa.API.Core.Messages.Commands.CompanySettingsCreationCommand MapToDomainRequest(Fossa.API.Web.Messages.Commands.CompanySettingsCreationApiCommand apiRequest) { }
    }
    public class CompanySettingsDeletionApiCommand : Fossa.API.Core.Messages.Commands.ICommand, MediatR.IBaseRequest, MediatR.IRequest<MediatR.Unit>, System.IEquatable<Fossa.API.Web.Messages.Commands.CompanySettingsDeletionApiCommand>
    {
        public CompanySettingsDeletionApiCommand() { }
    }
    public class CompanySettingsDeletionApiCommandHandler : Fossa.API.Web.Messages.ApiMessageHandler<Fossa.API.Core.Entities.CompanySettingsId, Fossa.API.Web.Messages.Commands.CompanySettingsDeletionApiCommand, MediatR.Unit, Fossa.API.Core.Messages.Commands.CompanySettingsDeletionCommand, MediatR.Unit>
    {
        public CompanySettingsDeletionApiCommandHandler(MediatR.ISender sender, Fossa.API.Core.Tenant.ITenantIdProvider<System.Guid> tenantIdProvider, Fossa.API.Core.User.IUserIdProvider<System.Guid> userIdProvider, TIKSN.Mapping.IMapper<Fossa.API.Core.Entities.CompanySettingsId, long> domainIdentityToDataIdentityMapper, TIKSN.Mapping.IMapper<long, Fossa.API.Core.Entities.CompanySettingsId> dataIdentityToDomainIdentityMapper) { }
        protected override MediatR.Unit MapToApiResponse(MediatR.Unit domainResponse) { }
        protected override Fossa.API.Core.Messages.Commands.CompanySettingsDeletionCommand MapToDomainRequest(Fossa.API.Web.Messages.Commands.CompanySettingsDeletionApiCommand apiRequest) { }
    }
    public class CompanySettingsModificationApiCommand : Fossa.API.Core.Messages.Commands.ICommand, MediatR.IBaseRequest, MediatR.IRequest<MediatR.Unit>, System.IEquatable<Fossa.API.Web.Messages.Commands.CompanySettingsModificationApiCommand>
    {
        public CompanySettingsModificationApiCommand(string? ColorSchemeId) { }
        public string? ColorSchemeId { get; init; }
    }
    public class CompanySettingsModificationApiCommandHandler : Fossa.API.Web.Messages.ApiMessageHandler<Fossa.API.Core.Entities.CompanySettingsId, Fossa.API.Web.Messages.Commands.CompanySettingsModificationApiCommand, MediatR.Unit, Fossa.API.Core.Messages.Commands.CompanySettingsModificationCommand, MediatR.Unit>
    {
        public CompanySettingsModificationApiCommandHandler(MediatR.ISender sender, Fossa.API.Core.Tenant.ITenantIdProvider<System.Guid> tenantIdProvider, Fossa.API.Core.User.IUserIdProvider<System.Guid> userIdProvider, TIKSN.Mapping.IMapper<Fossa.API.Core.Entities.CompanySettingsId, long> domainIdentityToDataIdentityMapper, TIKSN.Mapping.IMapper<long, Fossa.API.Core.Entities.CompanySettingsId> dataIdentityToDomainIdentityMapper, TIKSN.Mapping.IMapper<string, Fossa.API.Core.Entities.ColorSchemeId> colorSchemeDataToDomainMapper) { }
        protected override MediatR.Unit MapToApiResponse(MediatR.Unit domainResponse) { }
        protected override Fossa.API.Core.Messages.Commands.CompanySettingsModificationCommand MapToDomainRequest(Fossa.API.Web.Messages.Commands.CompanySettingsModificationApiCommand apiRequest) { }
    }
    public class DepartmentCreationApiCommand : Fossa.API.Core.Messages.Commands.ICommand, MediatR.IBaseRequest, MediatR.IRequest<MediatR.Unit>, System.IEquatable<Fossa.API.Web.Messages.Commands.DepartmentCreationApiCommand>
    {
        public DepartmentCreationApiCommand(string? Name, long? ParentDepartmentId, long? ManagerId) { }
        public long? ManagerId { get; init; }
        public string? Name { get; init; }
        public long? ParentDepartmentId { get; init; }
    }
    public class DepartmentCreationApiCommandHandler : Fossa.API.Web.Messages.ApiMessageHandler<Fossa.API.Core.Entities.DepartmentId, Fossa.API.Web.Messages.Commands.DepartmentCreationApiCommand, MediatR.Unit, Fossa.API.Core.Messages.Commands.DepartmentCreationCommand, MediatR.Unit>
    {
        public DepartmentCreationApiCommandHandler(MediatR.ISender sender, Fossa.API.Core.Tenant.ITenantIdProvider<System.Guid> tenantIdProvider, Fossa.API.Core.User.IUserIdProvider<System.Guid> userIdProvider, TIKSN.Mapping.IMapper<long, Fossa.API.Core.Entities.DepartmentId> departmentDataIdentityToDomainIdentityMapper, TIKSN.Mapping.IMapper<long, Fossa.API.Core.Entities.EmployeeId> employeeDataIdentityToDomainIdentityMapper, TIKSN.Mapping.IMapper<Fossa.API.Core.Entities.DepartmentId, long> domainIdentityToDataIdentityMapper) { }
        protected override MediatR.Unit MapToApiResponse(MediatR.Unit domainResponse) { }
        protected override Fossa.API.Core.Messages.Commands.DepartmentCreationCommand MapToDomainRequest(Fossa.API.Web.Messages.Commands.DepartmentCreationApiCommand apiRequest) { }
    }
    public class DepartmentDeletionApiCommand : Fossa.API.Core.Messages.Commands.ICommand, MediatR.IBaseRequest, MediatR.IRequest<MediatR.Unit>, System.IEquatable<Fossa.API.Web.Messages.Commands.DepartmentDeletionApiCommand>
    {
        public DepartmentDeletionApiCommand(long Id) { }
        public long Id { get; init; }
    }
    public class DepartmentDeletionApiCommandHandler : Fossa.API.Web.Messages.ApiMessageHandler<Fossa.API.Core.Entities.DepartmentId, Fossa.API.Web.Messages.Commands.DepartmentDeletionApiCommand, MediatR.Unit, Fossa.API.Core.Messages.Commands.DepartmentDeletionCommand, MediatR.Unit>
    {
        public DepartmentDeletionApiCommandHandler(MediatR.ISender sender, Fossa.API.Core.Tenant.ITenantIdProvider<System.Guid> tenantIdProvider, Fossa.API.Core.User.IUserIdProvider<System.Guid> userIdProvider, TIKSN.Mapping.IMapper<Fossa.API.Core.Entities.DepartmentId, long> domainIdentityToDataIdentityMapper, TIKSN.Mapping.IMapper<long, Fossa.API.Core.Entities.DepartmentId> dataIdentityToDomainIdentityMapper) { }
        protected override MediatR.Unit MapToApiResponse(MediatR.Unit domainResponse) { }
        protected override Fossa.API.Core.Messages.Commands.DepartmentDeletionCommand MapToDomainRequest(Fossa.API.Web.Messages.Commands.DepartmentDeletionApiCommand apiRequest) { }
    }
    public class DepartmentModificationApiCommand : Fossa.API.Core.Messages.Commands.ICommand, MediatR.IBaseRequest, MediatR.IRequest<MediatR.Unit>, System.IEquatable<Fossa.API.Web.Messages.Commands.DepartmentModificationApiCommand>
    {
        public DepartmentModificationApiCommand(long Id, string? Name, long? ParentDepartmentId, long? ManagerId) { }
        public long Id { get; init; }
        public long? ManagerId { get; init; }
        public string? Name { get; init; }
        public long? ParentDepartmentId { get; init; }
    }
    public class DepartmentModificationApiCommandHandler : Fossa.API.Web.Messages.ApiMessageHandler<Fossa.API.Core.Entities.DepartmentId, Fossa.API.Web.Messages.Commands.DepartmentModificationApiCommand, MediatR.Unit, Fossa.API.Core.Messages.Commands.DepartmentModificationCommand, MediatR.Unit>
    {
        public DepartmentModificationApiCommandHandler(MediatR.ISender sender, Fossa.API.Core.Tenant.ITenantIdProvider<System.Guid> tenantIdProvider, Fossa.API.Core.User.IUserIdProvider<System.Guid> userIdProvider, TIKSN.Mapping.IMapper<long, Fossa.API.Core.Entities.DepartmentId> departmentDataIdentityToDomainIdentityMapper, TIKSN.Mapping.IMapper<long, Fossa.API.Core.Entities.EmployeeId> employeeDataIdentityToDomainIdentityMapper, TIKSN.Mapping.IMapper<Fossa.API.Core.Entities.DepartmentId, long> domainIdentityToDataIdentityMapper) { }
        protected override MediatR.Unit MapToApiResponse(MediatR.Unit domainResponse) { }
        protected override Fossa.API.Core.Messages.Commands.DepartmentModificationCommand MapToDomainRequest(Fossa.API.Web.Messages.Commands.DepartmentModificationApiCommand apiRequest) { }
    }
    public class EmployeeCreationApiCommand : Fossa.API.Core.Messages.Commands.ICommand, MediatR.IBaseRequest, MediatR.IRequest<MediatR.Unit>, System.IEquatable<Fossa.API.Web.Messages.Commands.EmployeeCreationApiCommand>
    {
        public EmployeeCreationApiCommand(string? FirstName, string? LastName, string? FullName) { }
        public string? FirstName { get; init; }
        public string? FullName { get; init; }
        public string? LastName { get; init; }
    }
    public class EmployeeCreationApiCommandHandler : Fossa.API.Web.Messages.ApiMessageHandler<Fossa.API.Core.Entities.EmployeeId, Fossa.API.Web.Messages.Commands.EmployeeCreationApiCommand, MediatR.Unit, Fossa.API.Core.Messages.Commands.EmployeeCreationCommand, MediatR.Unit>
    {
        public EmployeeCreationApiCommandHandler(MediatR.ISender sender, Fossa.API.Core.Tenant.ITenantIdProvider<System.Guid> tenantIdProvider, Fossa.API.Core.User.IUserIdProvider<System.Guid> userIdProvider, TIKSN.Mapping.IMapper<Fossa.API.Core.Entities.EmployeeId, long> domainIdentityToDataIdentityMapper, TIKSN.Mapping.IMapper<long, Fossa.API.Core.Entities.EmployeeId> dataIdentityToDomainIdentityMapper) { }
        protected override MediatR.Unit MapToApiResponse(MediatR.Unit domainResponse) { }
        protected override Fossa.API.Core.Messages.Commands.EmployeeCreationCommand MapToDomainRequest(Fossa.API.Web.Messages.Commands.EmployeeCreationApiCommand apiRequest) { }
    }
    public class EmployeeDeletionApiCommand : Fossa.API.Core.Messages.Commands.ICommand, MediatR.IBaseRequest, MediatR.IRequest<MediatR.Unit>, System.IEquatable<Fossa.API.Web.Messages.Commands.EmployeeDeletionApiCommand>
    {
        public EmployeeDeletionApiCommand() { }
    }
    public class EmployeeDeletionApiCommandHandler : Fossa.API.Web.Messages.ApiMessageHandler<Fossa.API.Core.Entities.EmployeeId, Fossa.API.Web.Messages.Commands.EmployeeDeletionApiCommand, MediatR.Unit, Fossa.API.Core.Messages.Commands.EmployeeDeletionCommand, MediatR.Unit>
    {
        public EmployeeDeletionApiCommandHandler(MediatR.ISender sender, Fossa.API.Core.Tenant.ITenantIdProvider<System.Guid> tenantIdProvider, Fossa.API.Core.User.IUserIdProvider<System.Guid> userIdProvider, TIKSN.Mapping.IMapper<Fossa.API.Core.Entities.EmployeeId, long> domainIdentityToDataIdentityMapper, TIKSN.Mapping.IMapper<long, Fossa.API.Core.Entities.EmployeeId> dataIdentityToDomainIdentityMapper) { }
        protected override MediatR.Unit MapToApiResponse(MediatR.Unit domainResponse) { }
        protected override Fossa.API.Core.Messages.Commands.EmployeeDeletionCommand MapToDomainRequest(Fossa.API.Web.Messages.Commands.EmployeeDeletionApiCommand apiRequest) { }
    }
    public class EmployeeManagementApiCommand : Fossa.API.Core.Messages.Commands.ICommand, MediatR.IBaseRequest, MediatR.IRequest<MediatR.Unit>, System.IEquatable<Fossa.API.Web.Messages.Commands.EmployeeManagementApiCommand>
    {
        public EmployeeManagementApiCommand(long Id, long? AssignedBranchId, long? AssignedDepartmentId, long? ReportsToId, string? JobTitle) { }
        public long? AssignedBranchId { get; init; }
        public long? AssignedDepartmentId { get; init; }
        public long Id { get; init; }
        public string? JobTitle { get; init; }
        public long? ReportsToId { get; init; }
    }
    public class EmployeeManagementApiCommandHandler : Fossa.API.Web.Messages.ApiMessageHandler<Fossa.API.Core.Entities.EmployeeId, Fossa.API.Web.Messages.Commands.EmployeeManagementApiCommand, MediatR.Unit, Fossa.API.Core.Messages.Commands.EmployeeManagementCommand, MediatR.Unit>
    {
        public EmployeeManagementApiCommandHandler(MediatR.ISender sender, Fossa.API.Core.Tenant.ITenantIdProvider<System.Guid> tenantIdProvider, Fossa.API.Core.User.IUserIdProvider<System.Guid> userIdProvider, TIKSN.Mapping.IMapper<Fossa.API.Core.Entities.EmployeeId, long> domainIdentityToDataIdentityMapper, TIKSN.Mapping.IMapper<long, Fossa.API.Core.Entities.EmployeeId> dataIdentityToDomainIdentityMapper, TIKSN.Mapping.IMapper<long, Fossa.API.Core.Entities.BranchId> branchDataIdentityToDomainIdentityMapper, TIKSN.Mapping.IMapper<long, Fossa.API.Core.Entities.DepartmentId> departmentDataIdentityToDomainIdentityMapper) { }
        protected override MediatR.Unit MapToApiResponse(MediatR.Unit domainResponse) { }
        protected override Fossa.API.Core.Messages.Commands.EmployeeManagementCommand MapToDomainRequest(Fossa.API.Web.Messages.Commands.EmployeeManagementApiCommand apiRequest) { }
    }
    public class EmployeeModificationApiCommand : Fossa.API.Core.Messages.Commands.ICommand, MediatR.IBaseRequest, MediatR.IRequest<MediatR.Unit>, System.IEquatable<Fossa.API.Web.Messages.Commands.EmployeeModificationApiCommand>
    {
        public EmployeeModificationApiCommand(string? FirstName, string? LastName, string? FullName) { }
        public string? FirstName { get; init; }
        public string? FullName { get; init; }
        public string? LastName { get; init; }
    }
    public class EmployeeModificationApiCommandHandler : Fossa.API.Web.Messages.ApiMessageHandler<Fossa.API.Core.Entities.EmployeeId, Fossa.API.Web.Messages.Commands.EmployeeModificationApiCommand, MediatR.Unit, Fossa.API.Core.Messages.Commands.EmployeeModificationCommand, MediatR.Unit>
    {
        public EmployeeModificationApiCommandHandler(MediatR.ISender sender, Fossa.API.Core.Tenant.ITenantIdProvider<System.Guid> tenantIdProvider, Fossa.API.Core.User.IUserIdProvider<System.Guid> userIdProvider, TIKSN.Mapping.IMapper<Fossa.API.Core.Entities.EmployeeId, long> domainIdentityToDataIdentityMapper, TIKSN.Mapping.IMapper<long, Fossa.API.Core.Entities.EmployeeId> dataIdentityToDomainIdentityMapper) { }
        protected override MediatR.Unit MapToApiResponse(MediatR.Unit domainResponse) { }
        protected override Fossa.API.Core.Messages.Commands.EmployeeModificationCommand MapToDomainRequest(Fossa.API.Web.Messages.Commands.EmployeeModificationApiCommand apiRequest) { }
    }
}
namespace Fossa.API.Web.Messages.Queries
{
    public class BranchPagingApiQuery : Fossa.API.Core.Messages.Queries.IQuery<Fossa.API.Web.ApiModels.PagingResponseModel<Fossa.API.Web.ApiModels.BranchRetrievalModel>>, Fossa.API.Web.Messages.Queries.IPagingApiQuery, Fossa.API.Web.Messages.Queries.IPagingApiQuery<Fossa.API.Web.ApiModels.BranchRetrievalModel>, MediatR.IBaseRequest, MediatR.IRequest<Fossa.API.Web.ApiModels.PagingResponseModel<Fossa.API.Web.ApiModels.BranchRetrievalModel>>, System.IEquatable<Fossa.API.Web.Messages.Queries.BranchPagingApiQuery>
    {
        public BranchPagingApiQuery(System.Collections.Generic.IReadOnlyList<long>? Id, string? Search, int? PageNumber, int? PageSize) { }
        public System.Collections.Generic.IReadOnlyList<long>? Id { get; init; }
        public int? PageNumber { get; init; }
        public int? PageSize { get; init; }
        public string? Search { get; init; }
    }
    public class BranchPagingApiQueryHandler : Fossa.API.Web.Messages.ApiMessageHandler<Fossa.API.Core.Entities.BranchId, Fossa.API.Web.Messages.Queries.BranchPagingApiQuery, Fossa.API.Web.ApiModels.PagingResponseModel<Fossa.API.Web.ApiModels.BranchRetrievalModel>, Fossa.API.Core.Messages.Queries.BranchListingQuery, LanguageExt.Seq<Fossa.API.Core.Entities.BranchEntity>, Fossa.API.Core.Messages.Queries.BranchPagingQuery, TIKSN.Data.PageResult<Fossa.API.Core.Entities.BranchEntity>>
    {
        public BranchPagingApiQueryHandler(TIKSN.Mapping.IMapper<TIKSN.Data.PageResult<Fossa.API.Core.Entities.BranchEntity>, Fossa.API.Web.ApiModels.PagingResponseModel<Fossa.API.Web.ApiModels.BranchRetrievalModel>> pagingMapper, TIKSN.Mapping.IMapper<LanguageExt.Seq<Fossa.API.Core.Entities.BranchEntity>, Fossa.API.Web.ApiModels.PagingResponseModel<Fossa.API.Web.ApiModels.BranchRetrievalModel>> listingMapper, MediatR.ISender sender, Fossa.API.Core.Tenant.ITenantIdProvider<System.Guid> tenantIdProvider, Fossa.API.Core.User.IUserIdProvider<System.Guid> userIdProvider, TIKSN.Mapping.IMapper<Fossa.API.Core.Entities.BranchId, long> domainIdentityToDataIdentityMapper, TIKSN.Mapping.IMapper<long, Fossa.API.Core.Entities.BranchId> dataIdentityToDomainIdentityMapper) { }
        protected override Fossa.API.Web.ApiModels.PagingResponseModel<Fossa.API.Web.ApiModels.BranchRetrievalModel> MapToApiResponse(LanguageExt.Seq<Fossa.API.Core.Entities.BranchEntity> domainResponse) { }
        protected override Fossa.API.Web.ApiModels.PagingResponseModel<Fossa.API.Web.ApiModels.BranchRetrievalModel> MapToApiResponse(TIKSN.Data.PageResult<Fossa.API.Core.Entities.BranchEntity> domainResponse) { }
        protected override LanguageExt.Either<Fossa.API.Core.Messages.Queries.BranchListingQuery, Fossa.API.Core.Messages.Queries.BranchPagingQuery> MapToDomainRequest(Fossa.API.Web.Messages.Queries.BranchPagingApiQuery apiRequest) { }
    }
    public class BranchRetrievalApiQuery : Fossa.API.Core.Messages.Queries.IQuery<Fossa.API.Web.ApiModels.BranchRetrievalModel>, MediatR.IBaseRequest, MediatR.IRequest<Fossa.API.Web.ApiModels.BranchRetrievalModel>, System.IEquatable<Fossa.API.Web.Messages.Queries.BranchRetrievalApiQuery>
    {
        public BranchRetrievalApiQuery(long Id) { }
        public long Id { get; init; }
    }
    public class BranchRetrievalApiQueryHandler : Fossa.API.Web.Messages.ApiMessageHandler<Fossa.API.Core.Entities.BranchId, Fossa.API.Web.Messages.Queries.BranchRetrievalApiQuery, Fossa.API.Web.ApiModels.BranchRetrievalModel, Fossa.API.Core.Messages.Queries.BranchRetrievalQuery, Fossa.API.Core.Entities.BranchEntity>
    {
        public BranchRetrievalApiQueryHandler(TIKSN.Mapping.IMapper<Fossa.API.Core.Entities.BranchEntity, Fossa.API.Web.ApiModels.BranchRetrievalModel> domainResponseToApiResponseMapper, MediatR.ISender sender, Fossa.API.Core.Tenant.ITenantIdProvider<System.Guid> tenantIdProvider, Fossa.API.Core.User.IUserIdProvider<System.Guid> userIdProvider, TIKSN.Mapping.IMapper<Fossa.API.Core.Entities.BranchId, long> domainIdentityToDataIdentityMapper, TIKSN.Mapping.IMapper<long, Fossa.API.Core.Entities.BranchId> dataIdentityToDomainIdentityMapper) { }
        protected override Fossa.API.Web.ApiModels.BranchRetrievalModel MapToApiResponse(Fossa.API.Core.Entities.BranchEntity domainResponse) { }
        protected override Fossa.API.Core.Messages.Queries.BranchRetrievalQuery MapToDomainRequest(Fossa.API.Web.Messages.Queries.BranchRetrievalApiQuery apiRequest) { }
    }
    public class CompanyRetrievalApiQuery : Fossa.API.Core.Messages.Queries.IQuery<Fossa.API.Web.ApiModels.CompanyRetrievalModel>, MediatR.IBaseRequest, MediatR.IRequest<Fossa.API.Web.ApiModels.CompanyRetrievalModel>, System.IEquatable<Fossa.API.Web.Messages.Queries.CompanyRetrievalApiQuery>
    {
        public CompanyRetrievalApiQuery() { }
    }
    public class CompanyRetrievalApiQueryHandler : Fossa.API.Web.Messages.ApiMessageHandler<Fossa.API.Core.Entities.CompanyId, Fossa.API.Web.Messages.Queries.CompanyRetrievalApiQuery, Fossa.API.Web.ApiModels.CompanyRetrievalModel, Fossa.API.Core.Messages.Queries.CompanyRetrievalQuery, Fossa.API.Core.Entities.CompanyEntity>
    {
        public CompanyRetrievalApiQueryHandler(TIKSN.Mapping.IMapper<Fossa.API.Core.Entities.CompanyEntity, Fossa.API.Web.ApiModels.CompanyRetrievalModel> domainResponseToApiResponseMapper, MediatR.ISender sender, Fossa.API.Core.Tenant.ITenantIdProvider<System.Guid> tenantIdProvider, Fossa.API.Core.User.IUserIdProvider<System.Guid> userIdProvider, TIKSN.Mapping.IMapper<Fossa.API.Core.Entities.CompanyId, long> domainIdentityToDataIdentityMapper, TIKSN.Mapping.IMapper<long, Fossa.API.Core.Entities.CompanyId> dataIdentityToDomainIdentityMapper) { }
        protected override Fossa.API.Web.ApiModels.CompanyRetrievalModel MapToApiResponse(Fossa.API.Core.Entities.CompanyEntity domainResponse) { }
        protected override Fossa.API.Core.Messages.Queries.CompanyRetrievalQuery MapToDomainRequest(Fossa.API.Web.Messages.Queries.CompanyRetrievalApiQuery apiRequest) { }
    }
    public class CompanySettingsRetrievalApiQuery : Fossa.API.Core.Messages.Queries.IQuery<Fossa.API.Web.ApiModels.CompanySettingsRetrievalModel>, MediatR.IBaseRequest, MediatR.IRequest<Fossa.API.Web.ApiModels.CompanySettingsRetrievalModel>, System.IEquatable<Fossa.API.Web.Messages.Queries.CompanySettingsRetrievalApiQuery>
    {
        public CompanySettingsRetrievalApiQuery() { }
    }
    public class CompanySettingsRetrievalApiQueryHandler : Fossa.API.Web.Messages.ApiMessageHandler<Fossa.API.Core.Entities.CompanySettingsId, Fossa.API.Web.Messages.Queries.CompanySettingsRetrievalApiQuery, Fossa.API.Web.ApiModels.CompanySettingsRetrievalModel, Fossa.API.Core.Messages.Queries.CompanySettingsRetrievalQuery, Fossa.API.Core.Entities.CompanySettingsEntity>
    {
        public CompanySettingsRetrievalApiQueryHandler(MediatR.ISender sender, Fossa.API.Core.Tenant.ITenantIdProvider<System.Guid> tenantIdProvider, Fossa.API.Core.User.IUserIdProvider<System.Guid> userIdProvider, TIKSN.Mapping.IMapper<Fossa.API.Core.Entities.CompanySettingsId, long> domainIdentityToDataIdentityMapper, TIKSN.Mapping.IMapper<long, Fossa.API.Core.Entities.CompanySettingsId> dataIdentityToDomainIdentityMapper, TIKSN.Mapping.IMapper<Fossa.API.Core.Entities.CompanySettingsEntity, Fossa.API.Web.ApiModels.CompanySettingsRetrievalModel> domainResponseToApiResponseMapper) { }
        protected override Fossa.API.Web.ApiModels.CompanySettingsRetrievalModel MapToApiResponse(Fossa.API.Core.Entities.CompanySettingsEntity domainResponse) { }
        protected override Fossa.API.Core.Messages.Queries.CompanySettingsRetrievalQuery MapToDomainRequest(Fossa.API.Web.Messages.Queries.CompanySettingsRetrievalApiQuery apiRequest) { }
    }
    public class CurrentEmployeeRetrievalApiQuery : Fossa.API.Core.Messages.Queries.IQuery<Fossa.API.Web.ApiModels.EmployeeRetrievalModel>, MediatR.IBaseRequest, MediatR.IRequest<Fossa.API.Web.ApiModels.EmployeeRetrievalModel>, System.IEquatable<Fossa.API.Web.Messages.Queries.CurrentEmployeeRetrievalApiQuery>
    {
        public CurrentEmployeeRetrievalApiQuery() { }
    }
    public class CurrentEmployeeRetrievalApiQueryHandler : Fossa.API.Web.Messages.ApiMessageHandler<Fossa.API.Core.Entities.EmployeeId, Fossa.API.Web.Messages.Queries.CurrentEmployeeRetrievalApiQuery, Fossa.API.Web.ApiModels.EmployeeRetrievalModel, Fossa.API.Core.Messages.Queries.CurrentEmployeeRetrievalQuery, Fossa.API.Core.Entities.EmployeeEntity>
    {
        public CurrentEmployeeRetrievalApiQueryHandler(TIKSN.Mapping.IMapper<Fossa.API.Core.Entities.EmployeeEntity, Fossa.API.Web.ApiModels.EmployeeRetrievalModel> domainResponseToApiResponseMapper, MediatR.ISender sender, Fossa.API.Core.Tenant.ITenantIdProvider<System.Guid> tenantIdProvider, Fossa.API.Core.User.IUserIdProvider<System.Guid> userIdProvider, TIKSN.Mapping.IMapper<Fossa.API.Core.Entities.EmployeeId, long> domainIdentityToDataIdentityMapper, TIKSN.Mapping.IMapper<long, Fossa.API.Core.Entities.EmployeeId> dataIdentityToDomainIdentityMapper) { }
        protected override Fossa.API.Web.ApiModels.EmployeeRetrievalModel MapToApiResponse(Fossa.API.Core.Entities.EmployeeEntity domainResponse) { }
        protected override Fossa.API.Core.Messages.Queries.CurrentEmployeeRetrievalQuery MapToDomainRequest(Fossa.API.Web.Messages.Queries.CurrentEmployeeRetrievalApiQuery apiRequest) { }
    }
    public class DepartmentPagingApiQuery : Fossa.API.Core.Messages.Queries.IQuery<Fossa.API.Web.ApiModels.PagingResponseModel<Fossa.API.Web.ApiModels.DepartmentRetrievalModel>>, Fossa.API.Web.Messages.Queries.IPagingApiQuery, Fossa.API.Web.Messages.Queries.IPagingApiQuery<Fossa.API.Web.ApiModels.DepartmentRetrievalModel>, MediatR.IBaseRequest, MediatR.IRequest<Fossa.API.Web.ApiModels.PagingResponseModel<Fossa.API.Web.ApiModels.DepartmentRetrievalModel>>, System.IEquatable<Fossa.API.Web.Messages.Queries.DepartmentPagingApiQuery>
    {
        public DepartmentPagingApiQuery(System.Collections.Generic.IReadOnlyList<long>? Id, string? Search, int? PageNumber, int? PageSize) { }
        public System.Collections.Generic.IReadOnlyList<long>? Id { get; init; }
        public int? PageNumber { get; init; }
        public int? PageSize { get; init; }
        public string? Search { get; init; }
    }
    public class DepartmentPagingApiQueryHandler : Fossa.API.Web.Messages.ApiMessageHandler<Fossa.API.Core.Entities.DepartmentId, Fossa.API.Web.Messages.Queries.DepartmentPagingApiQuery, Fossa.API.Web.ApiModels.PagingResponseModel<Fossa.API.Web.ApiModels.DepartmentRetrievalModel>, Fossa.API.Core.Messages.Queries.DepartmentListingQuery, LanguageExt.Seq<Fossa.API.Core.Entities.DepartmentEntity>, Fossa.API.Core.Messages.Queries.DepartmentPagingQuery, TIKSN.Data.PageResult<Fossa.API.Core.Entities.DepartmentEntity>>
    {
        public DepartmentPagingApiQueryHandler(TIKSN.Mapping.IMapper<TIKSN.Data.PageResult<Fossa.API.Core.Entities.DepartmentEntity>, Fossa.API.Web.ApiModels.PagingResponseModel<Fossa.API.Web.ApiModels.DepartmentRetrievalModel>> pagingMapper, TIKSN.Mapping.IMapper<LanguageExt.Seq<Fossa.API.Core.Entities.DepartmentEntity>, Fossa.API.Web.ApiModels.PagingResponseModel<Fossa.API.Web.ApiModels.DepartmentRetrievalModel>> listingMapper, MediatR.ISender sender, Fossa.API.Core.Tenant.ITenantIdProvider<System.Guid> tenantIdProvider, Fossa.API.Core.User.IUserIdProvider<System.Guid> userIdProvider, TIKSN.Mapping.IMapper<Fossa.API.Core.Entities.DepartmentId, long> domainIdentityToDataIdentityMapper, TIKSN.Mapping.IMapper<long, Fossa.API.Core.Entities.DepartmentId> dataIdentityToDomainIdentityMapper) { }
        protected override Fossa.API.Web.ApiModels.PagingResponseModel<Fossa.API.Web.ApiModels.DepartmentRetrievalModel> MapToApiResponse(LanguageExt.Seq<Fossa.API.Core.Entities.DepartmentEntity> domainResponse) { }
        protected override Fossa.API.Web.ApiModels.PagingResponseModel<Fossa.API.Web.ApiModels.DepartmentRetrievalModel> MapToApiResponse(TIKSN.Data.PageResult<Fossa.API.Core.Entities.DepartmentEntity> domainResponse) { }
        protected override LanguageExt.Either<Fossa.API.Core.Messages.Queries.DepartmentListingQuery, Fossa.API.Core.Messages.Queries.DepartmentPagingQuery> MapToDomainRequest(Fossa.API.Web.Messages.Queries.DepartmentPagingApiQuery apiRequest) { }
    }
    public class DepartmentRetrievalApiQuery : Fossa.API.Core.Messages.Queries.IQuery<Fossa.API.Web.ApiModels.DepartmentRetrievalModel>, MediatR.IBaseRequest, MediatR.IRequest<Fossa.API.Web.ApiModels.DepartmentRetrievalModel>, System.IEquatable<Fossa.API.Web.Messages.Queries.DepartmentRetrievalApiQuery>
    {
        public DepartmentRetrievalApiQuery(long Id) { }
        public long Id { get; init; }
    }
    public class DepartmentRetrievalApiQueryHandler : Fossa.API.Web.Messages.ApiMessageHandler<Fossa.API.Core.Entities.DepartmentId, Fossa.API.Web.Messages.Queries.DepartmentRetrievalApiQuery, Fossa.API.Web.ApiModels.DepartmentRetrievalModel, Fossa.API.Core.Messages.Queries.DepartmentRetrievalQuery, Fossa.API.Core.Entities.DepartmentEntity>
    {
        public DepartmentRetrievalApiQueryHandler(TIKSN.Mapping.IMapper<Fossa.API.Core.Entities.DepartmentEntity, Fossa.API.Web.ApiModels.DepartmentRetrievalModel> domainResponseToApiResponseMapper, MediatR.ISender sender, Fossa.API.Core.Tenant.ITenantIdProvider<System.Guid> tenantIdProvider, Fossa.API.Core.User.IUserIdProvider<System.Guid> userIdProvider, TIKSN.Mapping.IMapper<Fossa.API.Core.Entities.DepartmentId, long> domainIdentityToDataIdentityMapper, TIKSN.Mapping.IMapper<long, Fossa.API.Core.Entities.DepartmentId> dataIdentityToDomainIdentityMapper) { }
        protected override Fossa.API.Web.ApiModels.DepartmentRetrievalModel MapToApiResponse(Fossa.API.Core.Entities.DepartmentEntity domainResponse) { }
        protected override Fossa.API.Core.Messages.Queries.DepartmentRetrievalQuery MapToDomainRequest(Fossa.API.Web.Messages.Queries.DepartmentRetrievalApiQuery apiRequest) { }
    }
    public class EmployeePagingApiQuery : Fossa.API.Core.Messages.Queries.IQuery<Fossa.API.Web.ApiModels.PagingResponseModel<Fossa.API.Web.ApiModels.EmployeeRetrievalModel>>, Fossa.API.Web.Messages.Queries.IPagingApiQuery, Fossa.API.Web.Messages.Queries.IPagingApiQuery<Fossa.API.Web.ApiModels.EmployeeRetrievalModel>, MediatR.IBaseRequest, MediatR.IRequest<Fossa.API.Web.ApiModels.PagingResponseModel<Fossa.API.Web.ApiModels.EmployeeRetrievalModel>>, System.IEquatable<Fossa.API.Web.Messages.Queries.EmployeePagingApiQuery>
    {
        public EmployeePagingApiQuery(System.Collections.Generic.IReadOnlyList<long>? Id, string? Search, long? ReportsToId, bool? TopLevelOnly, int? PageNumber, int? PageSize) { }
        public System.Collections.Generic.IReadOnlyList<long>? Id { get; init; }
        public int? PageNumber { get; init; }
        public int? PageSize { get; init; }
        public long? ReportsToId { get; init; }
        public string? Search { get; init; }
        public bool? TopLevelOnly { get; init; }
    }
    public class EmployeePagingApiQueryHandler : Fossa.API.Web.Messages.ApiMessageHandler<Fossa.API.Core.Entities.EmployeeId, Fossa.API.Web.Messages.Queries.EmployeePagingApiQuery, Fossa.API.Web.ApiModels.PagingResponseModel<Fossa.API.Web.ApiModels.EmployeeRetrievalModel>, Fossa.API.Core.Messages.Queries.EmployeeListingQuery, LanguageExt.Seq<Fossa.API.Core.Entities.EmployeeEntity>, Fossa.API.Core.Messages.Queries.EmployeePagingQuery, TIKSN.Data.PageResult<Fossa.API.Core.Entities.EmployeeEntity>>
    {
        public EmployeePagingApiQueryHandler(TIKSN.Mapping.IMapper<TIKSN.Data.PageResult<Fossa.API.Core.Entities.EmployeeEntity>, Fossa.API.Web.ApiModels.PagingResponseModel<Fossa.API.Web.ApiModels.EmployeeRetrievalModel>> pagingMapper, TIKSN.Mapping.IMapper<LanguageExt.Seq<Fossa.API.Core.Entities.EmployeeEntity>, Fossa.API.Web.ApiModels.PagingResponseModel<Fossa.API.Web.ApiModels.EmployeeRetrievalModel>> listingMapper, MediatR.ISender sender, Fossa.API.Core.Tenant.ITenantIdProvider<System.Guid> tenantIdProvider, Fossa.API.Core.User.IUserIdProvider<System.Guid> userIdProvider, TIKSN.Mapping.IMapper<Fossa.API.Core.Entities.EmployeeId, long> domainIdentityToDataIdentityMapper, TIKSN.Mapping.IMapper<long, Fossa.API.Core.Entities.EmployeeId> dataIdentityToDomainIdentityMapper) { }
        protected override Fossa.API.Web.ApiModels.PagingResponseModel<Fossa.API.Web.ApiModels.EmployeeRetrievalModel> MapToApiResponse(LanguageExt.Seq<Fossa.API.Core.Entities.EmployeeEntity> domainResponse) { }
        protected override Fossa.API.Web.ApiModels.PagingResponseModel<Fossa.API.Web.ApiModels.EmployeeRetrievalModel> MapToApiResponse(TIKSN.Data.PageResult<Fossa.API.Core.Entities.EmployeeEntity> domainResponse) { }
        protected override LanguageExt.Either<Fossa.API.Core.Messages.Queries.EmployeeListingQuery, Fossa.API.Core.Messages.Queries.EmployeePagingQuery> MapToDomainRequest(Fossa.API.Web.Messages.Queries.EmployeePagingApiQuery apiRequest) { }
    }
    public class EmployeeRetrievalApiQuery : Fossa.API.Core.Messages.Queries.IQuery<Fossa.API.Web.ApiModels.EmployeeRetrievalModel>, MediatR.IBaseRequest, MediatR.IRequest<Fossa.API.Web.ApiModels.EmployeeRetrievalModel>, System.IEquatable<Fossa.API.Web.Messages.Queries.EmployeeRetrievalApiQuery>
    {
        public EmployeeRetrievalApiQuery(long Id) { }
        public long Id { get; init; }
    }
    public class EmployeeRetrievalApiQueryHandler : Fossa.API.Web.Messages.ApiMessageHandler<Fossa.API.Core.Entities.EmployeeId, Fossa.API.Web.Messages.Queries.EmployeeRetrievalApiQuery, Fossa.API.Web.ApiModels.EmployeeRetrievalModel, Fossa.API.Core.Messages.Queries.EmployeeRetrievalQuery, Fossa.API.Core.Entities.EmployeeEntity>
    {
        public EmployeeRetrievalApiQueryHandler(TIKSN.Mapping.IMapper<Fossa.API.Core.Entities.EmployeeEntity, Fossa.API.Web.ApiModels.EmployeeRetrievalModel> domainResponseToApiResponseMapper, MediatR.ISender sender, Fossa.API.Core.Tenant.ITenantIdProvider<System.Guid> tenantIdProvider, Fossa.API.Core.User.IUserIdProvider<System.Guid> userIdProvider, TIKSN.Mapping.IMapper<Fossa.API.Core.Entities.EmployeeId, long> domainIdentityToDataIdentityMapper, TIKSN.Mapping.IMapper<long, Fossa.API.Core.Entities.EmployeeId> dataIdentityToDomainIdentityMapper) { }
        protected override Fossa.API.Web.ApiModels.EmployeeRetrievalModel MapToApiResponse(Fossa.API.Core.Entities.EmployeeEntity domainResponse) { }
        protected override Fossa.API.Core.Messages.Queries.EmployeeRetrievalQuery MapToDomainRequest(Fossa.API.Web.Messages.Queries.EmployeeRetrievalApiQuery apiRequest) { }
    }
    public interface IPagingApiQuery
    {
        int? PageNumber { get; }
        int? PageSize { get; }
    }
    public interface IPagingApiQuery<TRetrievalModel> : Fossa.API.Core.Messages.Queries.IQuery<Fossa.API.Web.ApiModels.PagingResponseModel<TRetrievalModel>>, Fossa.API.Web.Messages.Queries.IPagingApiQuery, MediatR.IBaseRequest, MediatR.IRequest<Fossa.API.Web.ApiModels.PagingResponseModel<TRetrievalModel>> { }
}
namespace Fossa.API.Web.Validators
{
    public class PagingApiQueryValidator : FluentValidation.AbstractValidator<Fossa.API.Web.Messages.Queries.IPagingApiQuery>
    {
        public PagingApiQueryValidator() { }
    }
}