namespace Fossa.API.Core
{
    public class DefaultCoreModule : Autofac.Module
    {
        public DefaultCoreModule() { }
        protected override void Load(Autofac.ContainerBuilder builder) { }
    }
}
namespace Fossa.API.Core.Entities
{
    public class Address : System.IEquatable<Fossa.API.Core.Entities.Address>
    {
        public Address(string Line1, LanguageExt.Option<string> Line2, string City, string Subdivision, string PostalCode, System.Globalization.RegionInfo Country) { }
        public string City { get; init; }
        public System.Globalization.RegionInfo Country { get; init; }
        public string Line1 { get; init; }
        public LanguageExt.Option<string> Line2 { get; init; }
        public string PostalCode { get; init; }
        public string Subdivision { get; init; }
    }
    public class BranchEntity : System.IEquatable<Fossa.API.Core.Entities.BranchEntity>, TIKSN.Data.IEntity<Fossa.API.Core.Entities.BranchId>, TIKSN.Data.ITenantEntity<Fossa.API.Core.Entities.BranchId, System.Guid>
    {
        public BranchEntity(Fossa.API.Core.Entities.BranchId ID, System.Guid TenantID, Fossa.API.Core.Entities.CompanyId CompanyId, string Name, NodaTime.DateTimeZone TimeZone, LanguageExt.Option<Fossa.API.Core.Entities.Address> Address) { }
        public LanguageExt.Option<Fossa.API.Core.Entities.Address> Address { get; init; }
        public Fossa.API.Core.Entities.CompanyId CompanyId { get; init; }
        public Fossa.API.Core.Entities.BranchId ID { get; init; }
        public string Name { get; init; }
        public System.Guid TenantID { get; init; }
        public NodaTime.DateTimeZone TimeZone { get; init; }
    }
    [System.ComponentModel.TypeConverter(typeof(Fossa.API.Core.Entities.BranchId.BranchIdTypeConverter))]
    public readonly struct BranchId : System.IEquatable<Fossa.API.Core.Entities.BranchId>, System.IFormattable, System.ISpanFormattable, System.IUtf8SpanFormattable, System.Numerics.IEqualityOperators<Fossa.API.Core.Entities.BranchId, Fossa.API.Core.Entities.BranchId, bool>
    {
        public BranchId(long value) { }
        public long AsPrimitive() { }
        public bool Equals(Fossa.API.Core.Entities.BranchId other) { }
        public override bool Equals(object obj) { }
        public override int GetHashCode() { }
        public override string ToString() { }
        public string ToString(string? format, System.IFormatProvider? formatProvider) { }
        public bool TryFormat(System.Span<byte> utf8Destination, out int bytesWritten, System.ReadOnlySpan<char> format, System.IFormatProvider? provider) { }
        public bool TryFormat(System.Span<char> destination, out int charsWritten, System.ReadOnlySpan<char> format, System.IFormatProvider? provider) { }
        public static long op_Explicit(Fossa.API.Core.Entities.BranchId value) { }
        public static Fossa.API.Core.Entities.BranchId op_Explicit(long value) { }
        public static bool operator !=(Fossa.API.Core.Entities.BranchId x, Fossa.API.Core.Entities.BranchId y) { }
        public static bool operator ==(Fossa.API.Core.Entities.BranchId x, Fossa.API.Core.Entities.BranchId y) { }
    }
    [System.ComponentModel.TypeConverter(typeof(Fossa.API.Core.Entities.ColorSchemeId.ColorSchemeIdTypeConverter))]
    public readonly struct ColorSchemeId : System.IEquatable<Fossa.API.Core.Entities.ColorSchemeId>, System.Numerics.IEqualityOperators<Fossa.API.Core.Entities.ColorSchemeId, Fossa.API.Core.Entities.ColorSchemeId, bool>
    {
        public ColorSchemeId(string value) { }
        public string AsPrimitive() { }
        public bool Equals(Fossa.API.Core.Entities.ColorSchemeId other) { }
        public override bool Equals(object obj) { }
        public override int GetHashCode() { }
        public override string ToString() { }
        public static string op_Explicit(Fossa.API.Core.Entities.ColorSchemeId value) { }
        public static Fossa.API.Core.Entities.ColorSchemeId op_Explicit(string value) { }
        public static bool operator !=(Fossa.API.Core.Entities.ColorSchemeId x, Fossa.API.Core.Entities.ColorSchemeId y) { }
        public static bool operator ==(Fossa.API.Core.Entities.ColorSchemeId x, Fossa.API.Core.Entities.ColorSchemeId y) { }
    }
    public class CompanyEntity : System.IEquatable<Fossa.API.Core.Entities.CompanyEntity>, TIKSN.Data.IEntity<Fossa.API.Core.Entities.CompanyId>, TIKSN.Data.ITenantEntity<Fossa.API.Core.Entities.CompanyId, System.Guid>
    {
        public CompanyEntity(Fossa.API.Core.Entities.CompanyId ID, System.Guid TenantID, string Name, System.Globalization.RegionInfo Country) { }
        public System.Globalization.RegionInfo Country { get; init; }
        public Fossa.API.Core.Entities.CompanyId ID { get; init; }
        public string Name { get; init; }
        public System.Guid TenantID { get; init; }
    }
    [System.ComponentModel.TypeConverter(typeof(Fossa.API.Core.Entities.CompanyId.CompanyIdTypeConverter))]
    public readonly struct CompanyId : System.IEquatable<Fossa.API.Core.Entities.CompanyId>, System.IFormattable, System.ISpanFormattable, System.IUtf8SpanFormattable, System.Numerics.IEqualityOperators<Fossa.API.Core.Entities.CompanyId, Fossa.API.Core.Entities.CompanyId, bool>
    {
        public CompanyId(long value) { }
        public long AsPrimitive() { }
        public bool Equals(Fossa.API.Core.Entities.CompanyId other) { }
        public override bool Equals(object obj) { }
        public override int GetHashCode() { }
        public override string ToString() { }
        public string ToString(string? format, System.IFormatProvider? formatProvider) { }
        public bool TryFormat(System.Span<byte> utf8Destination, out int bytesWritten, System.ReadOnlySpan<char> format, System.IFormatProvider? provider) { }
        public bool TryFormat(System.Span<char> destination, out int charsWritten, System.ReadOnlySpan<char> format, System.IFormatProvider? provider) { }
        public static long op_Explicit(Fossa.API.Core.Entities.CompanyId value) { }
        public static Fossa.API.Core.Entities.CompanyId op_Explicit(long value) { }
        public static bool operator !=(Fossa.API.Core.Entities.CompanyId x, Fossa.API.Core.Entities.CompanyId y) { }
        public static bool operator ==(Fossa.API.Core.Entities.CompanyId x, Fossa.API.Core.Entities.CompanyId y) { }
    }
    public class CompanySettingsEntity : System.IEquatable<Fossa.API.Core.Entities.CompanySettingsEntity>, TIKSN.Data.IEntity<Fossa.API.Core.Entities.CompanySettingsId>
    {
        public CompanySettingsEntity(Fossa.API.Core.Entities.CompanySettingsId ID, Fossa.API.Core.Entities.CompanyId CompanyId, Fossa.API.Core.Entities.ColorSchemeId ColorSchemeId) { }
        public Fossa.API.Core.Entities.ColorSchemeId ColorSchemeId { get; init; }
        public Fossa.API.Core.Entities.CompanyId CompanyId { get; init; }
        public Fossa.API.Core.Entities.CompanySettingsId ID { get; init; }
    }
    [System.ComponentModel.TypeConverter(typeof(Fossa.API.Core.Entities.CompanySettingsId.CompanySettingsIdTypeConverter))]
    public readonly struct CompanySettingsId : System.IEquatable<Fossa.API.Core.Entities.CompanySettingsId>, System.IFormattable, System.ISpanFormattable, System.IUtf8SpanFormattable, System.Numerics.IEqualityOperators<Fossa.API.Core.Entities.CompanySettingsId, Fossa.API.Core.Entities.CompanySettingsId, bool>
    {
        public CompanySettingsId(long value) { }
        public long AsPrimitive() { }
        public bool Equals(Fossa.API.Core.Entities.CompanySettingsId other) { }
        public override bool Equals(object obj) { }
        public override int GetHashCode() { }
        public override string ToString() { }
        public string ToString(string? format, System.IFormatProvider? formatProvider) { }
        public bool TryFormat(System.Span<byte> utf8Destination, out int bytesWritten, System.ReadOnlySpan<char> format, System.IFormatProvider? provider) { }
        public bool TryFormat(System.Span<char> destination, out int charsWritten, System.ReadOnlySpan<char> format, System.IFormatProvider? provider) { }
        public static long op_Explicit(Fossa.API.Core.Entities.CompanySettingsId value) { }
        public static Fossa.API.Core.Entities.CompanySettingsId op_Explicit(long value) { }
        public static bool operator !=(Fossa.API.Core.Entities.CompanySettingsId x, Fossa.API.Core.Entities.CompanySettingsId y) { }
        public static bool operator ==(Fossa.API.Core.Entities.CompanySettingsId x, Fossa.API.Core.Entities.CompanySettingsId y) { }
    }
    public class DepartmentEntity : System.IEquatable<Fossa.API.Core.Entities.DepartmentEntity>, TIKSN.Data.IEntity<Fossa.API.Core.Entities.DepartmentId>, TIKSN.Data.ITenantEntity<Fossa.API.Core.Entities.DepartmentId, System.Guid>
    {
        public DepartmentEntity(Fossa.API.Core.Entities.DepartmentId ID, System.Guid TenantID, Fossa.API.Core.Entities.CompanyId CompanyId, string Name, Fossa.API.Core.Entities.EmployeeId ManagerId, LanguageExt.Option<Fossa.API.Core.Entities.DepartmentId> ParentDepartmentId) { }
        public Fossa.API.Core.Entities.CompanyId CompanyId { get; init; }
        public Fossa.API.Core.Entities.DepartmentId ID { get; init; }
        public Fossa.API.Core.Entities.EmployeeId ManagerId { get; init; }
        public string Name { get; init; }
        public LanguageExt.Option<Fossa.API.Core.Entities.DepartmentId> ParentDepartmentId { get; init; }
        public System.Guid TenantID { get; init; }
    }
    [System.ComponentModel.TypeConverter(typeof(Fossa.API.Core.Entities.DepartmentId.DepartmentIdTypeConverter))]
    public readonly struct DepartmentId : System.IEquatable<Fossa.API.Core.Entities.DepartmentId>, System.IFormattable, System.ISpanFormattable, System.IUtf8SpanFormattable, System.Numerics.IEqualityOperators<Fossa.API.Core.Entities.DepartmentId, Fossa.API.Core.Entities.DepartmentId, bool>
    {
        public DepartmentId(long value) { }
        public long AsPrimitive() { }
        public bool Equals(Fossa.API.Core.Entities.DepartmentId other) { }
        public override bool Equals(object obj) { }
        public override int GetHashCode() { }
        public override string ToString() { }
        public string ToString(string? format, System.IFormatProvider? formatProvider) { }
        public bool TryFormat(System.Span<byte> utf8Destination, out int bytesWritten, System.ReadOnlySpan<char> format, System.IFormatProvider? provider) { }
        public bool TryFormat(System.Span<char> destination, out int charsWritten, System.ReadOnlySpan<char> format, System.IFormatProvider? provider) { }
        public static long op_Explicit(Fossa.API.Core.Entities.DepartmentId value) { }
        public static Fossa.API.Core.Entities.DepartmentId op_Explicit(long value) { }
        public static bool operator !=(Fossa.API.Core.Entities.DepartmentId x, Fossa.API.Core.Entities.DepartmentId y) { }
        public static bool operator ==(Fossa.API.Core.Entities.DepartmentId x, Fossa.API.Core.Entities.DepartmentId y) { }
    }
    public class EmployeeEntity : System.IEquatable<Fossa.API.Core.Entities.EmployeeEntity>, TIKSN.Data.IEntity<Fossa.API.Core.Entities.EmployeeId>, TIKSN.Data.ITenantEntity<Fossa.API.Core.Entities.EmployeeId, System.Guid>, TIKSN.Data.IUserEntity<Fossa.API.Core.Entities.EmployeeId, System.Guid>
    {
        public EmployeeEntity(Fossa.API.Core.Entities.EmployeeId ID, System.Guid TenantID, System.Guid UserID, Fossa.API.Core.Entities.CompanyId CompanyId, LanguageExt.Option<Fossa.API.Core.Entities.BranchId> AssignedBranchId, LanguageExt.Option<Fossa.API.Core.Entities.DepartmentId> AssignedDepartmentId, string FirstName, string LastName, string FullName) { }
        public LanguageExt.Option<Fossa.API.Core.Entities.BranchId> AssignedBranchId { get; init; }
        public LanguageExt.Option<Fossa.API.Core.Entities.DepartmentId> AssignedDepartmentId { get; init; }
        public Fossa.API.Core.Entities.CompanyId CompanyId { get; init; }
        public string FirstName { get; init; }
        public string FullName { get; init; }
        public Fossa.API.Core.Entities.EmployeeId ID { get; init; }
        public string LastName { get; init; }
        public System.Guid TenantID { get; init; }
        public System.Guid UserID { get; init; }
    }
    [System.ComponentModel.TypeConverter(typeof(Fossa.API.Core.Entities.EmployeeId.EmployeeIdTypeConverter))]
    public readonly struct EmployeeId : System.IEquatable<Fossa.API.Core.Entities.EmployeeId>, System.IFormattable, System.ISpanFormattable, System.IUtf8SpanFormattable, System.Numerics.IEqualityOperators<Fossa.API.Core.Entities.EmployeeId, Fossa.API.Core.Entities.EmployeeId, bool>
    {
        public EmployeeId(long value) { }
        public long AsPrimitive() { }
        public bool Equals(Fossa.API.Core.Entities.EmployeeId other) { }
        public override bool Equals(object obj) { }
        public override int GetHashCode() { }
        public override string ToString() { }
        public string ToString(string? format, System.IFormatProvider? formatProvider) { }
        public bool TryFormat(System.Span<byte> utf8Destination, out int bytesWritten, System.ReadOnlySpan<char> format, System.IFormatProvider? provider) { }
        public bool TryFormat(System.Span<char> destination, out int charsWritten, System.ReadOnlySpan<char> format, System.IFormatProvider? provider) { }
        public static long op_Explicit(Fossa.API.Core.Entities.EmployeeId value) { }
        public static Fossa.API.Core.Entities.EmployeeId op_Explicit(long value) { }
        public static bool operator !=(Fossa.API.Core.Entities.EmployeeId x, Fossa.API.Core.Entities.EmployeeId y) { }
        public static bool operator ==(Fossa.API.Core.Entities.EmployeeId x, Fossa.API.Core.Entities.EmployeeId y) { }
    }
    public class SystemPropertiesEntity : System.IEquatable<Fossa.API.Core.Entities.SystemPropertiesEntity>, TIKSN.Data.IEntity<Fossa.API.Core.Entities.SystemPropertiesId>
    {
        public SystemPropertiesEntity(Fossa.API.Core.Entities.SystemPropertiesId ID, System.Ulid SystemID) { }
        public Fossa.API.Core.Entities.SystemPropertiesId ID { get; init; }
        public System.Ulid SystemID { get; init; }
    }
    [System.ComponentModel.TypeConverter(typeof(Fossa.API.Core.Entities.SystemPropertiesId.SystemPropertiesIdTypeConverter))]
    public readonly struct SystemPropertiesId : System.IEquatable<Fossa.API.Core.Entities.SystemPropertiesId>, System.IFormattable, System.ISpanFormattable, System.IUtf8SpanFormattable, System.Numerics.IEqualityOperators<Fossa.API.Core.Entities.SystemPropertiesId, Fossa.API.Core.Entities.SystemPropertiesId, bool>
    {
        public SystemPropertiesId(long value) { }
        public long AsPrimitive() { }
        public bool Equals(Fossa.API.Core.Entities.SystemPropertiesId other) { }
        public override bool Equals(object obj) { }
        public override int GetHashCode() { }
        public override string ToString() { }
        public string ToString(string? format, System.IFormatProvider? formatProvider) { }
        public bool TryFormat(System.Span<byte> utf8Destination, out int bytesWritten, System.ReadOnlySpan<char> format, System.IFormatProvider? provider) { }
        public bool TryFormat(System.Span<char> destination, out int charsWritten, System.ReadOnlySpan<char> format, System.IFormatProvider? provider) { }
        public static long op_Explicit(Fossa.API.Core.Entities.SystemPropertiesId value) { }
        public static Fossa.API.Core.Entities.SystemPropertiesId op_Explicit(long value) { }
        public static bool operator !=(Fossa.API.Core.Entities.SystemPropertiesId x, Fossa.API.Core.Entities.SystemPropertiesId y) { }
        public static bool operator ==(Fossa.API.Core.Entities.SystemPropertiesId x, Fossa.API.Core.Entities.SystemPropertiesId y) { }
    }
}
namespace Fossa.API.Core.Extensions
{
    public static class ParserResultExtensions
    {
        public static T GetOrThrow<T>(this LanguageExt.Parsec.ParserResult<T> parserResult) { }
    }
    public static class RelationshipGraphExtensions
    {
        public static System.Threading.Tasks.Task ThrowIfHasDependentEntitiesAsync<T>(this Fossa.API.Core.Relationship.IRelationshipGraph relationshipGraph, T id, System.Threading.CancellationToken cancellationToken)
            where T : System.IEquatable<T> { }
    }
    public static class ValidationExtensions
    {
        public static T GetOrThrow<T>(this LanguageExt.Validation<LanguageExt.Common.Error, T> validation) { }
    }
    public static class ValidatorExtensions
    {
        public static FluentValidation.IRuleBuilderOptions<T, LanguageExt.Option<TProperty>> IfSome<T, TProperty>(this FluentValidation.IRuleBuilder<T, LanguageExt.Option<TProperty>> ruleBuilder, FluentValidation.IValidator<TProperty> validator) { }
    }
}
namespace Fossa.API.Core.Mappers
{
    public class BranchIdMapper : TIKSN.Mapping.IMapper<Fossa.API.Core.Entities.BranchId, long>, TIKSN.Mapping.IMapper<long, Fossa.API.Core.Entities.BranchId>
    {
        public BranchIdMapper() { }
        public long Map(Fossa.API.Core.Entities.BranchId source) { }
        public Fossa.API.Core.Entities.BranchId Map(long source) { }
    }
    public class ColorSchemeIdMapper : TIKSN.Mapping.IMapper<Fossa.API.Core.Entities.ColorSchemeId, string>, TIKSN.Mapping.IMapper<string, Fossa.API.Core.Entities.ColorSchemeId>
    {
        public ColorSchemeIdMapper() { }
        public string Map(Fossa.API.Core.Entities.ColorSchemeId source) { }
        public Fossa.API.Core.Entities.ColorSchemeId Map(string source) { }
    }
    public class CompanyIdMapper : TIKSN.Mapping.IMapper<Fossa.API.Core.Entities.CompanyId, long>, TIKSN.Mapping.IMapper<long, Fossa.API.Core.Entities.CompanyId>
    {
        public CompanyIdMapper() { }
        public long Map(Fossa.API.Core.Entities.CompanyId source) { }
        public Fossa.API.Core.Entities.CompanyId Map(long source) { }
    }
    public class CompanySettingsIdMapper : TIKSN.Mapping.IMapper<Fossa.API.Core.Entities.CompanySettingsId, long>, TIKSN.Mapping.IMapper<long, Fossa.API.Core.Entities.CompanySettingsId>
    {
        public CompanySettingsIdMapper() { }
        public long Map(Fossa.API.Core.Entities.CompanySettingsId source) { }
        public Fossa.API.Core.Entities.CompanySettingsId Map(long source) { }
    }
    public class DepartmentIdMapper : TIKSN.Mapping.IMapper<Fossa.API.Core.Entities.DepartmentId, long>, TIKSN.Mapping.IMapper<long, Fossa.API.Core.Entities.DepartmentId>
    {
        public DepartmentIdMapper() { }
        public long Map(Fossa.API.Core.Entities.DepartmentId source) { }
        public Fossa.API.Core.Entities.DepartmentId Map(long source) { }
    }
    public class EmployeeIdMapper : TIKSN.Mapping.IMapper<Fossa.API.Core.Entities.EmployeeId, long>, TIKSN.Mapping.IMapper<long, Fossa.API.Core.Entities.EmployeeId>
    {
        public EmployeeIdMapper() { }
        public long Map(Fossa.API.Core.Entities.EmployeeId source) { }
        public Fossa.API.Core.Entities.EmployeeId Map(long source) { }
    }
    public class SystemPropertiesIdMapper : TIKSN.Mapping.IMapper<Fossa.API.Core.Entities.SystemPropertiesId, long>, TIKSN.Mapping.IMapper<long, Fossa.API.Core.Entities.SystemPropertiesId>
    {
        public SystemPropertiesIdMapper() { }
        public long Map(Fossa.API.Core.Entities.SystemPropertiesId source) { }
        public Fossa.API.Core.Entities.SystemPropertiesId Map(long source) { }
    }
}
namespace Fossa.API.Core.Messages
{
    public class AffectingEntity<TEntityIdentity> : System.IEquatable<Fossa.API.Core.Messages.AffectingEntity<TEntityIdentity>>
        where TEntityIdentity : System.IEquatable<TEntityIdentity>
    {
        public AffectingEntity(System.Type EntityType, TEntityIdentity EntityID) { }
        public TEntityIdentity EntityID { get; init; }
        public System.Type EntityType { get; init; }
    }
    public class CrossTenantInboundUnauthorizedAccessException : Fossa.API.Core.Messages.CrossTenantUnauthorizedAccessException
    {
        public CrossTenantInboundUnauthorizedAccessException() { }
        public CrossTenantInboundUnauthorizedAccessException(string message) { }
        public CrossTenantInboundUnauthorizedAccessException(string message, System.Exception inner) { }
    }
    public class CrossTenantOutboundUnauthorizedAccessException : Fossa.API.Core.Messages.CrossTenantUnauthorizedAccessException
    {
        public CrossTenantOutboundUnauthorizedAccessException() { }
        public CrossTenantOutboundUnauthorizedAccessException(string message) { }
        public CrossTenantOutboundUnauthorizedAccessException(string message, System.Exception inner) { }
    }
    public class CrossTenantUnauthorizedAccessException : System.Exception
    {
        public CrossTenantUnauthorizedAccessException() { }
        public CrossTenantUnauthorizedAccessException(string message) { }
        public CrossTenantUnauthorizedAccessException(string message, System.Exception inner) { }
    }
    public class FailedDependencyException : System.Exception
    {
        public FailedDependencyException() { }
        public FailedDependencyException(string message) { }
        public FailedDependencyException(string message, System.Exception inner) { }
    }
    public interface IAffectingTenantEntities<TEntityIdentity>
        where TEntityIdentity : System.IEquatable<TEntityIdentity>
    {
        System.Collections.Generic.IEnumerable<Fossa.API.Core.Messages.AffectingEntity<TEntityIdentity>> AffectingTenantEntities { get; }
    }
    public class PagingQueryBehavior<TRequest, TResponse> : MediatR.IPipelineBehavior<TRequest, TResponse>
        where TRequest : Fossa.API.Core.Messages.Queries.IPagingQuery
        where TResponse :  notnull
    {
        public PagingQueryBehavior(Microsoft.Extensions.Options.IOptions<Fossa.API.Core.Messages.PagingQueryOptions> options) { }
        public System.Threading.Tasks.Task<TResponse> Handle(TRequest request, MediatR.RequestHandlerDelegate<TResponse> next, System.Threading.CancellationToken cancellationToken) { }
    }
    public class PagingQueryOptions
    {
        public PagingQueryOptions() { }
        public int? MaximumPageSize { get; set; }
    }
    public class TenantRequestBehavior<TEntityIdentity, TTenantIdentity, TRequest, TResponse> : MediatR.IPipelineBehavior<TRequest, TResponse>
        where TEntityIdentity : System.IEquatable<TEntityIdentity>
        where TTenantIdentity : System.IEquatable<TTenantIdentity>
        where TRequest :  notnull
    {
        public TenantRequestBehavior(Fossa.API.Core.Tenant.ITenantIdProvider<TTenantIdentity> tenantIdProvider, System.IServiceProvider serviceProvider) { }
        public System.Threading.Tasks.Task<TResponse> Handle(TRequest request, MediatR.RequestHandlerDelegate<TResponse> next, System.Threading.CancellationToken cancellationToken) { }
    }
    public class ValidationBehavior<TRequest, TResponse> : MediatR.IPipelineBehavior<TRequest, TResponse>
        where TRequest : MediatR.IRequest<TResponse>
    {
        public ValidationBehavior(System.IServiceProvider serviceProvider) { }
        public System.Threading.Tasks.Task<TResponse> Handle(TRequest request, MediatR.RequestHandlerDelegate<TResponse> next, System.Threading.CancellationToken cancellationToken) { }
    }
}
namespace Fossa.API.Core.Messages.Commands
{
    public class BranchCreationCommand : Fossa.API.Core.Messages.Commands.EntityTenantCommand<Fossa.API.Core.Entities.BranchEntity, Fossa.API.Core.Entities.BranchId, System.Guid>, System.IEquatable<Fossa.API.Core.Messages.Commands.BranchCreationCommand>
    {
        public BranchCreationCommand(System.Guid TenantID, System.Guid UserID, string Name, NodaTime.DateTimeZone TimeZone, LanguageExt.Option<Fossa.API.Core.Entities.Address> Address) { }
        public LanguageExt.Option<Fossa.API.Core.Entities.Address> Address { get; init; }
        public override System.Collections.Generic.IEnumerable<Fossa.API.Core.Entities.BranchId> AffectingTenantEntitiesIdentities { get; }
        public string Name { get; init; }
        public NodaTime.DateTimeZone TimeZone { get; init; }
        public System.Guid UserID { get; init; }
    }
    public class BranchCreationCommandHandler : MediatR.IRequestHandler<Fossa.API.Core.Messages.Commands.BranchCreationCommand, MediatR.Unit>
    {
        public BranchCreationCommandHandler(TIKSN.Identity.IIdentityGenerator<Fossa.API.Core.Entities.BranchId> identityGenerator, Fossa.API.Core.Repositories.ICompanyQueryRepository companyQueryRepository, Fossa.API.Core.Repositories.IBranchRepository branchRepository, Fossa.API.Core.Services.IPostalCodeParser postalCodeParser, Fossa.API.Core.Repositories.IBranchQueryRepository branchQueryRepository, Fossa.API.Core.Services.ICompanyLicenseRetriever companyLicenseRetriever) { }
        public System.Threading.Tasks.Task<MediatR.Unit> Handle(Fossa.API.Core.Messages.Commands.BranchCreationCommand request, System.Threading.CancellationToken cancellationToken) { }
    }
    public class BranchDeletionCommand : Fossa.API.Core.Messages.Commands.EntityTenantCommand<Fossa.API.Core.Entities.BranchEntity, Fossa.API.Core.Entities.BranchId, System.Guid>, System.IEquatable<Fossa.API.Core.Messages.Commands.BranchDeletionCommand>
    {
        public BranchDeletionCommand(Fossa.API.Core.Entities.BranchId ID, System.Guid TenantID, System.Guid UserID) { }
        public override System.Collections.Generic.IEnumerable<Fossa.API.Core.Entities.BranchId> AffectingTenantEntitiesIdentities { get; }
        public Fossa.API.Core.Entities.BranchId ID { get; init; }
        public System.Guid UserID { get; init; }
    }
    public class BranchDeletionCommandHandler : MediatR.IRequestHandler<Fossa.API.Core.Messages.Commands.BranchDeletionCommand, MediatR.Unit>
    {
        public BranchDeletionCommandHandler(Fossa.API.Core.Repositories.IBranchQueryRepository branchQueryRepository, Fossa.API.Core.Repositories.IBranchRepository branchRepository, Fossa.API.Core.Relationship.IRelationshipGraph relationshipGraph) { }
        public System.Threading.Tasks.Task DeleteBranchAsync(Fossa.API.Core.Entities.BranchEntity entity, System.Threading.CancellationToken cancellationToken) { }
        public System.Threading.Tasks.Task<MediatR.Unit> Handle(Fossa.API.Core.Messages.Commands.BranchDeletionCommand request, System.Threading.CancellationToken cancellationToken) { }
    }
    public class BranchModificationCommand : Fossa.API.Core.Messages.Commands.EntityTenantCommand<Fossa.API.Core.Entities.BranchEntity, Fossa.API.Core.Entities.BranchId, System.Guid>, System.IEquatable<Fossa.API.Core.Messages.Commands.BranchModificationCommand>
    {
        public BranchModificationCommand(Fossa.API.Core.Entities.BranchId ID, System.Guid TenantID, System.Guid UserID, string Name, NodaTime.DateTimeZone TimeZone, LanguageExt.Option<Fossa.API.Core.Entities.Address> Address) { }
        public LanguageExt.Option<Fossa.API.Core.Entities.Address> Address { get; init; }
        public override System.Collections.Generic.IEnumerable<Fossa.API.Core.Entities.BranchId> AffectingTenantEntitiesIdentities { get; }
        public Fossa.API.Core.Entities.BranchId ID { get; init; }
        public string Name { get; init; }
        public NodaTime.DateTimeZone TimeZone { get; init; }
        public System.Guid UserID { get; init; }
    }
    public class BranchModificationCommandHandler : MediatR.IRequestHandler<Fossa.API.Core.Messages.Commands.BranchModificationCommand, MediatR.Unit>
    {
        public BranchModificationCommandHandler(Fossa.API.Core.Repositories.IBranchQueryRepository branchQueryRepository, Fossa.API.Core.Repositories.IBranchRepository branchRepository, Fossa.API.Core.Services.IPostalCodeParser postalCodeParser) { }
        public System.Threading.Tasks.Task<MediatR.Unit> Handle(Fossa.API.Core.Messages.Commands.BranchModificationCommand request, System.Threading.CancellationToken cancellationToken) { }
    }
    public class CompanyCreationCommand : Fossa.API.Core.Messages.Commands.EntityTenantCommand<Fossa.API.Core.Entities.CompanyEntity, Fossa.API.Core.Entities.CompanyId, System.Guid>, System.IEquatable<Fossa.API.Core.Messages.Commands.CompanyCreationCommand>
    {
        public CompanyCreationCommand(System.Guid TenantID, string Name, System.Globalization.RegionInfo Country) { }
        public override System.Collections.Generic.IEnumerable<Fossa.API.Core.Entities.CompanyId> AffectingTenantEntitiesIdentities { get; }
        public System.Globalization.RegionInfo Country { get; init; }
        public string Name { get; init; }
    }
    public class CompanyCreationCommandHandler : MediatR.IRequestHandler<Fossa.API.Core.Messages.Commands.CompanyCreationCommand, MediatR.Unit>
    {
        public CompanyCreationCommandHandler(TIKSN.Identity.IIdentityGenerator<Fossa.API.Core.Entities.CompanyId> identityGenerator, Fossa.API.Core.Services.ISystemLicenseRetriever systemLicenseRetriever, Fossa.API.Core.Services.ICompanyLicenseInitializer companyLicenseInitializer, Fossa.API.Core.Repositories.ICompanyQueryRepository companyQueryRepository, Fossa.API.Core.Repositories.ICompanyRepository companyRepository) { }
        public System.Threading.Tasks.Task<MediatR.Unit> Handle(Fossa.API.Core.Messages.Commands.CompanyCreationCommand request, System.Threading.CancellationToken cancellationToken) { }
    }
    public class CompanyDeletionCommand : Fossa.API.Core.Messages.Commands.EntityTenantCommand<Fossa.API.Core.Entities.CompanyEntity, Fossa.API.Core.Entities.CompanyId, System.Guid>, System.IEquatable<Fossa.API.Core.Messages.Commands.CompanyDeletionCommand>
    {
        public CompanyDeletionCommand(System.Guid TenantID) { }
        public override System.Collections.Generic.IEnumerable<Fossa.API.Core.Entities.CompanyId> AffectingTenantEntitiesIdentities { get; }
    }
    public class CompanyDeletionCommandHandler : MediatR.IRequestHandler<Fossa.API.Core.Messages.Commands.CompanyDeletionCommand, MediatR.Unit>
    {
        public CompanyDeletionCommandHandler(Fossa.API.Core.Repositories.ICompanyQueryRepository companyQueryRepository, Fossa.API.Core.Repositories.ICompanyRepository companyRepository, Fossa.API.Core.Relationship.IRelationshipGraph relationshipGraph) { }
        public System.Threading.Tasks.Task DeleteCompanyAsync(Fossa.API.Core.Entities.CompanyEntity entity, System.Threading.CancellationToken cancellationToken) { }
        public System.Threading.Tasks.Task<MediatR.Unit> Handle(Fossa.API.Core.Messages.Commands.CompanyDeletionCommand request, System.Threading.CancellationToken cancellationToken) { }
    }
    public class CompanyLicenseCreationCommand : Fossa.API.Core.Messages.Commands.ICommand, MediatR.IBaseRequest, MediatR.IRequest<MediatR.Unit>, System.IEquatable<Fossa.API.Core.Messages.Commands.CompanyLicenseCreationCommand>
    {
        public CompanyLicenseCreationCommand(System.Guid TenantID, LanguageExt.Seq<byte> LicenseData) { }
        public LanguageExt.Seq<byte> LicenseData { get; init; }
        public System.Guid TenantID { get; init; }
    }
    public class CompanyLicenseCreationCommandHandler : MediatR.IRequestHandler<Fossa.API.Core.Messages.Commands.CompanyLicenseCreationCommand, MediatR.Unit>
    {
        public CompanyLicenseCreationCommandHandler(Fossa.API.Core.Services.ICompanyLicenseCreator companyLicenseCreator, Fossa.API.Core.Repositories.ICompanyQueryRepository companyQueryRepository) { }
        public System.Threading.Tasks.Task<MediatR.Unit> Handle(Fossa.API.Core.Messages.Commands.CompanyLicenseCreationCommand request, System.Threading.CancellationToken cancellationToken) { }
    }
    public class CompanyModificationCommand : Fossa.API.Core.Messages.Commands.EntityTenantCommand<Fossa.API.Core.Entities.CompanyEntity, Fossa.API.Core.Entities.CompanyId, System.Guid>, System.IEquatable<Fossa.API.Core.Messages.Commands.CompanyModificationCommand>
    {
        public CompanyModificationCommand(System.Guid TenantID, string Name, System.Globalization.RegionInfo Country) { }
        public override System.Collections.Generic.IEnumerable<Fossa.API.Core.Entities.CompanyId> AffectingTenantEntitiesIdentities { get; }
        public System.Globalization.RegionInfo Country { get; init; }
        public string Name { get; init; }
    }
    public class CompanyModificationCommandHandler : MediatR.IRequestHandler<Fossa.API.Core.Messages.Commands.CompanyModificationCommand, MediatR.Unit>
    {
        public CompanyModificationCommandHandler(Fossa.API.Core.Repositories.ICompanyQueryRepository companyQueryRepository, Fossa.API.Core.Repositories.ICompanyRepository companyRepository) { }
        public System.Threading.Tasks.Task<MediatR.Unit> Handle(Fossa.API.Core.Messages.Commands.CompanyModificationCommand request, System.Threading.CancellationToken cancellationToken) { }
    }
    public class CompanySettingsCreationCommand : Fossa.API.Core.Messages.Commands.EntityTenantUserCommand<Fossa.API.Core.Entities.CompanySettingsEntity, Fossa.API.Core.Entities.CompanySettingsId, System.Guid, System.Guid>, System.IEquatable<Fossa.API.Core.Messages.Commands.CompanySettingsCreationCommand>
    {
        public CompanySettingsCreationCommand(System.Guid TenantID, System.Guid UserID, Fossa.API.Core.Entities.ColorSchemeId ColorSchemeId) { }
        public override System.Collections.Generic.IEnumerable<Fossa.API.Core.Entities.CompanySettingsId> AffectingTenantEntitiesIdentities { get; }
        public Fossa.API.Core.Entities.ColorSchemeId ColorSchemeId { get; init; }
    }
    public class CompanySettingsCreationCommandHandler : MediatR.IRequestHandler<Fossa.API.Core.Messages.Commands.CompanySettingsCreationCommand, MediatR.Unit>
    {
        public CompanySettingsCreationCommandHandler(Fossa.API.Core.Repositories.ICompanySettingsRepository companySettingsRepository, Fossa.API.Core.Repositories.ICompanySettingsQueryRepository companySettingsQueryRepository, Fossa.API.Core.Repositories.ICompanyQueryRepository companyQueryRepository, TIKSN.Identity.IIdentityGenerator<Fossa.API.Core.Entities.CompanySettingsId> identityGenerator) { }
        public System.Threading.Tasks.Task<MediatR.Unit> Handle(Fossa.API.Core.Messages.Commands.CompanySettingsCreationCommand request, System.Threading.CancellationToken cancellationToken) { }
    }
    public class CompanySettingsDeletionCommand : Fossa.API.Core.Messages.Commands.EntityTenantUserCommand<Fossa.API.Core.Entities.CompanySettingsEntity, Fossa.API.Core.Entities.CompanySettingsId, System.Guid, System.Guid>, System.IEquatable<Fossa.API.Core.Messages.Commands.CompanySettingsDeletionCommand>
    {
        public CompanySettingsDeletionCommand(System.Guid TenantID, System.Guid UserID) { }
        public override System.Collections.Generic.IEnumerable<Fossa.API.Core.Entities.CompanySettingsId> AffectingTenantEntitiesIdentities { get; }
    }
    public class CompanySettingsDeletionCommandHandler : MediatR.IRequestHandler<Fossa.API.Core.Messages.Commands.CompanySettingsDeletionCommand, MediatR.Unit>
    {
        public CompanySettingsDeletionCommandHandler(Fossa.API.Core.Repositories.ICompanyQueryRepository companyQueryRepository, Fossa.API.Core.Repositories.ICompanySettingsRepository companySettingsRepository, Fossa.API.Core.Repositories.ICompanySettingsQueryRepository companySettingsQueryRepository, Fossa.API.Core.Relationship.IRelationshipGraph relationshipGraph) { }
        public System.Threading.Tasks.Task<MediatR.Unit> Handle(Fossa.API.Core.Messages.Commands.CompanySettingsDeletionCommand request, System.Threading.CancellationToken cancellationToken) { }
    }
    public class CompanySettingsModificationCommand : Fossa.API.Core.Messages.Commands.EntityTenantUserCommand<Fossa.API.Core.Entities.CompanySettingsEntity, Fossa.API.Core.Entities.CompanySettingsId, System.Guid, System.Guid>, System.IEquatable<Fossa.API.Core.Messages.Commands.CompanySettingsModificationCommand>
    {
        public CompanySettingsModificationCommand(System.Guid TenantID, System.Guid UserID, Fossa.API.Core.Entities.ColorSchemeId ColorSchemeId) { }
        public override System.Collections.Generic.IEnumerable<Fossa.API.Core.Entities.CompanySettingsId> AffectingTenantEntitiesIdentities { get; }
        public Fossa.API.Core.Entities.ColorSchemeId ColorSchemeId { get; init; }
    }
    public class CompanySettingsModificationCommandHandler : MediatR.IRequestHandler<Fossa.API.Core.Messages.Commands.CompanySettingsModificationCommand, MediatR.Unit>
    {
        public CompanySettingsModificationCommandHandler(Fossa.API.Core.Repositories.ICompanyQueryRepository companyQueryRepository, Fossa.API.Core.Repositories.ICompanySettingsRepository companySettingsRepository, Fossa.API.Core.Repositories.ICompanySettingsQueryRepository companySettingsQueryRepository) { }
        public System.Threading.Tasks.Task<MediatR.Unit> Handle(Fossa.API.Core.Messages.Commands.CompanySettingsModificationCommand request, System.Threading.CancellationToken cancellationToken) { }
    }
    public class DepartmentCreationCommand : Fossa.API.Core.Messages.Commands.EntityTenantCommand<Fossa.API.Core.Entities.DepartmentEntity, Fossa.API.Core.Entities.DepartmentId, System.Guid>, System.IEquatable<Fossa.API.Core.Messages.Commands.DepartmentCreationCommand>
    {
        public DepartmentCreationCommand(System.Guid TenantID, System.Guid UserID, string Name, LanguageExt.Option<Fossa.API.Core.Entities.DepartmentId> ParentDepartmentId, Fossa.API.Core.Entities.EmployeeId ManagerId) { }
        public override System.Collections.Generic.IEnumerable<Fossa.API.Core.Entities.DepartmentId> AffectingTenantEntitiesIdentities { get; }
        public Fossa.API.Core.Entities.EmployeeId ManagerId { get; init; }
        public string Name { get; init; }
        public LanguageExt.Option<Fossa.API.Core.Entities.DepartmentId> ParentDepartmentId { get; init; }
        public System.Guid UserID { get; init; }
    }
    public class DepartmentCreationCommandHandler : MediatR.IRequestHandler<Fossa.API.Core.Messages.Commands.DepartmentCreationCommand, MediatR.Unit>
    {
        public DepartmentCreationCommandHandler(TIKSN.Identity.IIdentityGenerator<Fossa.API.Core.Entities.DepartmentId> identityGenerator, Fossa.API.Core.Repositories.IDepartmentRepository departmentRepository, Fossa.API.Core.Services.ICompanyLicenseRetriever companyLicenseRetriever, Fossa.API.Core.Repositories.IDepartmentQueryRepository departmentQueryRepository, Fossa.API.Core.Repositories.ICompanyQueryRepository companyQueryRepository) { }
        public System.Threading.Tasks.Task<MediatR.Unit> Handle(Fossa.API.Core.Messages.Commands.DepartmentCreationCommand request, System.Threading.CancellationToken cancellationToken) { }
    }
    public class DepartmentDeletionCommand : Fossa.API.Core.Messages.Commands.EntityTenantCommand<Fossa.API.Core.Entities.DepartmentEntity, Fossa.API.Core.Entities.DepartmentId, System.Guid>, System.IEquatable<Fossa.API.Core.Messages.Commands.DepartmentDeletionCommand>
    {
        public DepartmentDeletionCommand(Fossa.API.Core.Entities.DepartmentId ID, System.Guid TenantID, System.Guid UserID) { }
        public override System.Collections.Generic.IEnumerable<Fossa.API.Core.Entities.DepartmentId> AffectingTenantEntitiesIdentities { get; }
        public Fossa.API.Core.Entities.DepartmentId ID { get; init; }
        public System.Guid UserID { get; init; }
    }
    public class DepartmentDeletionCommandHandler : MediatR.IRequestHandler<Fossa.API.Core.Messages.Commands.DepartmentDeletionCommand, MediatR.Unit>
    {
        public DepartmentDeletionCommandHandler(Fossa.API.Core.Repositories.IDepartmentQueryRepository departmentQueryRepository, Fossa.API.Core.Repositories.IDepartmentRepository departmentRepository, Fossa.API.Core.Relationship.IRelationshipGraph relationshipGraph) { }
        public System.Threading.Tasks.Task DeleteDepartmentAsync(Fossa.API.Core.Entities.DepartmentEntity entity, System.Threading.CancellationToken cancellationToken) { }
        public System.Threading.Tasks.Task<MediatR.Unit> Handle(Fossa.API.Core.Messages.Commands.DepartmentDeletionCommand request, System.Threading.CancellationToken cancellationToken) { }
    }
    public class DepartmentModificationCommand : Fossa.API.Core.Messages.Commands.EntityTenantCommand<Fossa.API.Core.Entities.DepartmentEntity, Fossa.API.Core.Entities.DepartmentId, System.Guid>, System.IEquatable<Fossa.API.Core.Messages.Commands.DepartmentModificationCommand>
    {
        public DepartmentModificationCommand(Fossa.API.Core.Entities.DepartmentId ID, System.Guid TenantID, System.Guid UserID, string Name, LanguageExt.Option<Fossa.API.Core.Entities.DepartmentId> ParentDepartmentId, Fossa.API.Core.Entities.EmployeeId ManagerId) { }
        public override System.Collections.Generic.IEnumerable<Fossa.API.Core.Entities.DepartmentId> AffectingTenantEntitiesIdentities { get; }
        public Fossa.API.Core.Entities.DepartmentId ID { get; init; }
        public Fossa.API.Core.Entities.EmployeeId ManagerId { get; init; }
        public string Name { get; init; }
        public LanguageExt.Option<Fossa.API.Core.Entities.DepartmentId> ParentDepartmentId { get; init; }
        public System.Guid UserID { get; init; }
    }
    public class DepartmentModificationCommandHandler : MediatR.IRequestHandler<Fossa.API.Core.Messages.Commands.DepartmentModificationCommand, MediatR.Unit>
    {
        public DepartmentModificationCommandHandler(Fossa.API.Core.Repositories.IDepartmentQueryRepository departmentQueryRepository, Fossa.API.Core.Repositories.IDepartmentRepository departmentRepository) { }
        public System.Threading.Tasks.Task<MediatR.Unit> Handle(Fossa.API.Core.Messages.Commands.DepartmentModificationCommand request, System.Threading.CancellationToken cancellationToken) { }
    }
    public class EmployeeCreationCommand : Fossa.API.Core.Messages.Commands.EntityTenantUserCommand<Fossa.API.Core.Entities.EmployeeEntity, Fossa.API.Core.Entities.EmployeeId, System.Guid, System.Guid>, System.IEquatable<Fossa.API.Core.Messages.Commands.EmployeeCreationCommand>
    {
        public EmployeeCreationCommand(System.Guid TenantID, System.Guid UserID, string FirstName, string LastName, string FullName) { }
        public override System.Collections.Generic.IEnumerable<Fossa.API.Core.Entities.EmployeeId> AffectingTenantEntitiesIdentities { get; }
        public string FirstName { get; init; }
        public string FullName { get; init; }
        public string LastName { get; init; }
    }
    public class EmployeeCreationCommandHandler : MediatR.IRequestHandler<Fossa.API.Core.Messages.Commands.EmployeeCreationCommand, MediatR.Unit>
    {
        public EmployeeCreationCommandHandler(TIKSN.Identity.IIdentityGenerator<Fossa.API.Core.Entities.EmployeeId> identityGenerator, Fossa.API.Core.Services.ICompanyLicenseRetriever companyLicenseRetriever, Fossa.API.Core.Repositories.ICompanyQueryRepository companyQueryRepository, Fossa.API.Core.Repositories.IEmployeeQueryRepository employeeQueryRepository, Fossa.API.Core.Repositories.IEmployeeRepository employeeRepository) { }
        public System.Threading.Tasks.Task<MediatR.Unit> Handle(Fossa.API.Core.Messages.Commands.EmployeeCreationCommand request, System.Threading.CancellationToken cancellationToken) { }
    }
    public class EmployeeDeletionCommand : Fossa.API.Core.Messages.Commands.EntityTenantUserCommand<Fossa.API.Core.Entities.EmployeeEntity, Fossa.API.Core.Entities.EmployeeId, System.Guid, System.Guid>, System.IEquatable<Fossa.API.Core.Messages.Commands.EmployeeDeletionCommand>
    {
        public EmployeeDeletionCommand(System.Guid TenantID, System.Guid UserID) { }
        public override System.Collections.Generic.IEnumerable<Fossa.API.Core.Entities.EmployeeId> AffectingTenantEntitiesIdentities { get; }
    }
    public class EmployeeDeletionCommandHandler : MediatR.IRequestHandler<Fossa.API.Core.Messages.Commands.EmployeeDeletionCommand, MediatR.Unit>
    {
        public EmployeeDeletionCommandHandler(Fossa.API.Core.Repositories.IEmployeeQueryRepository employeeQueryRepository, Fossa.API.Core.Repositories.IEmployeeRepository employeeRepository, Fossa.API.Core.Relationship.IRelationshipGraph relationshipGraph) { }
        public System.Threading.Tasks.Task DeleteEmployeeAsync(Fossa.API.Core.Entities.EmployeeEntity entity, System.Threading.CancellationToken cancellationToken) { }
        public System.Threading.Tasks.Task<MediatR.Unit> Handle(Fossa.API.Core.Messages.Commands.EmployeeDeletionCommand request, System.Threading.CancellationToken cancellationToken) { }
    }
    public class EmployeeManagementCommand : Fossa.API.Core.Messages.Commands.EntityTenantUserCommand<Fossa.API.Core.Entities.EmployeeEntity, Fossa.API.Core.Entities.EmployeeId, System.Guid, System.Guid>, System.IEquatable<Fossa.API.Core.Messages.Commands.EmployeeManagementCommand>
    {
        public EmployeeManagementCommand(Fossa.API.Core.Entities.EmployeeId ID, System.Guid TenantID, System.Guid UserID, LanguageExt.Option<Fossa.API.Core.Entities.BranchId> AssignedBranchId, LanguageExt.Option<Fossa.API.Core.Entities.DepartmentId> AssignedDepartmentId) { }
        public override System.Collections.Generic.IEnumerable<Fossa.API.Core.Entities.EmployeeId> AffectingTenantEntitiesIdentities { get; }
        public LanguageExt.Option<Fossa.API.Core.Entities.BranchId> AssignedBranchId { get; init; }
        public LanguageExt.Option<Fossa.API.Core.Entities.DepartmentId> AssignedDepartmentId { get; init; }
        public Fossa.API.Core.Entities.EmployeeId ID { get; init; }
    }
    public class EmployeeManagementCommandHandler : MediatR.IRequestHandler<Fossa.API.Core.Messages.Commands.EmployeeManagementCommand, MediatR.Unit>
    {
        public EmployeeManagementCommandHandler(Fossa.API.Core.Repositories.IEmployeeQueryRepository employeeQueryRepository, Fossa.API.Core.Repositories.IEmployeeRepository employeeRepository) { }
        public System.Threading.Tasks.Task<MediatR.Unit> Handle(Fossa.API.Core.Messages.Commands.EmployeeManagementCommand request, System.Threading.CancellationToken cancellationToken) { }
    }
    public class EmployeeModificationCommand : Fossa.API.Core.Messages.Commands.EntityTenantUserCommand<Fossa.API.Core.Entities.EmployeeEntity, Fossa.API.Core.Entities.EmployeeId, System.Guid, System.Guid>, System.IEquatable<Fossa.API.Core.Messages.Commands.EmployeeModificationCommand>
    {
        public EmployeeModificationCommand(System.Guid TenantID, System.Guid UserID, string FirstName, string LastName, string FullName) { }
        public override System.Collections.Generic.IEnumerable<Fossa.API.Core.Entities.EmployeeId> AffectingTenantEntitiesIdentities { get; }
        public string FirstName { get; init; }
        public string FullName { get; init; }
        public string LastName { get; init; }
    }
    public class EmployeeModificationCommandHandler : MediatR.IRequestHandler<Fossa.API.Core.Messages.Commands.EmployeeModificationCommand, MediatR.Unit>
    {
        public EmployeeModificationCommandHandler(Fossa.API.Core.Repositories.IEmployeeQueryRepository employeeQueryRepository, Fossa.API.Core.Repositories.IEmployeeRepository employeeRepository) { }
        public System.Threading.Tasks.Task<MediatR.Unit> Handle(Fossa.API.Core.Messages.Commands.EmployeeModificationCommand request, System.Threading.CancellationToken cancellationToken) { }
    }
    public abstract class EntityTenantCommand<TEntity, TEntityIdentity, TTenantIdentity> : Fossa.API.Core.Messages.Commands.ICommand, Fossa.API.Core.Messages.Commands.ITenantCommand<TEntityIdentity, TTenantIdentity>, Fossa.API.Core.Messages.IAffectingTenantEntities<TEntityIdentity>, MediatR.IBaseRequest, MediatR.IRequest<MediatR.Unit>, System.IEquatable<Fossa.API.Core.Messages.Commands.EntityTenantCommand<TEntity, TEntityIdentity, TTenantIdentity>>
        where TEntity : TIKSN.Data.IEntity<TEntityIdentity>
        where TEntityIdentity : System.IEquatable<TEntityIdentity>
        where TTenantIdentity : System.IEquatable<TTenantIdentity>
    {
        protected EntityTenantCommand(TTenantIdentity TenantID) { }
        public System.Collections.Generic.IEnumerable<Fossa.API.Core.Messages.AffectingEntity<TEntityIdentity>> AffectingTenantEntities { get; }
        public abstract System.Collections.Generic.IEnumerable<TEntityIdentity> AffectingTenantEntitiesIdentities { get; }
        public TTenantIdentity TenantID { get; init; }
    }
    public abstract class EntityTenantUserCommand<TEntity, TEntityIdentity, TTenantIdentity, TUserIdentity> : Fossa.API.Core.Messages.Commands.ICommand, Fossa.API.Core.Messages.Commands.ITenantCommand<TEntityIdentity, TTenantIdentity>, Fossa.API.Core.Messages.Commands.ITenantUserCommand<TEntityIdentity, TTenantIdentity, TUserIdentity>, Fossa.API.Core.Messages.Commands.IUserCommand<TUserIdentity>, Fossa.API.Core.Messages.IAffectingTenantEntities<TEntityIdentity>, MediatR.IBaseRequest, MediatR.IRequest<MediatR.Unit>, System.IEquatable<Fossa.API.Core.Messages.Commands.EntityTenantUserCommand<TEntity, TEntityIdentity, TTenantIdentity, TUserIdentity>>
        where TEntity : TIKSN.Data.IEntity<TEntityIdentity>
        where TEntityIdentity : System.IEquatable<TEntityIdentity>
        where TTenantIdentity : System.IEquatable<TTenantIdentity>
        where TUserIdentity : System.IEquatable<TUserIdentity>
    {
        protected EntityTenantUserCommand(TTenantIdentity TenantID, TUserIdentity UserID) { }
        public System.Collections.Generic.IEnumerable<Fossa.API.Core.Messages.AffectingEntity<TEntityIdentity>> AffectingTenantEntities { get; }
        public abstract System.Collections.Generic.IEnumerable<TEntityIdentity> AffectingTenantEntitiesIdentities { get; }
        public TTenantIdentity TenantID { get; init; }
        public TUserIdentity UserID { get; init; }
    }
    public interface ICommand : MediatR.IBaseRequest, MediatR.IRequest<MediatR.Unit> { }
    public interface ITenantCommand<TEntityIdentity, out TTenantIdentity> : Fossa.API.Core.Messages.Commands.ICommand, Fossa.API.Core.Messages.IAffectingTenantEntities<TEntityIdentity>, MediatR.IBaseRequest, MediatR.IRequest<MediatR.Unit>
        where TEntityIdentity : System.IEquatable<TEntityIdentity>
        where out TTenantIdentity : System.IEquatable<TTenantIdentity>
    {
        TTenantIdentity TenantID { get; }
    }
    public interface ITenantUserCommand<TEntityIdentity, out TTenantIdentity, out TUserIdentity> : Fossa.API.Core.Messages.Commands.ICommand, Fossa.API.Core.Messages.Commands.ITenantCommand<TEntityIdentity, TTenantIdentity>, Fossa.API.Core.Messages.Commands.IUserCommand<TUserIdentity>, Fossa.API.Core.Messages.IAffectingTenantEntities<TEntityIdentity>, MediatR.IBaseRequest, MediatR.IRequest<MediatR.Unit>
        where TEntityIdentity : System.IEquatable<TEntityIdentity>
        where out TTenantIdentity : System.IEquatable<TTenantIdentity>
        where out TUserIdentity : System.IEquatable<TUserIdentity> { }
    public interface IUserCommand<out TUserIdentity> : Fossa.API.Core.Messages.Commands.ICommand, MediatR.IBaseRequest, MediatR.IRequest<MediatR.Unit>
        where out TUserIdentity : System.IEquatable<TUserIdentity>
    {
        TUserIdentity UserID { get; }
    }
}
namespace Fossa.API.Core.Messages.Events
{
    public interface IEvent : MediatR.INotification { }
    public interface ITenantEvent<out TTenantIdentity> : Fossa.API.Core.Messages.Events.IEvent, MediatR.INotification
        where out TTenantIdentity : System.IEquatable<TTenantIdentity>
    {
        TTenantIdentity TenantID { get; }
    }
    public interface ITenantUserEvent<out TUserIdentity, out TTenantIdentity> : Fossa.API.Core.Messages.Events.IEvent, Fossa.API.Core.Messages.Events.ITenantEvent<TTenantIdentity>, Fossa.API.Core.Messages.Events.IUserEvent<TUserIdentity>, MediatR.INotification
        where out TUserIdentity : System.IEquatable<TUserIdentity>
        where out TTenantIdentity : System.IEquatable<TTenantIdentity> { }
    public interface IUserEvent<out TUserIdentity> : Fossa.API.Core.Messages.Events.IEvent, MediatR.INotification
        where out TUserIdentity : System.IEquatable<TUserIdentity>
    {
        TUserIdentity UserID { get; }
    }
}
namespace Fossa.API.Core.Messages.Queries
{
    public class BranchListingQuery : Fossa.API.Core.Messages.Queries.EntityTenantQuery<Fossa.API.Core.Entities.BranchEntity, Fossa.API.Core.Entities.BranchId, System.Guid, LanguageExt.Seq<Fossa.API.Core.Entities.BranchEntity>>, System.IEquatable<Fossa.API.Core.Messages.Queries.BranchListingQuery>
    {
        public BranchListingQuery(LanguageExt.Seq<Fossa.API.Core.Entities.BranchId> Ids, System.Guid TenantID, System.Guid UserID) { }
        public override System.Collections.Generic.IEnumerable<Fossa.API.Core.Entities.BranchId> AffectingTenantEntitiesIdentities { get; }
        public LanguageExt.Seq<Fossa.API.Core.Entities.BranchId> Ids { get; init; }
        public System.Guid UserID { get; init; }
    }
    public class BranchListingQueryHandler : MediatR.IRequestHandler<Fossa.API.Core.Messages.Queries.BranchListingQuery, LanguageExt.Seq<Fossa.API.Core.Entities.BranchEntity>>
    {
        public BranchListingQueryHandler(Fossa.API.Core.Repositories.IBranchQueryRepository branchQueryRepository) { }
        public System.Threading.Tasks.Task<LanguageExt.Seq<Fossa.API.Core.Entities.BranchEntity>> Handle(Fossa.API.Core.Messages.Queries.BranchListingQuery request, System.Threading.CancellationToken cancellationToken) { }
    }
    public class BranchPagingQuery : Fossa.API.Core.Messages.Queries.EntityTenantQuery<Fossa.API.Core.Entities.BranchEntity, Fossa.API.Core.Entities.BranchId, System.Guid, TIKSN.Data.PageResult<Fossa.API.Core.Entities.BranchEntity>>, Fossa.API.Core.Messages.Queries.IPagingQuery, Fossa.API.Core.Messages.Queries.IPagingQuery<Fossa.API.Core.Entities.BranchEntity>, Fossa.API.Core.Messages.Queries.IQuery<TIKSN.Data.PageResult<Fossa.API.Core.Entities.BranchEntity>>, MediatR.IBaseRequest, MediatR.IRequest<TIKSN.Data.PageResult<Fossa.API.Core.Entities.BranchEntity>>, System.IEquatable<Fossa.API.Core.Messages.Queries.BranchPagingQuery>
    {
        public BranchPagingQuery(System.Guid TenantID, System.Guid UserID, string Search, TIKSN.Data.Page Page) { }
        public override System.Collections.Generic.IEnumerable<Fossa.API.Core.Entities.BranchId> AffectingTenantEntitiesIdentities { get; }
        public TIKSN.Data.Page Page { get; init; }
        public string Search { get; init; }
        public System.Guid UserID { get; init; }
    }
    public class BranchPagingQueryHandler : MediatR.IRequestHandler<Fossa.API.Core.Messages.Queries.BranchPagingQuery, TIKSN.Data.PageResult<Fossa.API.Core.Entities.BranchEntity>>
    {
        public BranchPagingQueryHandler(Fossa.API.Core.Repositories.IBranchQueryRepository branchQueryRepository) { }
        public System.Threading.Tasks.Task<TIKSN.Data.PageResult<Fossa.API.Core.Entities.BranchEntity>> Handle(Fossa.API.Core.Messages.Queries.BranchPagingQuery request, System.Threading.CancellationToken cancellationToken) { }
    }
    public class BranchRetrievalQuery : Fossa.API.Core.Messages.Queries.EntityTenantQuery<Fossa.API.Core.Entities.BranchEntity, Fossa.API.Core.Entities.BranchId, System.Guid, Fossa.API.Core.Entities.BranchEntity>, System.IEquatable<Fossa.API.Core.Messages.Queries.BranchRetrievalQuery>
    {
        public BranchRetrievalQuery(Fossa.API.Core.Entities.BranchId ID, System.Guid TenantID, System.Guid UserID) { }
        public override System.Collections.Generic.IEnumerable<Fossa.API.Core.Entities.BranchId> AffectingTenantEntitiesIdentities { get; }
        public Fossa.API.Core.Entities.BranchId ID { get; init; }
        public System.Guid UserID { get; init; }
    }
    public class BranchRetrievalQueryHandler : MediatR.IRequestHandler<Fossa.API.Core.Messages.Queries.BranchRetrievalQuery, Fossa.API.Core.Entities.BranchEntity>
    {
        public BranchRetrievalQueryHandler(Fossa.API.Core.Repositories.IBranchQueryRepository branchQueryRepository) { }
        public System.Threading.Tasks.Task<Fossa.API.Core.Entities.BranchEntity> Handle(Fossa.API.Core.Messages.Queries.BranchRetrievalQuery request, System.Threading.CancellationToken cancellationToken) { }
    }
    public class CompanyLicenseRetrievalQuery : Fossa.API.Core.Messages.Queries.IQuery<TIKSN.Licensing.License<Fossa.Licensing.CompanyEntitlements>>, MediatR.IBaseRequest, MediatR.IRequest<TIKSN.Licensing.License<Fossa.Licensing.CompanyEntitlements>>, System.IEquatable<Fossa.API.Core.Messages.Queries.CompanyLicenseRetrievalQuery>
    {
        public CompanyLicenseRetrievalQuery(System.Guid TenantID) { }
        public System.Guid TenantID { get; init; }
    }
    public class CompanyLicenseRetrievalQueryHandler : MediatR.IRequestHandler<Fossa.API.Core.Messages.Queries.CompanyLicenseRetrievalQuery, TIKSN.Licensing.License<Fossa.Licensing.CompanyEntitlements>>
    {
        public CompanyLicenseRetrievalQueryHandler(Fossa.API.Core.Services.ICompanyLicenseRetriever companyLicenseRetriever, Fossa.API.Core.Repositories.ICompanyQueryRepository companyQueryRepository) { }
        public System.Threading.Tasks.Task<TIKSN.Licensing.License<Fossa.Licensing.CompanyEntitlements>> Handle(Fossa.API.Core.Messages.Queries.CompanyLicenseRetrievalQuery request, System.Threading.CancellationToken cancellationToken) { }
    }
    public class CompanyRetrievalQuery : Fossa.API.Core.Messages.Queries.EntityTenantQuery<Fossa.API.Core.Entities.CompanyEntity, Fossa.API.Core.Entities.CompanyId, System.Guid, Fossa.API.Core.Entities.CompanyEntity>, System.IEquatable<Fossa.API.Core.Messages.Queries.CompanyRetrievalQuery>
    {
        public CompanyRetrievalQuery(System.Guid TenantID) { }
        public override System.Collections.Generic.IEnumerable<Fossa.API.Core.Entities.CompanyId> AffectingTenantEntitiesIdentities { get; }
    }
    public class CompanyRetrievalQueryHandler : MediatR.IRequestHandler<Fossa.API.Core.Messages.Queries.CompanyRetrievalQuery, Fossa.API.Core.Entities.CompanyEntity>
    {
        public CompanyRetrievalQueryHandler(Fossa.API.Core.Repositories.ICompanyQueryRepository companyQueryRepository) { }
        public System.Threading.Tasks.Task<Fossa.API.Core.Entities.CompanyEntity> Handle(Fossa.API.Core.Messages.Queries.CompanyRetrievalQuery request, System.Threading.CancellationToken cancellationToken) { }
    }
    public class CompanySettingsRetrievalQuery : Fossa.API.Core.Messages.Queries.EntityTenantQuery<Fossa.API.Core.Entities.CompanySettingsEntity, Fossa.API.Core.Entities.CompanySettingsId, System.Guid, Fossa.API.Core.Entities.CompanySettingsEntity>, System.IEquatable<Fossa.API.Core.Messages.Queries.CompanySettingsRetrievalQuery>
    {
        public CompanySettingsRetrievalQuery(System.Guid TenantID) { }
        public override System.Collections.Generic.IEnumerable<Fossa.API.Core.Entities.CompanySettingsId> AffectingTenantEntitiesIdentities { get; }
    }
    public class CompanySettingsRetrievalQueryHandler : MediatR.IRequestHandler<Fossa.API.Core.Messages.Queries.CompanySettingsRetrievalQuery, Fossa.API.Core.Entities.CompanySettingsEntity>
    {
        public CompanySettingsRetrievalQueryHandler(Fossa.API.Core.Repositories.ICompanySettingsQueryRepository companySettingsQueryRepository, Fossa.API.Core.Repositories.ICompanyQueryRepository companyQueryRepository) { }
        public System.Threading.Tasks.Task<Fossa.API.Core.Entities.CompanySettingsEntity> Handle(Fossa.API.Core.Messages.Queries.CompanySettingsRetrievalQuery request, System.Threading.CancellationToken cancellationToken) { }
    }
    public class CurrentEmployeeRetrievalQuery : Fossa.API.Core.Messages.Queries.EntityTenantQuery<Fossa.API.Core.Entities.EmployeeEntity, Fossa.API.Core.Entities.EmployeeId, System.Guid, Fossa.API.Core.Entities.EmployeeEntity>, System.IEquatable<Fossa.API.Core.Messages.Queries.CurrentEmployeeRetrievalQuery>
    {
        public CurrentEmployeeRetrievalQuery(System.Guid TenantID, System.Guid UserID) { }
        public override System.Collections.Generic.IEnumerable<Fossa.API.Core.Entities.EmployeeId> AffectingTenantEntitiesIdentities { get; }
        public System.Guid UserID { get; init; }
    }
    public class CurrentEmployeeRetrievalQueryHandler : MediatR.IRequestHandler<Fossa.API.Core.Messages.Queries.CurrentEmployeeRetrievalQuery, Fossa.API.Core.Entities.EmployeeEntity>
    {
        public CurrentEmployeeRetrievalQueryHandler(Fossa.API.Core.Repositories.IEmployeeQueryRepository employeeQueryRepository) { }
        public System.Threading.Tasks.Task<Fossa.API.Core.Entities.EmployeeEntity> Handle(Fossa.API.Core.Messages.Queries.CurrentEmployeeRetrievalQuery request, System.Threading.CancellationToken cancellationToken) { }
    }
    public class DepartmentListingQuery : Fossa.API.Core.Messages.Queries.EntityTenantQuery<Fossa.API.Core.Entities.DepartmentEntity, Fossa.API.Core.Entities.DepartmentId, System.Guid, LanguageExt.Seq<Fossa.API.Core.Entities.DepartmentEntity>>, System.IEquatable<Fossa.API.Core.Messages.Queries.DepartmentListingQuery>
    {
        public DepartmentListingQuery(LanguageExt.Seq<Fossa.API.Core.Entities.DepartmentId> Ids, System.Guid TenantID, System.Guid UserID) { }
        public override System.Collections.Generic.IEnumerable<Fossa.API.Core.Entities.DepartmentId> AffectingTenantEntitiesIdentities { get; }
        public LanguageExt.Seq<Fossa.API.Core.Entities.DepartmentId> Ids { get; init; }
        public System.Guid UserID { get; init; }
    }
    public class DepartmentListingQueryHandler : MediatR.IRequestHandler<Fossa.API.Core.Messages.Queries.DepartmentListingQuery, LanguageExt.Seq<Fossa.API.Core.Entities.DepartmentEntity>>
    {
        public DepartmentListingQueryHandler(Fossa.API.Core.Repositories.IDepartmentQueryRepository departmentQueryRepository) { }
        public System.Threading.Tasks.Task<LanguageExt.Seq<Fossa.API.Core.Entities.DepartmentEntity>> Handle(Fossa.API.Core.Messages.Queries.DepartmentListingQuery request, System.Threading.CancellationToken cancellationToken) { }
    }
    public class DepartmentPagingQuery : Fossa.API.Core.Messages.Queries.EntityTenantQuery<Fossa.API.Core.Entities.DepartmentEntity, Fossa.API.Core.Entities.DepartmentId, System.Guid, TIKSN.Data.PageResult<Fossa.API.Core.Entities.DepartmentEntity>>, Fossa.API.Core.Messages.Queries.IPagingQuery, Fossa.API.Core.Messages.Queries.IPagingQuery<Fossa.API.Core.Entities.DepartmentEntity>, Fossa.API.Core.Messages.Queries.IQuery<TIKSN.Data.PageResult<Fossa.API.Core.Entities.DepartmentEntity>>, MediatR.IBaseRequest, MediatR.IRequest<TIKSN.Data.PageResult<Fossa.API.Core.Entities.DepartmentEntity>>, System.IEquatable<Fossa.API.Core.Messages.Queries.DepartmentPagingQuery>
    {
        public DepartmentPagingQuery(System.Guid TenantID, System.Guid UserID, string Search, TIKSN.Data.Page Page) { }
        public override System.Collections.Generic.IEnumerable<Fossa.API.Core.Entities.DepartmentId> AffectingTenantEntitiesIdentities { get; }
        public TIKSN.Data.Page Page { get; init; }
        public string Search { get; init; }
        public System.Guid UserID { get; init; }
    }
    public class DepartmentPagingQueryHandler : MediatR.IRequestHandler<Fossa.API.Core.Messages.Queries.DepartmentPagingQuery, TIKSN.Data.PageResult<Fossa.API.Core.Entities.DepartmentEntity>>
    {
        public DepartmentPagingQueryHandler(Fossa.API.Core.Repositories.IDepartmentQueryRepository departmentQueryRepository) { }
        public System.Threading.Tasks.Task<TIKSN.Data.PageResult<Fossa.API.Core.Entities.DepartmentEntity>> Handle(Fossa.API.Core.Messages.Queries.DepartmentPagingQuery request, System.Threading.CancellationToken cancellationToken) { }
    }
    public class DepartmentRetrievalQuery : Fossa.API.Core.Messages.Queries.EntityTenantQuery<Fossa.API.Core.Entities.DepartmentEntity, Fossa.API.Core.Entities.DepartmentId, System.Guid, Fossa.API.Core.Entities.DepartmentEntity>, System.IEquatable<Fossa.API.Core.Messages.Queries.DepartmentRetrievalQuery>
    {
        public DepartmentRetrievalQuery(Fossa.API.Core.Entities.DepartmentId ID, System.Guid TenantID, System.Guid UserID) { }
        public override System.Collections.Generic.IEnumerable<Fossa.API.Core.Entities.DepartmentId> AffectingTenantEntitiesIdentities { get; }
        public Fossa.API.Core.Entities.DepartmentId ID { get; init; }
        public System.Guid UserID { get; init; }
    }
    public class DepartmentRetrievalQueryHandler : MediatR.IRequestHandler<Fossa.API.Core.Messages.Queries.DepartmentRetrievalQuery, Fossa.API.Core.Entities.DepartmentEntity>
    {
        public DepartmentRetrievalQueryHandler(Fossa.API.Core.Repositories.IDepartmentQueryRepository departmentQueryRepository) { }
        public System.Threading.Tasks.Task<Fossa.API.Core.Entities.DepartmentEntity> Handle(Fossa.API.Core.Messages.Queries.DepartmentRetrievalQuery request, System.Threading.CancellationToken cancellationToken) { }
    }
    public class EmployeeListingQuery : Fossa.API.Core.Messages.Queries.EntityTenantQuery<Fossa.API.Core.Entities.EmployeeEntity, Fossa.API.Core.Entities.EmployeeId, System.Guid, LanguageExt.Seq<Fossa.API.Core.Entities.EmployeeEntity>>, System.IEquatable<Fossa.API.Core.Messages.Queries.EmployeeListingQuery>
    {
        public EmployeeListingQuery(LanguageExt.Seq<Fossa.API.Core.Entities.EmployeeId> Ids, System.Guid TenantID, System.Guid UserID) { }
        public override System.Collections.Generic.IEnumerable<Fossa.API.Core.Entities.EmployeeId> AffectingTenantEntitiesIdentities { get; }
        public LanguageExt.Seq<Fossa.API.Core.Entities.EmployeeId> Ids { get; init; }
        public System.Guid UserID { get; init; }
    }
    public class EmployeeListingQueryHandler : MediatR.IRequestHandler<Fossa.API.Core.Messages.Queries.EmployeeListingQuery, LanguageExt.Seq<Fossa.API.Core.Entities.EmployeeEntity>>
    {
        public EmployeeListingQueryHandler(Fossa.API.Core.Repositories.IEmployeeQueryRepository branchQueryRepository) { }
        public System.Threading.Tasks.Task<LanguageExt.Seq<Fossa.API.Core.Entities.EmployeeEntity>> Handle(Fossa.API.Core.Messages.Queries.EmployeeListingQuery request, System.Threading.CancellationToken cancellationToken) { }
    }
    public class EmployeePagingQuery : Fossa.API.Core.Messages.Queries.EntityTenantQuery<Fossa.API.Core.Entities.EmployeeEntity, Fossa.API.Core.Entities.EmployeeId, System.Guid, TIKSN.Data.PageResult<Fossa.API.Core.Entities.EmployeeEntity>>, Fossa.API.Core.Messages.Queries.IPagingQuery, Fossa.API.Core.Messages.Queries.IPagingQuery<Fossa.API.Core.Entities.EmployeeEntity>, Fossa.API.Core.Messages.Queries.IQuery<TIKSN.Data.PageResult<Fossa.API.Core.Entities.EmployeeEntity>>, MediatR.IBaseRequest, MediatR.IRequest<TIKSN.Data.PageResult<Fossa.API.Core.Entities.EmployeeEntity>>, System.IEquatable<Fossa.API.Core.Messages.Queries.EmployeePagingQuery>
    {
        public EmployeePagingQuery(System.Guid TenantID, System.Guid UserID, string Search, TIKSN.Data.Page Page) { }
        public override System.Collections.Generic.IEnumerable<Fossa.API.Core.Entities.EmployeeId> AffectingTenantEntitiesIdentities { get; }
        public TIKSN.Data.Page Page { get; init; }
        public string Search { get; init; }
        public System.Guid UserID { get; init; }
    }
    public class EmployeePagingQueryHandler : MediatR.IRequestHandler<Fossa.API.Core.Messages.Queries.EmployeePagingQuery, TIKSN.Data.PageResult<Fossa.API.Core.Entities.EmployeeEntity>>
    {
        public EmployeePagingQueryHandler(Fossa.API.Core.Repositories.IEmployeeQueryRepository employeeQueryRepository) { }
        public System.Threading.Tasks.Task<TIKSN.Data.PageResult<Fossa.API.Core.Entities.EmployeeEntity>> Handle(Fossa.API.Core.Messages.Queries.EmployeePagingQuery request, System.Threading.CancellationToken cancellationToken) { }
    }
    public class EmployeeRetrievalQuery : Fossa.API.Core.Messages.Queries.EntityTenantQuery<Fossa.API.Core.Entities.EmployeeEntity, Fossa.API.Core.Entities.EmployeeId, System.Guid, Fossa.API.Core.Entities.EmployeeEntity>, System.IEquatable<Fossa.API.Core.Messages.Queries.EmployeeRetrievalQuery>
    {
        public EmployeeRetrievalQuery(Fossa.API.Core.Entities.EmployeeId ID, System.Guid TenantID, System.Guid UserID) { }
        public override System.Collections.Generic.IEnumerable<Fossa.API.Core.Entities.EmployeeId> AffectingTenantEntitiesIdentities { get; }
        public Fossa.API.Core.Entities.EmployeeId ID { get; init; }
        public System.Guid UserID { get; init; }
    }
    public class EmployeeRetrievalQueryHandler : MediatR.IRequestHandler<Fossa.API.Core.Messages.Queries.EmployeeRetrievalQuery, Fossa.API.Core.Entities.EmployeeEntity>
    {
        public EmployeeRetrievalQueryHandler(Fossa.API.Core.Repositories.IEmployeeQueryRepository employeeQueryRepository) { }
        public System.Threading.Tasks.Task<Fossa.API.Core.Entities.EmployeeEntity> Handle(Fossa.API.Core.Messages.Queries.EmployeeRetrievalQuery request, System.Threading.CancellationToken cancellationToken) { }
    }
    public abstract class EntityTenantQuery<TEntity, TEntityIdentity, TTenantIdentity, TResult> : Fossa.API.Core.Messages.IAffectingTenantEntities<TEntityIdentity>, Fossa.API.Core.Messages.Queries.IQuery<TResult>, Fossa.API.Core.Messages.Queries.ITenantQuery<TEntityIdentity, TTenantIdentity, TResult>, MediatR.IBaseRequest, MediatR.IRequest<TResult>, System.IEquatable<Fossa.API.Core.Messages.Queries.EntityTenantQuery<TEntity, TEntityIdentity, TTenantIdentity, TResult>>
        where TEntity : TIKSN.Data.IEntity<TEntityIdentity>
        where TEntityIdentity : System.IEquatable<TEntityIdentity>
        where TTenantIdentity : System.IEquatable<TTenantIdentity>
    {
        protected EntityTenantQuery(TTenantIdentity TenantID) { }
        public System.Collections.Generic.IEnumerable<Fossa.API.Core.Messages.AffectingEntity<TEntityIdentity>> AffectingTenantEntities { get; }
        public abstract System.Collections.Generic.IEnumerable<TEntityIdentity> AffectingTenantEntitiesIdentities { get; }
        public TTenantIdentity TenantID { get; init; }
    }
    public interface IPagingQuery
    {
        TIKSN.Data.Page Page { get; }
    }
    public interface IPagingQuery<TEntity> : Fossa.API.Core.Messages.Queries.IPagingQuery, Fossa.API.Core.Messages.Queries.IQuery<TIKSN.Data.PageResult<TEntity>>, MediatR.IBaseRequest, MediatR.IRequest<TIKSN.Data.PageResult<TEntity>> { }
    public interface IQuery<out TResult> : MediatR.IBaseRequest, MediatR.IRequest<TResult> { }
    public interface ITenantQuery<TEntityIdentity, out TTenantIdentity, out TResult> : Fossa.API.Core.Messages.IAffectingTenantEntities<TEntityIdentity>, Fossa.API.Core.Messages.Queries.IQuery<TResult>, MediatR.IBaseRequest, MediatR.IRequest<TResult>
        where TEntityIdentity : System.IEquatable<TEntityIdentity>
        where out TTenantIdentity : System.IEquatable<TTenantIdentity>
    {
        TTenantIdentity TenantID { get; }
    }
    public interface ITenantUserQuery<TEntityIdentity, out TUserIdentity, out TTenantIdentity, out TResult> : Fossa.API.Core.Messages.IAffectingTenantEntities<TEntityIdentity>, Fossa.API.Core.Messages.Queries.IQuery<TResult>, Fossa.API.Core.Messages.Queries.ITenantQuery<TEntityIdentity, TTenantIdentity, TResult>, Fossa.API.Core.Messages.Queries.IUserQuery<TUserIdentity, TResult>, MediatR.IBaseRequest, MediatR.IRequest<TResult>
        where TEntityIdentity : System.IEquatable<TEntityIdentity>
        where out TUserIdentity : System.IEquatable<TUserIdentity>
        where out TTenantIdentity : System.IEquatable<TTenantIdentity> { }
    public interface IUserQuery<out TUserIdentity, out TResult> : Fossa.API.Core.Messages.Queries.IQuery<TResult>, MediatR.IBaseRequest, MediatR.IRequest<TResult>
        where out TUserIdentity : System.IEquatable<TUserIdentity>
    {
        TUserIdentity UserID { get; }
    }
    public class SystemLicenseRetrievalQuery : Fossa.API.Core.Messages.Queries.IQuery<TIKSN.Licensing.License<Fossa.Licensing.SystemEntitlements>>, MediatR.IBaseRequest, MediatR.IRequest<TIKSN.Licensing.License<Fossa.Licensing.SystemEntitlements>>, System.IEquatable<Fossa.API.Core.Messages.Queries.SystemLicenseRetrievalQuery>
    {
        public SystemLicenseRetrievalQuery() { }
    }
    public class SystemLicenseRetrievalQueryHandler : MediatR.IRequestHandler<Fossa.API.Core.Messages.Queries.SystemLicenseRetrievalQuery, TIKSN.Licensing.License<Fossa.Licensing.SystemEntitlements>>
    {
        public SystemLicenseRetrievalQueryHandler(Fossa.API.Core.Services.ISystemLicenseRetriever systemLicenseRetriever) { }
        public System.Threading.Tasks.Task<TIKSN.Licensing.License<Fossa.Licensing.SystemEntitlements>> Handle(Fossa.API.Core.Messages.Queries.SystemLicenseRetrievalQuery request, System.Threading.CancellationToken cancellationToken) { }
    }
}
namespace Fossa.API.Core.Relationship
{
    public interface IRelationshipGraph
    {
        System.Threading.Tasks.Task<bool> HasDependentEntitiesAsync<T>(T id, System.Threading.CancellationToken cancellationToken)
            where T : System.IEquatable<T>;
    }
    public class RelationshipGraph : Fossa.API.Core.Relationship.IRelationshipGraph
    {
        public RelationshipGraph(System.IServiceProvider serviceProvider) { }
        public System.Threading.Tasks.Task<bool> HasDependentEntitiesAsync<T>(T id, System.Threading.CancellationToken cancellationToken)
            where T : System.IEquatable<T> { }
    }
}
namespace Fossa.API.Core.Repositories
{
    public interface IBranchIndexRepository
    {
        System.Threading.Tasks.Task EnsureIndexesCreatedAsync(System.Threading.CancellationToken cancellationToken);
    }
    public interface IBranchQueryRepository : Fossa.API.Core.Repositories.IDependencyQueryRepository<Fossa.API.Core.Entities.CompanyId>, TIKSN.Data.IQueryRepository<Fossa.API.Core.Entities.BranchEntity, Fossa.API.Core.Entities.BranchId>
    {
        System.Threading.Tasks.Task<int> CountAllAsync(Fossa.API.Core.Entities.CompanyId companyId, System.Threading.CancellationToken cancellationToken);
        System.Threading.Tasks.Task<TIKSN.Data.PageResult<Fossa.API.Core.Entities.BranchEntity>> PageAsync(Fossa.API.Core.Repositories.TenantBranchPageQuery pageQuery, System.Threading.CancellationToken cancellationToken);
    }
    public interface IBranchRepository : TIKSN.Data.IRepository<Fossa.API.Core.Entities.BranchEntity> { }
    public interface ICompanyQueryRepository : TIKSN.Data.IQueryRepository<Fossa.API.Core.Entities.CompanyEntity, Fossa.API.Core.Entities.CompanyId>
    {
        System.Threading.Tasks.Task<int> CountAllAsync(System.Threading.CancellationToken cancellationToken);
        System.Threading.Tasks.Task<LanguageExt.Option<Fossa.API.Core.Entities.CompanyEntity>> FindByTenantIdAsync(System.Guid tenantId, System.Threading.CancellationToken cancellationToken);
        System.Threading.Tasks.Task<Fossa.API.Core.Entities.CompanyEntity> GetByTenantIdAsync(System.Guid tenantId, System.Threading.CancellationToken cancellationToken);
    }
    public interface ICompanyRepository : TIKSN.Data.IRepository<Fossa.API.Core.Entities.CompanyEntity> { }
    public interface ICompanySettingsQueryRepository : Fossa.API.Core.Repositories.IDependencyQueryRepository<Fossa.API.Core.Entities.CompanyId>, TIKSN.Data.IQueryRepository<Fossa.API.Core.Entities.CompanySettingsEntity, Fossa.API.Core.Entities.CompanySettingsId>
    {
        System.Threading.Tasks.Task<LanguageExt.Option<Fossa.API.Core.Entities.CompanySettingsEntity>> FindByCompanyIdAsync(Fossa.API.Core.Entities.CompanyId companyId, System.Threading.CancellationToken cancellationToken);
        System.Threading.Tasks.Task<Fossa.API.Core.Entities.CompanySettingsEntity> GetByCompanyIdAsync(Fossa.API.Core.Entities.CompanyId companyId, System.Threading.CancellationToken cancellationToken);
    }
    public interface ICompanySettingsRepository : TIKSN.Data.IRepository<Fossa.API.Core.Entities.CompanySettingsEntity> { }
    public interface IDepartmentIndexRepository
    {
        System.Threading.Tasks.Task EnsureIndexesCreatedAsync(System.Threading.CancellationToken cancellationToken);
    }
    public interface IDepartmentQueryRepository : Fossa.API.Core.Repositories.IDependencyQueryRepository<Fossa.API.Core.Entities.CompanyId>, Fossa.API.Core.Repositories.IDependencyQueryRepository<Fossa.API.Core.Entities.DepartmentId>, Fossa.API.Core.Repositories.IDependencyQueryRepository<Fossa.API.Core.Entities.EmployeeId>, TIKSN.Data.IQueryRepository<Fossa.API.Core.Entities.DepartmentEntity, Fossa.API.Core.Entities.DepartmentId>
    {
        System.Threading.Tasks.Task<int> CountAllAsync(Fossa.API.Core.Entities.CompanyId companyId, System.Threading.CancellationToken cancellationToken);
        System.Threading.Tasks.Task<TIKSN.Data.PageResult<Fossa.API.Core.Entities.DepartmentEntity>> PageAsync(Fossa.API.Core.Repositories.TenantDepartmentPageQuery pageQuery, System.Threading.CancellationToken cancellationToken);
    }
    public interface IDepartmentRepository : TIKSN.Data.IRepository<Fossa.API.Core.Entities.DepartmentEntity> { }
    public interface IDependencyQueryRepository<T>
        where T : System.IEquatable<T>
    {
        System.Threading.Tasks.Task<bool> HasDependencyAsync(T id, System.Threading.CancellationToken cancellationToken);
    }
    public interface IEmployeeIndexRepository
    {
        System.Threading.Tasks.Task EnsureIndexesCreatedAsync(System.Threading.CancellationToken cancellationToken);
    }
    public interface IEmployeeQueryRepository : Fossa.API.Core.Repositories.IDependencyQueryRepository<Fossa.API.Core.Entities.BranchId>, Fossa.API.Core.Repositories.IDependencyQueryRepository<Fossa.API.Core.Entities.CompanyId>, Fossa.API.Core.Repositories.IDependencyQueryRepository<Fossa.API.Core.Entities.DepartmentId>, TIKSN.Data.IQueryRepository<Fossa.API.Core.Entities.EmployeeEntity, Fossa.API.Core.Entities.EmployeeId>
    {
        System.Threading.Tasks.Task<int> CountAllAsync(Fossa.API.Core.Entities.CompanyId companyId, System.Threading.CancellationToken cancellationToken);
        System.Threading.Tasks.Task<LanguageExt.Option<Fossa.API.Core.Entities.EmployeeEntity>> FindByUserIdAsync(System.Guid userId, System.Threading.CancellationToken cancellationToken);
        System.Threading.Tasks.Task<Fossa.API.Core.Entities.EmployeeEntity> GetByUserIdAsync(System.Guid userId, System.Threading.CancellationToken cancellationToken);
        System.Threading.Tasks.Task<TIKSN.Data.PageResult<Fossa.API.Core.Entities.EmployeeEntity>> PageAsync(Fossa.API.Core.Repositories.TenantEmployeePageQuery pageQuery, System.Threading.CancellationToken cancellationToken);
    }
    public interface IEmployeeRepository : TIKSN.Data.IRepository<Fossa.API.Core.Entities.EmployeeEntity> { }
    public interface ILicenseFileRepository : TIKSN.Data.IFileRepository { }
    public interface ISystemPropertiesQueryRepository : TIKSN.Data.IQueryRepository<Fossa.API.Core.Entities.SystemPropertiesEntity, Fossa.API.Core.Entities.SystemPropertiesId> { }
    public interface ISystemPropertiesRepository : TIKSN.Data.IRepository<Fossa.API.Core.Entities.SystemPropertiesEntity> { }
    public class TenantBranchPageQuery : TIKSN.Data.PageQuery
    {
        public TenantBranchPageQuery(System.Guid tenantId, string search, TIKSN.Data.Page page) { }
        public string Search { get; }
        public System.Guid TenantId { get; }
    }
    public class TenantDepartmentPageQuery : TIKSN.Data.PageQuery
    {
        public TenantDepartmentPageQuery(System.Guid tenantId, string search, TIKSN.Data.Page page) { }
        public string Search { get; }
        public System.Guid TenantId { get; }
    }
    public class TenantEmployeePageQuery : TIKSN.Data.PageQuery
    {
        public TenantEmployeePageQuery(System.Guid tenantId, string search, TIKSN.Data.Page page) { }
        public string Search { get; }
        public System.Guid TenantId { get; }
    }
}
namespace Fossa.API.Core.Services
{
    public class CertificateProvider : Fossa.API.Core.Services.ICertificateProvider
    {
        public CertificateProvider() { }
        public System.Threading.Tasks.Task<System.Security.Cryptography.X509Certificates.X509Certificate2> GetCertificateAsync(System.Threading.CancellationToken cancellationToken) { }
    }
    public class CompanyLicenseCreator : Fossa.API.Core.Services.CompanyLicenseManager, Fossa.API.Core.Services.ICompanyLicenseCreator
    {
        public CompanyLicenseCreator(Fossa.API.Core.Repositories.ILicenseFileRepository licenseFileRepository, TIKSN.Licensing.ILicenseFactory<Fossa.Licensing.CompanyEntitlements, Fossa.Licensing.CompanyLicenseEntitlements> licenseFactory, Fossa.API.Core.Services.ICertificateProvider certificateProvider, Fossa.API.Core.Services.ISystemLicenseRetriever systemLicenseRetriever) { }
        public System.Threading.Tasks.Task<LanguageExt.Validation<LanguageExt.Common.Error, TIKSN.Licensing.License<Fossa.Licensing.CompanyEntitlements>>> CreateAsync(Fossa.API.Core.Entities.CompanyId companyId, LanguageExt.Seq<byte> licenseData, System.Threading.CancellationToken cancellationToken) { }
    }
    public static class CompanyLicenseHelper
    {
        public static string GetCompanyLicensePath(Fossa.API.Core.Entities.CompanyId companyId) { }
    }
    public class CompanyLicenseInitializer : Fossa.API.Core.Services.ICompanyLicenseInitializer
    {
        public CompanyLicenseInitializer(Fossa.API.Core.Repositories.ILicenseFileRepository licenseFileRepository, Microsoft.Extensions.Logging.ILogger<Fossa.API.Core.Services.CompanyLicenseInitializer> logger) { }
        public System.Threading.Tasks.Task InitializeAsync(Fossa.API.Core.Entities.CompanyId companyId, System.Threading.CancellationToken cancellationToken) { }
    }
    public abstract class CompanyLicenseManager
    {
        protected readonly Fossa.API.Core.Services.ICertificateProvider _certificateProvider;
        protected readonly TIKSN.Licensing.ILicenseFactory<Fossa.Licensing.CompanyEntitlements, Fossa.Licensing.CompanyLicenseEntitlements> _licenseFactory;
        protected CompanyLicenseManager(Fossa.API.Core.Services.ICertificateProvider certificateProvider, TIKSN.Licensing.ILicenseFactory<Fossa.Licensing.CompanyEntitlements, Fossa.Licensing.CompanyLicenseEntitlements> licenseFactory) { }
        protected System.Threading.Tasks.Task<LanguageExt.Validation<LanguageExt.Common.Error, TIKSN.Licensing.License<Fossa.Licensing.CompanyEntitlements>>> ValidateCompanyLicenseAsync(TIKSN.Licensing.License<Fossa.Licensing.SystemEntitlements> systemLicense, Fossa.API.Core.Entities.CompanyId companyId, LanguageExt.Seq<byte> licenseData, System.Threading.CancellationToken cancellationToken) { }
    }
    public class CompanyLicenseRetriever : Fossa.API.Core.Services.CompanyLicenseManager, Fossa.API.Core.Services.ICompanyLicenseRetriever
    {
        public CompanyLicenseRetriever(Fossa.API.Core.Repositories.ILicenseFileRepository licenseFileRepository, TIKSN.Licensing.ILicenseFactory<Fossa.Licensing.CompanyEntitlements, Fossa.Licensing.CompanyLicenseEntitlements> licenseFactory, Fossa.API.Core.Services.ICertificateProvider certificateProvider, Fossa.API.Core.Services.ISystemLicenseRetriever systemLicenseRetriever) { }
        public System.Threading.Tasks.Task<LanguageExt.Validation<LanguageExt.Common.Error, TIKSN.Licensing.License<Fossa.Licensing.CompanyEntitlements>>> GetAsync(Fossa.API.Core.Entities.CompanyId companyId, System.Threading.CancellationToken cancellationToken) { }
    }
    public class CountryProvider : Fossa.API.Core.Services.ICountryProvider
    {
        public CountryProvider(TIKSN.Globalization.IRegionFactory regionFactory) { }
        public System.Globalization.RegionInfo GetCountry(string countryCode) { }
    }
    public class DateTimeZoneLookup : Fossa.API.Core.Services.IDateTimeZoneLookup
    {
        public DateTimeZoneLookup(TIKSN.Globalization.IRegionFactory regionFactory) { }
        public LanguageExt.Seq<NodaTime.DateTimeZone> ListRegionalTimeZones(System.Globalization.RegionInfo region) { }
        public System.Globalization.RegionInfo ResolveTimeZoneRegion(NodaTime.DateTimeZone timeZone) { }
    }
    public interface ICertificateProvider
    {
        System.Threading.Tasks.Task<System.Security.Cryptography.X509Certificates.X509Certificate2> GetCertificateAsync(System.Threading.CancellationToken cancellationToken);
    }
    public interface ICompanyLicenseCreator
    {
        System.Threading.Tasks.Task<LanguageExt.Validation<LanguageExt.Common.Error, TIKSN.Licensing.License<Fossa.Licensing.CompanyEntitlements>>> CreateAsync(Fossa.API.Core.Entities.CompanyId companyId, LanguageExt.Seq<byte> licenseData, System.Threading.CancellationToken cancellationToken);
    }
    public interface ICompanyLicenseInitializer
    {
        System.Threading.Tasks.Task InitializeAsync(Fossa.API.Core.Entities.CompanyId companyId, System.Threading.CancellationToken cancellationToken);
    }
    public interface ICompanyLicenseRetriever
    {
        System.Threading.Tasks.Task<LanguageExt.Validation<LanguageExt.Common.Error, TIKSN.Licensing.License<Fossa.Licensing.CompanyEntitlements>>> GetAsync(Fossa.API.Core.Entities.CompanyId companyId, System.Threading.CancellationToken cancellationToken);
    }
    public interface ICountryProvider
    {
        System.Globalization.RegionInfo GetCountry(string countryCode);
    }
    public interface IDateTimeZoneLookup
    {
        LanguageExt.Seq<NodaTime.DateTimeZone> ListRegionalTimeZones(System.Globalization.RegionInfo region);
        System.Globalization.RegionInfo ResolveTimeZoneRegion(NodaTime.DateTimeZone timeZone);
    }
    public interface IPostalCodeParser
    {
        LanguageExt.Parsec.ParserResult<string> ParsePostalCode(System.Globalization.RegionInfo country, string inputPostalCode);
    }
    public interface ISystemInitializer
    {
        System.Threading.Tasks.Task InitializeAsync(System.Threading.CancellationToken cancellationToken);
    }
    public interface ISystemLicenseInitializer
    {
        System.Threading.Tasks.Task InitializeAsync(System.Threading.CancellationToken cancellationToken);
    }
    public interface ISystemLicenseRetriever
    {
        System.Threading.Tasks.Task<LanguageExt.Validation<LanguageExt.Common.Error, TIKSN.Licensing.License<Fossa.Licensing.SystemEntitlements>>> GetAsync(System.Threading.CancellationToken cancellationToken);
    }
    public interface ISystemPropertiesInitializer
    {
        System.Threading.Tasks.Task InitializeAsync(System.Threading.CancellationToken cancellationToken);
    }
    public static class LicensePaths
    {
        public const string SystemLicensePath = "System";
        public static readonly System.Text.CompositeFormat CompanyLicensePathFormat;
    }
    public class PostalCodeParser : Fossa.API.Core.Services.IPostalCodeParser
    {
        public PostalCodeParser() { }
        public LanguageExt.Parsec.ParserResult<string> ParsePostalCode(System.Globalization.RegionInfo country, string inputPostalCode) { }
    }
    public class SystemInitializer : Fossa.API.Core.Services.ISystemInitializer
    {
        public SystemInitializer(Fossa.API.Core.Services.ISystemPropertiesInitializer systemPropertiesInitializer, Fossa.API.Core.Services.ISystemLicenseInitializer systemLicenseInitializer, Fossa.API.Core.Repositories.IBranchIndexRepository branchIndexRepository, Fossa.API.Core.Repositories.IEmployeeIndexRepository employeeIndexRepository, Fossa.API.Core.Repositories.IDepartmentIndexRepository departmentIndexRepository, Microsoft.Extensions.Logging.ILogger<Fossa.API.Core.Services.SystemInitializer> logger) { }
        public System.Threading.Tasks.Task InitializeAsync(System.Threading.CancellationToken cancellationToken) { }
    }
    public class SystemLicenseInitializer : Fossa.API.Core.Services.ISystemLicenseInitializer
    {
        public SystemLicenseInitializer(Fossa.API.Core.Repositories.ILicenseFileRepository licenseFileRepository, Microsoft.Extensions.Logging.ILogger<Fossa.API.Core.Services.SystemLicenseInitializer> logger) { }
        public System.Threading.Tasks.Task InitializeAsync(System.Threading.CancellationToken cancellationToken) { }
    }
    public class SystemLicenseRetriever : Fossa.API.Core.Services.ISystemLicenseRetriever
    {
        public SystemLicenseRetriever(Fossa.API.Core.Repositories.ILicenseFileRepository licenseFileRepository, TIKSN.Licensing.ILicenseFactory<Fossa.Licensing.SystemEntitlements, Fossa.Licensing.SystemLicenseEntitlements> licenseFactory, Fossa.API.Core.Telemetry.ISystemLicenseMetricsRecorder systemLicenseMetricsRecorder, Fossa.API.Core.Services.ICertificateProvider certificateProvider, Microsoft.Extensions.Hosting.IHostEnvironment hostEnvironment, Fossa.API.Core.Repositories.ISystemPropertiesQueryRepository systemPropertiesQueryRepository) { }
        public System.Threading.Tasks.Task<LanguageExt.Validation<LanguageExt.Common.Error, TIKSN.Licensing.License<Fossa.Licensing.SystemEntitlements>>> GetAsync(System.Threading.CancellationToken cancellationToken) { }
    }
    public static class SystemProperties
    {
        public static readonly Fossa.API.Core.Entities.SystemPropertiesId MainSystemPropertiesId;
    }
    public class SystemPropertiesInitializer : Fossa.API.Core.Services.ISystemPropertiesInitializer
    {
        public SystemPropertiesInitializer(Fossa.API.Core.Repositories.ISystemPropertiesRepository systemPropertiesRepository, Fossa.API.Core.Repositories.ISystemPropertiesQueryRepository systemPropertiesQueryRepository, Microsoft.Extensions.Logging.ILogger<Fossa.API.Core.Services.SystemPropertiesInitializer> logger) { }
        public System.Threading.Tasks.Task InitializeAsync(System.Threading.CancellationToken cancellationToken) { }
    }
}
namespace Fossa.API.Core.Telemetry
{
    public interface ISystemLicenseMetricsRecorder
    {
        void Record(LanguageExt.Validation<LanguageExt.Common.Error, TIKSN.Licensing.License<Fossa.Licensing.SystemEntitlements>> license);
    }
    public class SystemLicenseMetricsRecorder : Fossa.API.Core.Telemetry.ISystemLicenseMetricsRecorder
    {
        public SystemLicenseMetricsRecorder(System.TimeProvider timeProvider, System.Diagnostics.Metrics.IMeterFactory meterFactory) { }
        public void Record(LanguageExt.Validation<LanguageExt.Common.Error, TIKSN.Licensing.License<Fossa.Licensing.SystemEntitlements>> license) { }
    }
}
namespace Fossa.API.Core.Tenant
{
    public interface ITenantIdProvider<T>
    {
        LanguageExt.Option<T> FindTenantId();
        T GetTenantId();
    }
}
namespace Fossa.API.Core.TimeZone
{
    public class DateTimeZoneProvider : Fossa.API.Core.TimeZone.IDateTimeZoneProvider
    {
        public DateTimeZoneProvider() { }
        public NodaTime.DateTimeZone GetDateTimeZoneById(string timeZoneId) { }
    }
    public interface IDateTimeZoneProvider
    {
        NodaTime.DateTimeZone GetDateTimeZoneById(string timeZoneId);
    }
}
namespace Fossa.API.Core.User
{
    public interface IUserIdProvider<T>
    {
        LanguageExt.Option<T> FindUserId();
        T GetUserId();
    }
}
namespace Fossa.API.Core.Validators
{
    public class AddressValidator : FluentValidation.AbstractValidator<Fossa.API.Core.Entities.Address>
    {
        public AddressValidator(Fossa.API.Core.Services.IPostalCodeParser postalCodeParser) { }
    }
    public static class BranchCommandValidatorHelper
    {
        public static string BranchAddressCountryMustBeCompanyCountryPropertyName { get; }
        public static System.Threading.Tasks.Task<bool> BranchAddressCountryMustBeCompanyCountryAsync(Fossa.API.Core.Repositories.ICompanyQueryRepository companyQueryRepository, System.Guid tenantId, LanguageExt.Option<Fossa.API.Core.Entities.Address> address, System.Threading.CancellationToken cancellationToken) { }
        public static string BranchAddressCountryMustBeCompanyCountryErrorMessage<T>(T command, LanguageExt.Option<Fossa.API.Core.Entities.Address> property) { }
        public static System.Threading.Tasks.Task<bool> BranchTimeZoneCountryMustBeCompanyCountryAsync(Fossa.API.Core.Repositories.ICompanyQueryRepository companyQueryRepository, Fossa.API.Core.Services.IDateTimeZoneLookup dateTimeZoneLookup, System.Guid tenantId, NodaTime.DateTimeZone branchTimeZone, System.Threading.CancellationToken cancellationToken) { }
        public static string BranchTimeZoneCountryMustBeCompanyCountryErrorMessage<T>(T command, NodaTime.DateTimeZone property) { }
    }
    public class BranchCreationCommandValidator : FluentValidation.AbstractValidator<Fossa.API.Core.Messages.Commands.BranchCreationCommand>
    {
        public BranchCreationCommandValidator(Fossa.API.Core.Repositories.ICompanyQueryRepository companyQueryRepository, FluentValidation.IValidator<Fossa.API.Core.Entities.Address> addressValidator, Fossa.API.Core.Services.IDateTimeZoneLookup dateTimeZoneLookup) { }
    }
    public class BranchDeletionCommandValidator : FluentValidation.AbstractValidator<Fossa.API.Core.Messages.Commands.BranchDeletionCommand>
    {
        public BranchDeletionCommandValidator() { }
    }
    public class BranchModificationCommandValidator : FluentValidation.AbstractValidator<Fossa.API.Core.Messages.Commands.BranchModificationCommand>
    {
        public BranchModificationCommandValidator(Fossa.API.Core.Repositories.ICompanyQueryRepository companyQueryRepository, FluentValidation.IValidator<Fossa.API.Core.Entities.Address> addressValidator, Fossa.API.Core.Services.IDateTimeZoneLookup dateTimeZoneLookup) { }
    }
    public class BranchRetrievalQueryValidator : FluentValidation.AbstractValidator<Fossa.API.Core.Messages.Queries.BranchRetrievalQuery>
    {
        public BranchRetrievalQueryValidator() { }
    }
    public static class CompanyCommandValidatorHelper
    {
        public static System.Threading.Tasks.Task<bool> CompanyCountryMustBeLicensedAsync(Fossa.API.Core.Services.ISystemLicenseRetriever systemLicenseRetriever, System.Globalization.RegionInfo companyCountry, System.Threading.CancellationToken cancellationToken) { }
        public static string CompanyCountryMustBeLicensedErrorMessage<T>(T command, System.Globalization.RegionInfo property) { }
    }
    public class CompanyCreationCommandValidator : FluentValidation.AbstractValidator<Fossa.API.Core.Messages.Commands.CompanyCreationCommand>
    {
        public CompanyCreationCommandValidator(Fossa.API.Core.Services.ISystemLicenseRetriever systemLicenseRetriever) { }
    }
    public class CompanyDeletionCommandValidator : FluentValidation.AbstractValidator<Fossa.API.Core.Messages.Commands.CompanyDeletionCommand>
    {
        public CompanyDeletionCommandValidator() { }
    }
    public class CompanyModificationCommandValidator : FluentValidation.AbstractValidator<Fossa.API.Core.Messages.Commands.CompanyModificationCommand>
    {
        public CompanyModificationCommandValidator(Fossa.API.Core.Services.ISystemLicenseRetriever systemLicenseRetriever) { }
    }
    public class CompanyRetrievalQueryValidator : FluentValidation.AbstractValidator<Fossa.API.Core.Messages.Queries.CompanyRetrievalQuery>
    {
        public CompanyRetrievalQueryValidator() { }
    }
    public class CompanySettingsCreationCommandValidator : FluentValidation.AbstractValidator<Fossa.API.Core.Messages.Commands.CompanySettingsCreationCommand>
    {
        public CompanySettingsCreationCommandValidator() { }
    }
    public class CompanySettingsDeletionCommandValidator : FluentValidation.AbstractValidator<Fossa.API.Core.Messages.Commands.CompanySettingsDeletionCommand>
    {
        public CompanySettingsDeletionCommandValidator() { }
    }
    public class CompanySettingsModificationCommandValidator : FluentValidation.AbstractValidator<Fossa.API.Core.Messages.Commands.CompanySettingsModificationCommand>
    {
        public CompanySettingsModificationCommandValidator() { }
    }
    public class DepartmentCreationCommandValidator : FluentValidation.AbstractValidator<Fossa.API.Core.Messages.Commands.DepartmentCreationCommand>
    {
        public DepartmentCreationCommandValidator(Fossa.API.Core.Repositories.IDepartmentQueryRepository departmentQueryRepository, Fossa.API.Core.Repositories.IEmployeeQueryRepository employeeQueryRepository) { }
    }
    public class DepartmentDeletionCommandValidator : FluentValidation.AbstractValidator<Fossa.API.Core.Messages.Commands.DepartmentDeletionCommand>
    {
        public DepartmentDeletionCommandValidator() { }
    }
    public class DepartmentModificationCommandValidator : FluentValidation.AbstractValidator<Fossa.API.Core.Messages.Commands.DepartmentModificationCommand>
    {
        public DepartmentModificationCommandValidator(Fossa.API.Core.Repositories.IDepartmentQueryRepository departmentQueryRepository, Fossa.API.Core.Repositories.IEmployeeQueryRepository employeeQueryRepository) { }
    }
    public class EmployeeCreationCommandValidator : FluentValidation.AbstractValidator<Fossa.API.Core.Messages.Commands.EmployeeCreationCommand>
    {
        public EmployeeCreationCommandValidator() { }
    }
    public class EmployeeDeletionCommandValidator : FluentValidation.AbstractValidator<Fossa.API.Core.Messages.Commands.EmployeeDeletionCommand>
    {
        public EmployeeDeletionCommandValidator() { }
    }
    public class EmployeeManagementCommandValidator : FluentValidation.AbstractValidator<Fossa.API.Core.Messages.Commands.EmployeeManagementCommand>
    {
        public EmployeeManagementCommandValidator(Fossa.API.Core.Repositories.IBranchQueryRepository branchQueryRepository, Fossa.API.Core.Repositories.IDepartmentQueryRepository departmentQueryRepository) { }
    }
    public class EmployeeModificationCommandValidator : FluentValidation.AbstractValidator<Fossa.API.Core.Messages.Commands.EmployeeModificationCommand>
    {
        public EmployeeModificationCommandValidator() { }
    }
    public class OptionValidator<T, TProperty> : FluentValidation.Validators.PropertyValidator<T, LanguageExt.Option<TProperty>>
    {
        public OptionValidator(FluentValidation.IValidator<TProperty> validator) { }
        public override string Name { get; }
        protected override string GetDefaultMessageTemplate(string errorCode) { }
        public override bool IsValid(FluentValidation.ValidationContext<T> context, LanguageExt.Option<TProperty> value) { }
    }
}